#
#   Demo script file for setup bring

# python generic imports
import yaml
import logging
import argparse
import re
import time
import utils
from utils import *

from pyats import aetest
import config_bringup
import config_bringup_test
import yaml
import logging
from pyats.topology import loader
import argparse
import MyLib
from MyLib import my_utils
from MyLib import my_config_utils
from MyLib import *
# pyATS imports

from unicon import Connection
from ats import aetest
from ats.log.utils import banner
from ats.datastructures.logic import Not, And, Or
from ats.easypy import run
from ats.log.utils import banner
import bringup_lib
#import evpn_lib
import vxlan_lib
import ospfv2_lib
import bgp_lib
import evpn_lib
import tcam_lib
import pim_lib
import vpc_lib
#import oam_lib
from pyats.async_ import pcall
from pyats.async_ import Pcall

#Ixia Libraries
import ixia_lib_new
from ixia_lib_new import *

# N39k Library imports
import config_bringup
import interface_lib
import ipaddress

from itertools import chain
from collections import OrderedDict
from itertools import permutations
import json
from bs4 import BeautifulSoup



def expandTrafficItemList(a):
    skip_list = []
    pat = re.compile(r'([A-Za-z]+)(\d+)-[A-Za-z]+(\d+)', flags=re.I)
    if a:
        log.info(banner('The Value of a is : {0}'.format(a)))
        c = a.split(',')
        log.info(banner('The Value of c is : {0}'.format(c)))
        for items in c:
            b = pat.search(items)
            [skip_list.append(b.group(1) + str("{:03d}".format(i))) for i in range(int(b.group(2)), int(b.group(3))+1)]

    return skip_list

def countDownTimer(a):
    for i in range(a):
        log.info('seconds remaining is: {0}'.format(int(a-i)))
        time.sleep(1)
    return 1


def deleteAndCreateCheckpoint(log,hdl):
    cfg = 'sh checkpoint | xml | grep <name>'
    out = hdl.execute(cfg)
    if out:
        for i in out.splitlines():
            t = re.findall(">(\S+)<",i)
            if t:
                if 'system' not in i:
                    if isinstance(t, list):
                        flag = 1
                        for i in t:
                            cmd = 'no checkpoint ' + i
                            hdl.execute(cmd)
                            countDownTimer(5)        
                        if flag:
                            hdl.execute('checkpoint c1')
                else:
                    hdl.execute('checkpoint c1')

    return 1


def ExpandList(c):
    new_list = []
    for i in c:
        if '-' in str(i):
            low,high=i.split('-')[0],i.split('-')[-1]

            if low !=high:
                for j in range(int(low),int(high)+1):
                    new_list.append(j)
        else:
            new_list.append(i)
            
    return new_list


def switch_reload(uut):
 
    dialog = Dialog([
        Statement(pattern=r'.*Do you wish to proceed anyway.*',
                        action='sendline(y)',
                        loop_continue=True,
                        continue_timer=True)
        ])
       
    result=uut.reload(reload_command = "reload", dialog=dialog)
 
    if result:
        log.info('Reload successful -- Waiting 180 seconds for config sync')
        countDownTimer(180)
        return 1
    else:
        logger.info('Reload Failed')
        return 0



def getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port):
    
    result = {}

    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
    
    result['total_tx'] = tx_stat
    result['total_rx'] = rx_stat
    
    tx_brkup = {}
    rx_brkup = {}
    
    stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
    for i in stat_breakup:
        if i in sender_port:
            log.info('sender_port: The value of is : {0}'.format(i))
            tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
            tx_brkup[i] = tx
        if i in receiver_port:
            log.info('rcv_port: The value of is : {0}'.format(i))
            rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
            rx_brkup[i] = rx
    
    result['tx_breakup'] = tx_brkup
    result['rx_breakup'] = rx_brkup
    
    return result
        
    


def getTrafficStats(tg_hdl='', port_hdl='', mode=''):
    log.info('The value of tg_hdl is = %r', tg_hdl)
    log.info('The value of port_hdl is  = %r', port_hdl)
    log.info('The value of mode is  = %r', mode)
    if isinstance(port_hdl, list):
        for i in port_hdl:
            stat = tg_hdl.traffic_stats(port_handle=port_hdl, mode=mode)
    if isinstance(port_hdl, str):
        stat = tg_hdl.traffic_stats(port_handle=port_hdl, mode=mode)
    log.info('The value of stat is  = %r', stat)
    return(stat)
        
def startStopIgmpReports(tg_hdl='',action=''):
    log.info('The value of tg_hdl is = %r', tg_hdl)
    log.info('The value of action  is = %r', action)
    igmp_status = tg_hdl.test_control(action = action)
    return(igmp_status)  


def get_v4_mask_len(i):
    switcher={
            '24':256,
            '25':128,
            '26':64,
            '27':32,
            '28':15,
            '29':8,
            '30':4,
            '31':2,
            '32':1
             }
    return switcher.get(i,"Invalid Mask")


def get_v6_mask_len(i):
    switcher={
            '64':2**64,
            '65':2**65,
            '66':2**66,
            '67':2**67,
            '68':2**68,
            '69':2**69,
            '70':2**70,
            '71':2**71,
            '72':2**72
             }
    return switcher.get(i,"Invalid Mask")

def ipaddrgen(no_of_ip_address,start_ip,mask):
    log.info('''Inside ipaddrgen ()... Calling wiht parameters No_of_ip_address_to configure : {0}
               start_ip_address: {1}
               ip_mask : {2}
               '''.format(no_of_ip_address,start_ip,mask))
    ip_addr = []
    a = ipaddress.IPv4Address(start_ip)
    for i in range (0,no_of_ip_address):
        d = a.exploded
        ip_addr.append(d)
        res = get_v4_mask_len(str(mask))
        a = a + int(res)
    return(ip_addr)   

def ipv6addrgen(no_of_ip_address,start_ip,mask):
    log.info('''Inside ipv6addrgen ()... Calling wiht parameters No_of_ip_address_to configure : {0}
               start_ipv6_address: {1}
               ip_mask : {2}
               '''.format(no_of_ip_address,start_ip,mask))
    ipv6_addr = []
    a = ipaddress.IPv6Address(start_ip)
    for i in range (0,no_of_ip_address):
        d = a.exploded
        ipv6_addr.append(d)
        res = get_v6_mask_len(str(mask))
        a = a + int(res)
    return(ipv6_addr)   

                  
def generateVRFlist(start,no):
    vrf_name_list = []
    a = start.split('-')
    vni_no = int(a[-1])
    vrf_name = "-".join(str(x) for x in a[:-1])
    for i in range (0,no):   
        new_vni_no = vni_no + i
        v = vrf_name + '-' + str(new_vni_no)
        vrf_name_list.append(v)        
    return vrf_name_list  
       
def configureSVIs(hdl,dut,log,config_dict):
    
    cfg = 'feature interface-vlan \n'
    hdl.configure(cfg)
    ns = parseScaleSVIParams(log,config_dict)
    ip_addr_list = ipaddrgen(ns.l2_vni_svi,ns.l2_vni_svi_ip_start,ns.v4_mask_len)
    ipv6_addr_list = ipv6addrgen(ns.l2_vni_svi,ns.l2_vni_svi_ipv6_start,ns.v6_mask_len)
    k = 0
    l = 1
    vrf_count = int(ns.l2_vni_svi / ns.no_of_svi_per_vrf)
    vrf_name_list = generateVRFlist(ns.vrf_start_name,vrf_count)
    for i,j in enumerate(range(ns.l2_vni_svi_start,ns.l2_vni_svi_start+ns.l2_vni_svi)):
        log.info('The value of i and j are : {0} and {1}'.format(i,j))
        if(l<=vrf_count):
            cfg =  '''int vlan {0}
                      vrf member {1}
                      ip address {2}/{3}
                      ipv6 address {4}/{5}
                    '''.format(j,vrf_name_list[k],ip_addr_list[i],ns.v4_mask_len,ipv6_addr_list[i],ns.v6_mask_len)
            if not ns.shutdown:
                cfg += 'no shutdown \n'
            if ns.mtu:
                cfg += 'mtu {0} \n'.format(ns.mtu)
            if ns.anycast_gw:
                cfg += 'fabric forwarding mode anycast-gateway \n'
            if ns.pim_enable:
                cfg += 'ip pim sparse-mode \n'
            if ns.pim_neighbor_policy:
                cfg += 'ip pim neighbor-policy {0}\n'.format(ns.pim_neighbor_policy)   
        if(l == vrf_count):
            k = k + 1
            l = 0
        l = l + 1
        hdl.configure(cfg)
        
    for i,j in enumerate(range(ns.l3_vni_svi_start,ns.l3_vni_svi_start+ns.l3_vni_svi)):
        cfg = '''int vlan {0}
                 vrf member {1}
                 '''.format(j,vrf_name_list[i])
        if not ns.shutdown:
            cfg += 'no shutdown \n'
        if ns.pim_enable:
            cfg += 'ip pim sparse-mode \n'
        if ns.l3_vni_svi_ip_start:
            cfg += 'ip forward \n'
        if ns.l3_vni_svi_ipv6_start:
            cfg += 'ipv6 forward \n'
        if ns.mtu:
            cfg += 'mtu {0} \n'.format(ns.mtu)
        hdl.configure(cfg)
    return 1


def parseScaleSVIParams(log,args):
    log.info('Inside the parseScaleSVIParams function()')
    log.info('Inside parseScaleSVIParams.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['l2_vni_svi'] = '-type int'
    arggrammar['l2_vni_svi_start'] = '-type int'
    arggrammar['l3_vni_svi'] = '-type int'
    arggrammar['l3_vni_svi_start'] = '-type int'
    arggrammar['l2_vni_svi_ip_start'] = '-type str'
    arggrammar['v4_mask_len'] = '-type int'
    arggrammar['l2_vni_svi_ipv6_start'] = '-type str'
    arggrammar['v6_mask_len'] = '-type int'
    arggrammar['l3_vni_svi_ip_start'] = '-type str'
    arggrammar['l3_vni_svi_ipv6_start'] = '-type str'                
    arggrammar['mtu'] = '-type int'
    arggrammar['anycast_gw'] = '-type bool'
    arggrammar['pim_enable'] = '-type bool'
    arggrammar['pim_neighbor_policy'] = '-type str'
    arggrammar['no_of_svi_per_vrf'] = '-type int'
    arggrammar['shutdown'] = '-type bool -default no shut'
    arggrammar['vrf_start_name'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def configureLoopbacks(hdl,dut,log,config_dict,ospf_process):
    cfg = ''
    ns = parseScaleLoopbackParams(log,config_dict)
    ip_addr_list = ipaddrgen(ns.loopback_no,ns.loopback_ip_start,ns.loopback_mask)
    vrf_name_list = generateVRFlist(ns.vrf_start_name,ns.loopback_no)
    log.info('The value of ip_addr_list is : {0}'.format(ip_addr_list))
    for i,j in enumerate(range(ns.loopback_start,ns.loopback_start+ns.loopback_no)):
        if not ns.vrf_enable:
            cfg = ''' interface loopback {0}
                      ip address {1}/{2}
                  '''.format(j,ip_addr_list[i],ns.loopback_mask)
        if ns.vrf_enable:
            cfg = ''' interface loopback {0}
                      vrf member {1}
                      ip address {2}/{3}
                  '''.format(j,vrf_name_list[i],ip_addr_list[i],ns.loopback_mask)
        if ns.ospf_enable:
            cfg += 'ip router ospf {0} area 0 \n'.format(ospf_process)
        if ns.pim_enable:
            cfg += 'ip pim sparse-mode \n'  
        hdl.configure(cfg)
    return 1

def parseScaleLoopbackParams(log,args):
    log.info('Inside the parseScaleLoopbackParams function()')
    arggrammar = {}
    arggrammar['loopback_no'] = '-type int'
    arggrammar['loopback_start'] = '-type int'
    arggrammar['loopback_ip_start'] = '-type str'
    arggrammar['loopback_mask'] = '-type int'
    arggrammar['pim_enable'] = '-type bool'
    arggrammar['ospf_enable'] = '-type bool'
    arggrammar['vrf_enable'] = '-type bool'
    arggrammar['vrf_start_name'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def mychain(spans):
    for start, no , vni_start in spans:
        for count,i in enumerate(range( start, start+no)):
            cfg = ''
            vni = vni_start + count
            cfg = ''' vlan {0}
                      no vn-segment
                      vn-segment {1}
                  '''.format(i,vni)
            yield cfg
          
def configureVlans(hdl,dut,log,config_dict):
    
    ns = parseScaleVlanParms(log,config_dict)
    log.info('The value of ns here is : {0}'.format(ns))
    
    cfg = 'feature vn-segment-vlan-based \n'
    for i in mychain(((ns.l2_vlan_start,ns.no_of_l2_vlans,ns.l2_vni_start),(ns.l3_vlan_start,ns.no_of_l3_vlans,ns.l3_vni_start))):
        cfg = i
        cfg += 'exit \n'
        hdl.configure(cfg)
    return 1

            
def parseScaleVlanParms(log,args):
    """Method to configure config under vpc domain"""
    log.info('Inside the parseScaleVlanParms function()')
    arggrammar = {}
    arggrammar['no_of_l2_vlans'] = '-type int'
    arggrammar['l2_vlan_start'] = '-type int'
    arggrammar['l2_vni_start'] = '-type int'
    arggrammar['no_of_l3_vlans'] = '-type int'
    arggrammar['l3_vlan_start'] = '-type int'
    arggrammar['l3_vni_start'] = '-type int'
    arggrammar['l2_vlan_name'] = '-type str'
    arggrammar['l2_vlan_shutdown'] = '-type bool -default False'
    arggrammar['l3_vlan_name'] = '-type str'
    arggrammar['l3_vlan_shutdown'] = '-type bool -default False'
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def configureVRFs(hdl,dut,log,config_dict):
    cfg = ''
    vrf_name_list = []
    vrf_rp_addr_list= []
    vrf_group_list = []
    vrf_vni_list = []
    ns = parseScaleVRFParams(log,config_dict)
    log.info('The value of ns here is : {0}'.format(ns))
    if ns.vrf_no:
        a = ns.vrf_name_start.split('-')
        vni_no = int(a[-1])
        vrf_name = "-".join(str(x) for x in a[:-1])
        c = ipaddress.IPv4Address(ns.rp_addr_start)
        res = get_v4_mask_len(str(ns.rp_addr_mask))
        group = ns.mcast_group + '/' + str(ns.mcast_group_mask)
        for i in range(0,ns.vrf_no):
            new_vni_no = vni_no + i
            v = vrf_name + '-' + str(new_vni_no)
            vrf_name_list.append(v)
            vrf_rp_addr_list.append(c.exploded)
            c = c + res
            vrf_group_list.append(group)
            vrf_vni_list.append(new_vni_no)
    i = 0
    while (i<ns.vrf_no):
        if vrf_name_list:
            cfg = 'vrf context {0} \n'.format(vrf_name_list[i])
        if vrf_vni_list:
            cfg += 'vni {0} \n'.format(vrf_vni_list[i])
        if vrf_rp_addr_list:
            cfg += 'ip pim rp-address {0} group-list {1} \n'.format(vrf_rp_addr_list[i],vrf_group_list[i])
        if ns.rd:
            cfg += 'rd {0} \n'.format(ns.rd)
        if ns.add_v4_unicast:
            cfg += 'address-family ipv4 unicast \n'
        if ns.rt_both_ucast:
            cfg += 'route-target both auto \n'
        if ns.rt_both_evpn:
            cfg += 'route-target both auto evpn\n'
        if ns.rt_both_mvpn:
            cfg += 'route-target both auto mvpn \n'               

        hdl.configure(cfg)
        i = i + 1
    return 1
        
def parseScaleVRFParams(log,args):
    log.info('Inside the parseScaleVRFParams function()')
    log.info('Inside parseScaleVRFParams.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['vrf_no'] = '-type int'
    arggrammar['vrf_name_start'] = '-type str'
    arggrammar['rp_addr_start'] = '-type str'
    arggrammar['rp_addr_mask'] = '-type int'
    arggrammar['mcast_group'] = '-type str'
    arggrammar['mcast_group_mask'] = '-type int'
    arggrammar['vni'] = '-type bool '
    arggrammar['rd'] = '-type str'
    arggrammar['add_v4_unicast'] = '-type bool'
    arggrammar['rt_both_ucast'] = '-type str'
    arggrammar['rt_both_evpn'] = '-type str'
    arggrammar['rt_both_mvpn'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns
    
def parseScaleEVPNConfigs(log,args):
    log.info('Inside the parseScaleEVPNConfigs function()')
    log.info('Inside parseScaleEVPNConfigs.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['no_of_vnis'] = '-type int'
    arggrammar['l2_vni_start'] = '-type int'
    arggrammar['rd'] = '-type str'
    arggrammar['route_target_import_list'] = '-type str'
    arggrammar['route_target_export_list'] = '-type str' 
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def isEmpty(evpn_config_dict):
    for element in evpn_config_dict:
        if element:
            return True
        return False

def generateEvpnDict(log,config_dict):
    evpn_config_dict = {}
    for dut in config_dict:
        evpn_config_dict[dut] = {}
        args = config_dict[dut]['global']['evpn']
        ns = parseScaleEVPNConfigs(log,args)
        log.info('The value of ns is : {0}'.format(ns))
        for i in range(0,ns.no_of_vnis):
            if not isEmpty(evpn_config_dict[dut]):
                evpn_config_dict[dut]['vni'] = {}
            v = ns.l2_vni_start + i
            evpn_config_dict[dut]['vni'][v]={}
            evpn_config_dict[dut]['vni'][v]['layer']='l2'
            evpn_config_dict[dut]['vni'][v]['rd'] = ns.rd
            evpn_config_dict[dut]['vni'][v]['route_target_import_list'] = ns.route_target_import_list
            evpn_config_dict[dut]['vni'][v]['route_target_export_list'] =   ns.route_target_export_list
            a = " ".join(['-{} {}'.format(k, v) for k,v in evpn_config_dict[dut]['vni'][v].items()])
            evpn_config_dict[dut]['vni'][v] = a
        
    return evpn_config_dict


def parseNVEL2VNIConfigs(log,args):
    log.info('Inside the parseglobalVxlanConfigs function()')
    log.info('Inside parseglobalVxlanConfigs.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['mcast_group'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns 
 
def parseNVEL3VNIConfigs(log,args):
    log.info('Inside the parseNVEL3VNIConfigs function()')
    log.info('Inside parseNVEL3VNIConfigs.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['associate_vrf'] = '-type bool'
    arggrammar['mcast_group'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns 
    
def parseGlobalVxlanConfigs(log,args):
    log.info('Inside the parseglobalVxlanConfigs function()')
    log.info('Inside parseglobalVxlanConfigs.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['host_reachability'] = '-type str'
    arggrammar['source_interface'] = '-type str'
    arggrammar['src_intf_hold_down_time'] = '-type int'
    arggrammar['shutdown'] = '-type bool'
    arggrammar['anycast_gw_mac'] = '-type str'
    arggrammar['vxlan_igmp_snooping'] = '-type bool'
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns 

def parseNVEParams(logs,args):
    log.info('Inside the parseNVEParams function()')
    log.info('Inside parseNVEParams.. the value of args is : {0}'.format(args))
    arggrammar = {}
    arggrammar['no_of_l2_vni'] = '-type int'
    arggrammar['l2_vni_start'] = '-type int'
    arggrammar['underlay_mcast_group'] = '-type str'
    arggrammar['underlay_mcast_step'] = '-type str'
    arggrammar['no_of_vnis_per_mcast'] = '-type int'
    arggrammar['no_of_l3_vni'] = '-type int'
    arggrammar['l3_vni_start'] = '-type int'
    arggrammar['associate_vrf'] = '-type bool'
    arggrammar['overlay_mcast_group'] = '-type str'
    arggrammar['overlay_mcast_step'] = '-type str'
        
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns



def generateVxlanConfigDictL3Vni(no_of_l3_vni,l3_vni_start,overlay_mcast_group,overlay_mcast_step,associate_vrf):
    print('The value of overlay_mcast_group is : {0}'.format(overlay_mcast_group))
    VxlanConfigDictL3Vni = {}
    if(no_of_l3_vni>1):
        new_overlay_mcast_group = overlay_mcast_group
        for i in range(l3_vni_start,l3_vni_start+no_of_l3_vni):
            tmp = VxlanConfigDictL3Vni[i]={}
            tmp['associate_vrf'] = associate_vrf
            tmp['mcast_group'] = new_overlay_mcast_group
            b = ''
            for k, v in tmp.items():
                a = "".join("-{} {}".format(k,v))
                b = b + " " +  a
            VxlanConfigDictL3Vni[i] = b
            new_overlay_mcast_group = (ipaddress.ip_address(new_overlay_mcast_group) + int(ipaddress.ip_address(overlay_mcast_step))).exploded
            
        return VxlanConfigDictL3Vni

def generateVxlanConfigDictl2Vni(no_of_l2_vni,no_of_vnis_per_mcast,l2_vni_start,underlay_mcast_group,underlay_mcast_step):
    generateVxlanConfigDictl2Vni = {}
    if(no_of_l2_vni>1):
        new_underlay_mcast_group = underlay_mcast_group
        i = 1
        j = 1
        for i in range(i,no_of_l2_vni+1):
            if(j<=no_of_vnis_per_mcast):
                tmp = generateVxlanConfigDictl2Vni[l2_vni_start]={} 
                tmp['mcast_group']={}
                tmp['mcast_group'] = new_underlay_mcast_group
                for k, v in tmp.items():
                    a = "".join("-{} {}".format(k,v))
                    generateVxlanConfigDictl2Vni[l2_vni_start] = a
            else:
                print('Increment the mcast group value and the L2_vni_value is {0}'.format(l2_vni_start))
                a = ipaddress.ip_address(new_underlay_mcast_group) + int(ipaddress.ip_address(underlay_mcast_step))
                new_underlay_mcast_group = a.exploded
                tmp = generateVxlanConfigDictl2Vni[l2_vni_start]={}
                tmp['mcast_group']={}
                tmp['mcast_group'] = new_underlay_mcast_group 
                for k, v in tmp.items():
                    a = "".join("-{} {}".format(k,v))
                    generateVxlanConfigDictl2Vni[l2_vni_start] = a
                j=1
           
            j = j +1
            l2_vni_start = l2_vni_start+1    

    return generateVxlanConfigDictl2Vni

def generateVxlanConfigDict(log,config_dict):
    vxlan_config_dict = {}
    for dut in config_dict:
        vxlan_config_dict[dut] = {}
        for rp_types in config_dict[dut]:
            if re.search('global',rp_types):
                vxlan_config_dict[dut]['global'] = config_dict[dut]['global']['vxlan']
            if re.search('dist',rp_types):
                vxlan_config_dict[dut]['multicast_based_replication'] = {}
                ns = parseNVEParams(log,config_dict[dut][rp_types]['nve'])
                vxlan_config_dict[dut]['multicast_based_replication']['l2_vni'] = generateVxlanConfigDictl2Vni(ns.no_of_l2_vni,ns.no_of_vnis_per_mcast,ns.l2_vni_start,\
                                                                                                               ns.underlay_mcast_group,ns.underlay_mcast_step)
                vxlan_config_dict[dut]['multicast_based_replication']['l3_vni'] = generateVxlanConfigDictL3Vni(ns.no_of_l3_vni,ns.l3_vni_start,ns.overlay_mcast_group,\
                                                                                                               ns.overlay_mcast_step,ns.associate_vrf)
    return vxlan_config_dict


def configureVxlanParams(dut,hdl,config_dict,log):
    log.info('The value of config_dict inside configureVxlanParams is : {0}'.format(config_dict))
    cfg = ''

    args = config_dict['global']
    log.info('The value of args is : {0}'.format(args))
    ns = parseGlobalVxlanConfigs(log,args)

    if ns.anycast_gw_mac and ns.vxlan_igmp_snooping:
        cfg += ''' feature nv overlay
                   fabric forwarding anycast-gateway-mac {0} 
                   ip igmp snooping vxlan
                   interface nve 1
               '''.format(ns.anycast_gw_mac)
    if not ns.anycast_gw_mac:
        cfg += ''' feature nv overlay
                   interface nve 1
               '''.format(ns.anycast_gw_mac)
    if ns.host_reachability:
        cfg += 'host-reachability protocol {0} \n'.format(ns.host_reachability)
    if ns.source_interface:
        cfg += 'source-interface {0} \n'.format(ns.source_interface)
    if ns.src_intf_hold_down_time:
        cfg += 'source-interface hold-down-time {0} \n'.format(ns.src_intf_hold_down_time)
    if not ns.shutdown:
        cfg += 'no shutdown \n'
        
    if isEmpty(config_dict['multicast_based_replication']['l2_vni']):
        for k,v in config_dict['multicast_based_replication']['l2_vni'].items():
            ns = parseNVEL2VNIConfigs(log,v)
            cfg += 'member vni {0} mcast-group {1} \n'.format(k,ns.mcast_group)
            
    if isEmpty(config_dict['multicast_based_replication']['l3_vni']):
        for k,v in config_dict['multicast_based_replication']['l3_vni'].items():
            ns = parseNVEL3VNIConfigs(log,v)
            if ns.associate_vrf and ns.mcast_group:
                cfg += '''member vni {0} associate-vrf 
                      mcast-group {1} \n
                    '''.format(k,ns.mcast_group)    
    hdl.configure(cfg)
    

    return 1


def parseScaleTGParams(log,args):
    arggrammar = {}
    arggrammar['no_of_intf'] = '-type int'
    arggrammar['no_of_vlans'] = '-type int'
    arggrammar['vlan_start'] = '-type int'
    arggrammar['ip_addr_start'] = '-type str'
    arggrammar['netmask'] = '-type str'
    arggrammar['ip_addr_step'] = '-type str'
    arggrammar['ipv4_network_step'] = '-type str'
    arggrammar['gateway'] = '-type str'
    arggrammar['mode'] = '-type str'
    arggrammar['vlan'] = '-type int'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns


def generateTrafficGenIntfConfigs(log,args):
    intf_list = []
    count = 1
    ns = parseScaleTGParams(log,args)
    no_of_intf_per_vlan = ns.no_of_intf / ns.no_of_vlans
    print('The value of no_of_intf_per_vlan is : {0}'.format(no_of_intf_per_vlan))
    ip_addr = ipaddress.IPv4Address(ns.ip_addr_start)
    gw = ipaddress.IPv4Address(ns.gateway)
    v = ns.vlan_start
    ip_addr_step = '0.0.0.1'
    gw_addr_step = '0.0.0.0'
    vlan_step = 0
    for i in range(0,ns.no_of_intf):
        if(count <= int(no_of_intf_per_vlan)): 
            if(count == 1):
                a = "".join('-mode {0} -connected_count {1} -intf_ip_addr {2} -intf_ip_addr_step {3} -netmask {4} -gateway {5} -gateway_step {6} -vlan {7} -vlan_id {8} -vlan_id_step {9}'.format(ns.mode,int(no_of_intf_per_vlan),ip_addr,ip_addr_step,ns.netmask,gw,gw_addr_step,ns.vlan,v,vlan_step))
                intf_list.append(a)
            ip_addr = ipaddress.IPv4Address(ip_addr) + int(ipaddress.IPv4Address(ns.ip_addr_step))
            count = count+1
        if(count > no_of_intf_per_vlan):
            ns.ip_addr_start = ipaddress.IPv4Address(ns.ip_addr_start)+int(ipaddress.IPv4Address(ns.ipv4_network_step))
            ip_addr = ns.ip_addr_start
            gw = ipaddress.IPv4Address(gw) + int(ipaddress.IPv4Address(ns.ipv4_network_step))
            v = v + 1
            count = 1
            
    return intf_list

def parseIGMPConfigDict(log,args):
    arggrammar = {}
    arggrammar['no_of_groups'] = '-type int'
    arggrammar['ip_addr_start'] = '-type str'
    arggrammar['ip_addr_step'] = '-type str'
    arggrammar['igmp_version'] = '-type str'
    arggrammar['g_filter_mode'] = '-type str'
    arggrammar['source_pool_handle'] = '-type str'
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def generateIGMPGroupList(log,args):
    igmp_group_dict = {}
    igmp_group_list = []
    igmp_group_config = []
    igmp_v3_group_configs = {}
    ns = parseIGMPConfigDict(log,args)
    log.info('the value of ns is : {0}'.format(ns))
    new_ip_addr = ip_addr = ipaddress.IPv4Address(ns.ip_addr_start)
    count = 1
    mode = 'create'
    igmp_count = 1
    group_query = 1
    ip_router_alert = 1
    igmp_version = ns.igmp_version
    general_query = 1
    num_groups = 1
    ip_addr_step = ns.ip_addr_step
    for i in range(0,ns.no_of_groups):
        igmp_group_list.append(new_ip_addr.exploded)
        a = "".join('-mode {0} -count {1} -group_query {2} -ip_router_alert {3} -igmp_version {4} -general_query {5} -num_groups {6} -ip_addr_start {7} -ip_addr_step {8}'.format(mode,igmp_count,group_query,ip_router_alert,igmp_version,general_query,num_groups,new_ip_addr,ip_addr_step))
        igmp_group_config.append(a)
        new_ip_addr = ipaddress.IPv4Address(new_ip_addr) + int(ipaddress.IPv4Address(ns.ip_addr_step))
        if ns.g_filter_mode:
            igmp_v3_group_configs['g_filter_mode'] = ns.g_filter_mode
        if ns.source_pool_handle:
            igmp_v3_group_configs['source_pool_handle'] = ns.source_pool_handle
    igmp_group_dict['groups']=igmp_group_list
    igmp_group_dict['configs']=igmp_group_config
    igmp_group_dict['v3_configs'] = igmp_v3_group_configs
    return igmp_group_dict



def checkBGPMVPNNeighgorState(switch_hdl, *args):
    
    args = [x for x in args][0]
    log.info('The value of args is {0}'.format(args))
    if(args) == 'TRM':
        cfg = 'sh bgp ipv4 mvpn neighbors | egrep "BGP neighbor is|BGP state"'
        out = switch_hdl.execute(cfg)
    if (args) == 'EVPN':
        cfg = 'sh bgp l2vpn evpn neighbors |  egrep "BGP neighbor is|BGP state"'
        
    bgp_neighbor_state = {}
    
    pat1 = 'BGP\s+neighbor\s+is\s+(\d+\.\d+\.\d+\.\d+)'
    pat2 = 'BGP\s+state\s+=\s+(\S+)'
    
    for line in out.splitlines():
     
        match_obj1 = re.search(pat1,line,re.I)
      
        match_obj2 = re.search(pat2,line,re.I)
      
        if match_obj1:
           
            bgp_neighbor_state[match_obj1.group(1)]={}
            neighbor = match_obj1.group(1)

        if match_obj2:
          
            bgp_neighbor_state[neighbor]['status']=match_obj2.group(1)
        
    return(bgp_neighbor_state)


def checkNvePeers(switch_hdl):
    
    cfg = 'show nve peers'
    out = switch_hdl.execute(cfg)
    
    nve_peer_dict = {}
    
    #pat = '(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+)\s+(\S+)\s+(\d+\:\d+\:\d+)\s+(\S+)'
    pat = '(\S+)\s+(\d+\.\d+\.\d+\.\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)'
    for line in out.splitlines():
        match_obj1 = re.search(pat,line,re.I)
        log.info('The value of line is : {0}'.format(line))

        if match_obj1:
            log.info('The value of match_obj1 is : {0}'.format(match_obj1.group(0)))
            peer_ip = match_obj1.group(2)
            nve_peer_dict[peer_ip] = {}
            nve_peer_dict[peer_ip]['state']=match_obj1.group(3)
            nve_peer_dict[peer_ip]['learn_type']=match_obj1.group(4)
            nve_peer_dict[peer_ip]['uptime']=match_obj1.group(5)
            nve_peer_dict[peer_ip]['router-mac']=match_obj1.group(6)
    
    return(nve_peer_dict)
            

def verifyVNIStatus(switch_hdl):
    
    vni_status = {}

    vni_status['L2'] = {}
    vni_status['L3'] = {}
    cfg = 'show nve vni'
    out  = switch_hdl.execute(cfg)

    #pat='(\S+)\s+(\d+)\s+([\d+\.a-zA-Z\/]+)\s+(\S+)\s+(\S+)\s+(\S+)\s+\[(\S+)\]'
    pat='(\S+)\s+(\d+)\s+([\d+\.a-zA-Z\/]+)\s+(\S+)\s+(\S+)\s+(\S+)\s+\[(\S+)\]' 
    #pat = 'nve1\s+(\S+)\s+(\S+)\s+(\S+)'
    
    
    for line in out.splitlines():
        match_obj = re.search(pat,line,re.I)
        if match_obj:
            print(match_obj.group(0))
            if match_obj.group(6) =='L2':
                vni = match_obj.group(2)
                vni_status['L2'][vni] = {}
                vni_status['L2'][vni]['multicast-group'] = match_obj.group(3)
                vni_status['L2'][vni]['state'] = match_obj.group(4)
                vni_status['L2'][vni]['mode'] = match_obj.group(5)
                vni_status['L2'][vni]['vlan'] = match_obj.group(7)
            if match_obj.group(6) =='L3':
                vni = match_obj.group(2)
                vni_status['L3'][vni] = {}
                vni_status['L3'][vni]['multicast-group'] = match_obj.group(3)
                vni_status['L3'][vni]['state'] = match_obj.group(4)
                vni_status['L3'][vni]['mode'] = match_obj.group(5)
                vni_status['L3'][vni]['vrf'] = match_obj.group(7)
    return(vni_status)



def verifyAll(switch_hdls, bgp_config_dict):
                      
    log.info('The vale of switch_hdls is : {0}'.format(switch_hdls))
    result = {}
    pass_criteria = []
    l2_vni_status = {}
    l3_vni_status = {}
    
    for switches in switch_hdls.keys():
        result[switches]= {}
        log.info('The value of switches is : {0}'.format(switches))
        if switches == 'vtep':
            for vteps in switch_hdls[switches]:
                status_msg = ''
                result[switches][vteps] = {}
                result[switches][vteps]['msg'] = {}
                log.info('The value of vteps is : {0}'.format(vteps))
                vni_status = verifyVNIStatus(switch_hdls[switches][vteps])
        
                #Getting L2VNI STATUS:
                
                log.info('The value of vni_status is : {0}'.format(vni_status))
                
                l2_vni_flag = 1
                l2_vnis_down = []
                for i in vni_status['L2']:
                    result[switches][vteps]['L2_VNI'] = {}
                    l2_vni_status[i] = vni_status['L2'][i]['state']
                    if not l2_vni_status[i] == 'Up':
                        l2_vnis_down.append(i)
                        l2_vni_flag = 0
                    
                if not l2_vni_flag:
                    result[switches][vteps]['L2_VNI']['status'] = 0
                    status_msg += 'Following L2 VNIs are down {} \n'.format(l2_vnis_down)
                if l2_vni_flag:
                    status_msg  += 'L2 VNIs are up ' + '\n'
                    result[switches][vteps]['L2_VNI']['status'] = 1
                    
                result[switches][vteps]['msg'] = status_msg
    

                
                #Getting L3VNI STATUS
                l3_vni_flag = 1
                l3_vnis_down = []
                for i in vni_status['L3']:
                    result[switches][vteps]['L3_VNI'] = {}
                    l3_vni_status[i] = vni_status['L3'][i]['state']
                    if not l3_vni_status[i] == 'Up':
                        l3_vnis_down.append(i)
                        l3_vni_flag = 0
           
                if not l3_vni_flag:
                    status_msg += 'Some L3 VNIs are down {}\n'.format(l3_vnis_down)
                    result[switches][vteps]['L3_VNI']['status'] = 0
                if l3_vni_flag:
                    status_msg  += 'L3 VNIs are up ' + '\n'
                    result[switches][vteps]['L3_VNI']['status'] = 1
                
                result[switches][vteps]['msg'] = status_msg
    

                
                #Getting NVE PEER status
                
                nve_peer_status = checkNvePeers(switch_hdls[switches][vteps])
                
                log.info('The value of checkNvePeers is : {0}'.format(nve_peer_status))
                if nve_peer_status:
                    nve_peer_status_flag = 1
                    nve_peer_list_down =[]
                    for peers in nve_peer_status.keys():
                        if not nve_peer_status[peers]['state'] == 'Up':
                            nve_peer_status_flag = 0
                            nve_peer_list_down.append(peers)
                    
                    if not nve_peer_status_flag:
                        result[switches][vteps]['nve_peer'] = {}
                        status_msg +='The following NVE PEERS {} hasn\'t come up\n'.format(nve_peer_list_down)
                        result[switches][vteps]['nve_peer']['status'] = 0
                    if nve_peer_status_flag:
                        result[switches][vteps]['nve_peer'] = {}
                        status_msg  += 'NVE peers are up ' + '\n'
                        result[switches][vteps]['nve_peer']['status'] = 1
                        
                if not nve_peer_status:
                    result[switches][vteps]['nve_peer'] = {}
                    status_msg +='The NVE PEERS output is Null. Could not Proceeding with test case ..' + '\n'
                    result[switches][vteps]['nve_peer']['status'] = 0
                
                result[switches][vteps]['msg'] = status_msg
                        
                log.info('The value of result in after checking L2 and L3 VNI Status, and nve peers  is : {0}'.format(result))
        
        #Check BGP MVPN Peerings from SPINE
           
        if switches == 'spine':
            for spines in switch_hdls[switches].keys():
                status_msg = ''
                result[switches][spines] = {}
                result[switches][spines]['msg'] = {}
                dut= spines
                for key in bgp_config_dict[dut].keys():
                    as_no = key
                log.info('The value of dut is : %r', dut)
                log.info('The value of as_no is : %r', as_no)
                interest_neighbor = []
                for key in bgp_config_dict[dut][as_no]['default']['neighbors']['ipv4'].keys():
                    interest_neighbor.append(key)

                log.info('The value of interest_neighbor is : %r', interest_neighbor)
                bgp_mvpn_neighbor_status = checkBGPMVPNNeighgorState(switch_hdls[switches][spines], 'TRM')
                
                log.info('The vale of bgp_mvpn_neighbor_status is : {0}'.format(bgp_mvpn_neighbor_status))

                bgp_mvpn_neighbor_flag = 1
            
                bgp_mvpn_neighbor_down_list = []
                bgp_mvpn_neighbor_interest_list = interest_neighbor
            
                for interest_neighbor in bgp_mvpn_neighbor_interest_list:
                    print(interest_neighbor)
                    print(bgp_mvpn_neighbor_status[interest_neighbor]['status'])
                    if not bgp_mvpn_neighbor_status[interest_neighbor]['status'] == 'Established,':
                        bgp_mvpn_neighbor_down_list.append(interest_neighbor)
                        bgp_mvpn_neighbor_flag = 0
                if not bgp_mvpn_neighbor_flag:
                    result[switches][spines]['mvpn_neighbor'] = {}
                    status_msg +='The following BGP MVPN Neighbors {} hasn\'t come up\n'.format(bgp_mvpn_neighbor_down_list)
                    result[switches][spines]['mvpn_neighbor']['status'] = 0
                if bgp_mvpn_neighbor_flag:
                    result[switches][spines]['mvpn_neighbor'] = {}
                    status_msg +='The BGP MVPN Neighbors are fine.' + '\n'
                    result[switches][spines]['mvpn_neighbor']['status'] = 1
    
                result[switches][spines]['msg'] = status_msg
    
    
    log.info('The value of result is : {0}'.format(result))
    
    for dut in result:
        if dut == 'vtep':
            for k in result[dut]:
                l2_vni_status = result[dut][k]['L2_VNI']['status'] 
                l3_vni_status = result[dut][k]['L3_VNI']['status']
                nve_peer_status = result[dut][k]['nve_peer']['status']
                if (l2_vni_status and l3_vni_status and nve_peer_status):
                    pass_criteria.append(1)
                else:
                    pass_criteria.append(0)              
        if dut == 'spine':
            for k in result[dut]:
                if result[dut][k]['mvpn_neighbor']['status'] == 1:
                    pass_criteria.append(1)
                else:
                    pass_criteria.append(0)   
    
    if 0 not in pass_criteria:
        return 1
    else:
        msg = ''
        for dut in result:
            for k in result[dut]:
                msg += k  + ":" + result[dut][k]['msg']
        return msg               



def trafficTestBeforeStartOfTestCase(tgn_config_dict = '', testscript = '', port_handle_list = '', stream_id = '', threshold = '',igmp_action = '', traffic_action = '',test_type=''):
    log.info('The value of tgn_config_dict is = %r', tgn_config_dict)
    log.info('The value of testscript is = %r', testscript)
    log.info('The value of port_handle_list is = %r', port_handle_list)
    log.info('The value of stream_id is = %r', stream_id)
    log.info('The value of threshold is = %r', threshold)
    log.info('The value of igmp_action is = %r', igmp_action)
    log.info('The value of traffic_action is = %r', traffic_action)
    log.info('The value of test_type is = %r', test_type)
    
    sender_port = ['1/1/10']
    receiver_port = ['1/1/2','1/1/4','1/1/5','1/1/7']
    #log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict))
    pass_criteria = {}
    status = []
    status_msg =""
    #traffic_pkt_count = {}
    
    for TG in tgn_config_dict.keys():
        log.info('The value of TG is = %r', TG)
        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
        #tgn_hdl = testbed_obj.devices(TG)
    if not test_type == 'stop':
        
        igmp_status = startStopIgmpReports(tgn_hdl, action=igmp_action)
    
        if igmp_status['status'] == 1:
            status.append(igmp_status['status'])
            status_msg = status_msg + 'IGMP Groups was sent successfully \n'
            traffic_status = tgn_hdl.traffic_control(action=traffic_action,port_handle = sender_port)
            log.info('The value of traffic_status is : {0}'.format(traffic_status))
            countDownTimer(10)
            #traffic_status = startStopIxNetworkTraffic(tgn_hdl, action=traffic_action)
            if traffic_status['status'] == 1:
                status.append(traffic_status['status'])
                status_msg = status_msg + 'Traffic was started successfully \n'
                traffic_pkt_count = getTrafficStats(tgn_hdl,sender_port,mode='streams')
                log.info('The value of traffic_pkt_count is = %r', traffic_pkt_count)
                total_tx_pkt = 0
                total_rx_pkt = 0
                for x in traffic_pkt_count:
                    log.info('The value of x is {0}'.format(x))
                    if(re.search('1/1',x)):
                        if x in sender_port:
                            tx_pkt = traffic_pkt_count[x]['stream'][stream_id]['tx']['total_pkt_rate']
                            total_tx_pkt +=tx_pkt
                        if x in receiver_port:
                            rx_pkt = traffic_pkt_count[x]['stream'][stream_id]['rx']['total_pkt_rate']
                            total_rx_pkt += rx_pkt
                
                expected_rx_pkt = len(receiver_port)*total_tx_pkt 
                log.info('The value of total_rx_pkt is : {0}'.format(total_rx_pkt))
                pass_pkt = expected_rx_pkt*((100-threshold)/100)
                log.info('The value of pass_pkt is : {0}'.format(pass_pkt))
                 
                if not total_rx_pkt > pass_pkt:
                    status.append(0)
                    status_msg = status_msg + 'Traffic condition did not pass before the start of the test \n'
                else:
                    status.append(1)
                    status_msg = status_msg + 'Traffic condition Also passed before the start of the test \n'
            else:
                status.append(0)
                status_msg = status_msg + 'Traffic could not be started .. Exiting \n'
        else:
            status.append(0)
            status_msg = status_msg + 'IGMP Group could not be started .. Exiting .. \n'
#  
#     else:
#         igmp_action = 'stop_all_protocols'
#         traffic_action = 'stop'
#         igmp_status = startStopIgmpReports(tgn_hdl, action=igmp_action)
#          
#         if igmp_status['status'] == 1:
#             status.append(igmp_status['status'])
#             status_msg = status_msg + 'IGMP Groups was stopped successfully \n'
#             traffic_status = tgn_hdl.traffic_control(action=traffic_action,port_handle = port_handle_list[1])
#             if traffic_status['status'] == 1:
#                 status.append(traffic_status['status'])
#                 status_msg = status_msg + 'Traffic was stopped successfully \n'
#             else:
#                 status.append(0)
#                 status_msg = status_msg + 'Traffic could not be stopped \n'
#         else:
#             status.append(0)
#             status_msg = status_msg + 'IGMP Reports could not be stopped \n'
#          
    pass_criteria['status'] = status
    pass_criteria['status_msg'] = status_msg
     
    return(pass_criteria)


def parseChangeVlanStateTrigger(log,args):
    arggrammar = {}
    arggrammar['no_of_vlans_to_shut'] = '-type int'
    arggrammar['vlan_start'] = '-type int'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def parseModifyVNIMapping(log,args):
    arggrammar = {}
    arggrammar['no_of_vlans_to_modify'] = '-type int'
    arggrammar['vlan_start'] = '-type int'
    arggrammar['vni_start'] = '-type int'
    arggrammar['l2_vni_rd'] = '-type str'
    arggrammar['l2_vni_rt_import'] = '-type str'
    arggrammar['l2_vni_rt_export'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def parseModifyL2VNIMcastMapping(log,args):
    arggrammar = {}
    arggrammar['no_of_vlans_to_modify'] = '-type int'
    arggrammar['vlan_start'] = '-type int'
    arggrammar['new_mcast_group'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns    

def getNveCounterDict(log,switch_hdl):
    cfg = 'show interface nve 1'

    str1 = switch_hdl.execute(cfg)

    log.info('The value of str1 is : %r', str1)
    nveCounterDict = {}

    pat1 = "nve1\s+is\s+([a-z][A-Z]+)"
    pat2 = "admin\s+state\s+is\s+([a-z][A-Z]+),"
    pat3 = 'TX\r\n\s+ucast\:\s+(\d+)\s+pkts,\s+(\d+)\s+bytes\s+-\s+mcast\:\s+(\d+)\s+pkts,\s+(\d+)\s+bytes'
    pat4 = 'RX\r\n\s+ucast\:\s+(\d+)\s+pkts,\s+(\d+)\s+bytes\s+-\s+mcast\:\s+(\d+)\s+pkts,\s+(\d+)\s+bytes\r\n'
    for line in str1.splitlines():
        nve_status = re.search(pat1,str1,re.I)
        nve_admin_status = re.search(pat2,str1,re.I)
        tx_pkt_count = re.search(pat3, str1, re.I)
        rx_pkt_count = re.search(pat4, str1, re.I)
        if nve_status:
            nveCounterDict['state'] = nve_status.group(1)
        if nve_admin_status:
            nveCounterDict['admin_state'] = nve_admin_status.group(1)
        if tx_pkt_count:
            nveCounterDict['TX']={}
            nveCounterDict['TX']['ucast_pkt'] = tx_pkt_count.group(1)
            nveCounterDict['TX']['ucast_byte'] = tx_pkt_count.group(2)
            nveCounterDict['TX']['mcast_pkt'] = tx_pkt_count.group(3)
            nveCounterDict['TX']['mcast_byte'] = tx_pkt_count.group(4)
        if rx_pkt_count:
            nveCounterDict['RX']={}
            nveCounterDict['RX']['ucast_pkt'] = rx_pkt_count.group(1)
            nveCounterDict['RX']['ucast_byte'] = rx_pkt_count.group(2)
            nveCounterDict['RX']['mcast_pkt'] = rx_pkt_count.group(3)
            nveCounterDict['RX']['mcast_byte'] = rx_pkt_count.group(4)

    return nveCounterDict

def verifyProcessRestart(dut, p_name):
    
    log.info('Inside verifyProcessRestart .....')
#     unicon_state = unicon.statemachine.statemachine.State(name='enable', pattern=r'^.*|%N#')
#     unicon_state.add_state_pattern(pattern_list = "r'bash-*$'")
    
    dut.configure("feature bash-shell")
    dut.configure('system no hap-reset')
    
    # Get the PID of the process before killing it
    pid_data = dut.execute("show system internal sysmgr service name " + str(p_name) + " | i i PID")
    pid_regex = re.search("PID = (\\d+)",pid_data,re.I)
    if pid_regex is not 0:
        pid = pid_regex.group(1)
    
    # Kill the process in bash prompt
    dut.execute("run bash", allow_state_change = "True")
    dut.execute("sudo su", allow_state_change = "True")
    dut.execute("kill -9 "+str(pid), allow_state_change = "True")
    dut.execute("exit", allow_state_change = "True")
    dut.execute("exit", allow_state_change = "True")
    
#     unicon_state.restore_state_pattern()
#     unicon_state = ""
    
    countDownTimer(30)
    
    # Get the PID of the process after killing it
    post_kill_pid_data = dut.execute("show system internal sysmgr service name " + str(p_name) + " | i i PID")
    post_kill_pid_regex = re.search("PID = (\\d+)",post_kill_pid_data,re.I)
    if post_kill_pid_regex is not 0:
        post_kill_pid = post_kill_pid_regex.group(1)
    
    # Check if pre-kill PID and post-kill PID are different
    if pid != post_kill_pid:
        return 1
    else:
        return 0


def verifyProcessRestartWithFlushRoutes(dut, p_name,**kwargs):
    
    log.info('Inside verifyProcessRestart wtih Flush Route .....')
#     unicon_state = unicon.statemachine.statemachine.State(name='enable', pattern=r'^.*|%N#')
#     unicon_state.add_state_pattern(pattern_list = "r'bash-*$'")
    
    dut.configure("feature bash-shell")
    dut.configure('system no hap-reset')
    
    if kwargs:
        process_id = kwargs['process_id']
    # Get the PID of the process before restarting it
    pid_data = dut.execute("show system internal sysmgr service name " + str(p_name) + " | i i PID")
    pid_regex = re.search("PID = (\\d+)",pid_data,re.I)
    if pid_regex is not 0:
        pid = pid_regex.group(1)
    
    if p_name == 'ospf' and kwargs:
        cfg = ''' router {0} {1}
                  flush-routes
              '''.format(p_name,process_id)
        dut.configure(cfg)
        dut.configure('restart {0} {1}'.format(p_name,process_id))
    if p_name == 'igmp':
        dut.configure('ip igmp flush-routes')
        dut.configure('restart {0}'.format(p_name))
    if p_name == 'pim':
        dut.configure('ip pim flush-routes')
        dut.configure('restart {0}'.format(p_name))
    if p_name == 'bgp' and kwargs:
        cfg = ''' router {0} {1}
                  flush-routes
              '''.format(p_name,process_id)
        dut.configure(cfg)
        dut.configure('restart {0} {1}'.format(p_name,process_id))
    if p_name == 'ngmvpn':
        dut.configure('restart {0}'.format(p_name))

    countDownTimer(30)
    # Get the PID of the process after restarting it
    post_kill_pid_data = dut.execute("show system internal sysmgr service name " + str(p_name) + " | i i PID")
    post_kill_pid_regex = re.search("PID = (\\d+)",post_kill_pid_data,re.I)
    if post_kill_pid_regex is not 0:
        post_kill_pid = post_kill_pid_regex.group(1)

    # Check if pre-kill PID and post-kill PID are different
    if pid != post_kill_pid:
        return 1
    else:
        return 0
    
def parseLoopbackInPSourceIpChange(log,args):
    arggrammar = {}
    arggrammar['id'] = '-type int'
    arggrammar['ip_addr'] = '-type str'
    arggrammar['ip_addr_sec'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

def parseOSPFInPSourceIpChange(log,args):
    arggrammar = {}
    arggrammar['process'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns        

def parsePimInPSourceIpChange(log,args):
    arggrammar = {}
    arggrammar['state'] = '-type str'
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns


#port-channel101: -member_list Ethernet1/3 -mode "no switchport" -ip_addr 107.1.1.1/24 -ipv6_addr 107:1:1::1/64 -ospf_process vxlan -ospf_hello 1 -ospf_dead 4 -pim_state True

def parseModifyUplinkPortChannel(log,args):
    arggrammar = {}
    arggrammar['member_list'] = '-type str'
    arggrammar['mode'] = '-type str'
    arggrammar['ip_addr'] = '-type str'
    arggrammar['ipv6_addr'] = '-type str'
    arggrammar['ospf_process'] = '-type str'
    arggrammar['ospf_hello'] = '-type int'
    arggrammar['ospf_dead'] = '-type int'
    arggrammar['pim_state'] = '-type bool'
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

#vlan101: -member_list Ethernet1/3 -mode switchport -switchportmode trunk -allowed_vlan_list 101 -ip_addr 107.1.1.1/24 -ipv6_addr 107:1:1::1/64 -ospf_process vxlan -ospf_hello 1 -ospf_dead 4 -pim_state True
def parseModifyUplinkSVI(log,args):
    arggrammar = {}
    arggrammar['member_list'] = '-type str'
    arggrammar['switchportmode'] = '-type str'
    arggrammar['mode'] = '-type str'
    arggrammar['allowed_vlan_list'] = '-type int'
    arggrammar['ip_addr'] = '-type str'
    arggrammar['ipv6_addr'] = '-type str'
    arggrammar['ospf_process'] = '-type str'
    arggrammar['ospf_hello'] = '-type int'
    arggrammar['ospf_dead'] = '-type int'
    arggrammar['pim_state'] = '-type bool'
    
    ns = utils.parserutils_lib.argsToCommandOptions(args,arggrammar,log)
    return ns

    
class CommonSetup(aetest.CommonSetup):
    

    '''
    Setup :
        **********

    '''

    uid = 'common_setup'
    @aetest.subsection
    def initialize_logging(self, testscript):
        """ Common setup section to initialize logging for script"""

        log = logging.getLogger(__name__)
        log.setLevel(logging.DEBUG)
        testscript.parameters['log'] = log


    @aetest.subsection
    def check_topology(self, testbed, testscript,log,traffic_threshold='', tgn_connect = '', **kwargs):
        """ common setup subsection: connecting devices """

        testscript.parameters['traffic_threshold'] = traffic_threshold
        testscript.parameters['tgn_connect'] = tgn_connect
 
        log.info(banner('The value of kwargs is : {0}'.format(kwargs)))
        testscript.parameters['config_interface'] = kwargs['config_interface']
        testscript.parameters['config_ospf'] = kwargs['config_ospf']
        testscript.parameters['config_ospfv3'] = kwargs['config_ospfv3']
        testscript.parameters['config_bgp'] = kwargs['config_bgp']
        testscript.parameters['config_vpc'] = kwargs['config_vpc']
        testscript.parameters['config_pim'] = kwargs['config_pim']
        testscript.parameters['config_vxlan_global'] = kwargs['config_vxlan_global']
        testscript.parameters['config_bgp_global'] = kwargs['config_bgp_global']
        testscript.parameters['config_vlan'] = kwargs['config_vlan']
        testscript.parameters['config_vrf'] = kwargs['config_vrf']
        testscript.parameters['config_svi'] = kwargs['config_svi']
        testscript.parameters['config_evpn'] = kwargs['config_evpn']
        testscript.parameters['config_nve_global'] = kwargs['config_nve_global'] 
        testscript.parameters['config_nve_l2vni'] = kwargs['config_nve_l2vni']
        testscript.parameters['config_nve_l3vni'] = kwargs['config_nve_l3vni']
        testscript.parameters['config_sub_intf'] = kwargs['config_sub_intf']
        testscript.parameters['config_loopback_intf'] = kwargs['config_loopback_intf']
        testscript.parameters['config_tgn_conn'] = kwargs['config_tgn_conn']
        testscript.parameters['config_tgn_interface'] = kwargs['config_tgn_interface']
                                         
        parser = argparse.ArgumentParser()
        parser.add_argument('--config-file',dest='config_file',type=str)
        args = parser.parse_args()
        config_file = args.config_file
        fp = open(config_file)
        configdict=yaml.load(fp)
        fp.close()        
        fail_result=0
        log.info('Getting testbed objects from the testbed file')
        testbed_obj = testbed

        # Way to get password and login from Testbed file
        passw = testbed_obj.passwords['tacacs']
        login = testbed_obj.tacacs['username']

        log.info(banner('The Devices in Testbed File are : \n {0}'.format("\n".join(list(testbed_obj.devices.keys())))))

        duts = list(filter(lambda x: 'TG' not in x, list(testbed_obj.devices.aliases)))
        TGs = list(filter(lambda x: 'uut' not in x , list (testbed_obj.devices.aliases)))

        log.info('{0} are the available duts in the testbed'.format(duts))
        log.info('{0} are the available TGs in the testbed'.format(TGs))   
                
        duts.sort()
        TGs.sort()

        # As per Testbed File following links are present.
        
        alias_intf_mapping = {}
        for dut in list(testbed_obj.devices.keys()):
            a = testbed_obj.devices[dut].alias
            log.info(banner('the value of a is : {0}'.format(a)))
            alias_intf_mapping[a] = {}
            if 'ixia' not in dut:
                log.info(banner('DUT is {0}'.format(dut)))
            else:
                log.info(banner('TRAFFIC GENERATOR is: {0}'.format(dut)))
            intf = [x for x in testbed_obj.devices[dut].interfaces.keys()]
            alias = [testbed_obj.devices[dut].interfaces[x].alias for x in testbed_obj.devices[dut].interfaces.keys()]
            res = list(zip(intf,alias))
            alias_intf_mapping.update(dict(zip(alias,intf)))
            alias_intf_mapping[a].update(dict(zip(alias,intf)))
            alias_intf_mapping.setdefault('all_intf',{})
            alias_intf_mapping['all_intf'].update(dict(zip(alias,intf)))
            log.info(banner('The interfaces and alias are \n {0}'.format("\n".join(["->".join(x) for x in res]))))
            
            
        log.info('The value of alias_intf_mapping is {0}'.format(yaml.dump(alias_intf_mapping)))

        # Way to take variable to other section
        testscript.parameters['testbed_obj'] = testbed_obj
        testscript.parameters['configdict'] = configdict
        testscript.parameters['fail_result'] = fail_result
        testscript.parameters['alias_intf_mapping'] = alias_intf_mapping
       
    @aetest.subsection
    def configBringUp(self,testscript,log,steps):
        
        testbed_obj = testscript.parameters['testbed_obj']

        # DUTs required to test this feature 
        dutList_config_file = list(testscript.parameters['configdict']['dut'].keys())
        log.info('{0} are the duts required for EVPN tests'.format(dutList_config_file))
        
        # TGNs required for this CFD
        TGList_config_file = list(testscript.parameters['configdict']['TG'].keys())
        log.info('{0} are the TGNs required for EVPN tests'.format(TGList_config_file))
        
        # Create obj for each node from config file
        dutList_obj_config_file = []
        for dut_config_file in dutList_config_file:
            dutList_obj_config_file.append(testscript.parameters['testbed_obj'].devices[dut_config_file])
            
        # declaring vtep list
        node_dict = {}
        
        for node in list(testbed_obj.devices.keys()):
            log.info('The Value of node is : {0}'.format(node))
            log.info('The value of node.type is : {0}'.format(testbed_obj.devices[node].type))
            if re.search('VPC',testbed_obj.devices[node].type):
                node_dict.setdefault('vpc_vteps',{})
                node_dict.setdefault('all_vteps',{})
                node_dict['vpc_vteps'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
                node_dict['all_vteps'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('STAND',testbed_obj.devices[node].type):
                node_dict.setdefault('stand_vteps',{})
                node_dict.setdefault('all_vteps',{})
                node_dict['stand_vteps'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
                node_dict['all_vteps'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('SPINE',testbed_obj.devices[node].type):
                node_dict.setdefault('spines',{})
                node_dict['spines'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('L2',testbed_obj.devices[node].type):
                node_dict.setdefault('l2_switch',{})
                node_dict['l2_switch'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('EXTERNAL',testbed_obj.devices[node].type):
                node_dict.setdefault('external_rp',{})
                node_dict['external_rp'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('CORE',testbed_obj.devices[node].type):
                node_dict.setdefault('core',{})
                node_dict['core'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            elif re.search('ixia',testbed_obj.devices[node].type):
                node_dict.setdefault('trf_gen',{})
                node_dict['trf_gen'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]
            node_dict.setdefault('all_dut',{})
            node_dict['all_dut'][testbed_obj.devices[node].alias] = testbed_obj.devices[node]

        log.info(banner('Value of Node dict is : {0}'.format(node_dict)))  
                
        for dut in node_dict['all_dut']:
            if not re.search(r'TG',dut,re.I):
                node_dict['all_dut'][dut].connect(via='vty')
        
        testscript.parameters['node_dict'] = node_dict
        testscript.parameters['TGList'] = TGList_config_file
                            
    @aetest.subsection
    def configureInterfaces(self,testscript,log):
        
        config_interface = testscript.parameters['config_interface']
        
        if config_interface:
            #interface config dict 
            config_dict = testscript.parameters['configdict']
            node_dict = testscript.parameters['node_dict']
            testbed_obj = testscript.parameters['testbed_obj']
            
            intf_config_dict = testscript.parameters['configdict']['interface_config_dict']
    
            log.info(banner('The value of interface_config_dict is {0} '.format(intf_config_dict)))
            
            log.info(banner('The value of node_dict is {0} '.format(node_dict)))
            
            intf_obj = config_bringup_test.configSetup(config_dict,testbed_obj,log)
            
            if not intf_obj:
                self.failed()
        else:
            pass
        
    @aetest.subsection
    def configureUnderlayOSPF(self,testscript,log):

        config_ospf = testscript.parameters['config_ospf']
        if config_ospf:
            #ospf_config_dict
            ospf_config_dict = testscript.parameters['configdict']['ospfv2_config_dict']
            node_dict = testscript.parameters['node_dict']
            
            obj_ospf=ospfv2_lib.configOspfv2(node_dict['all_dut'],ospf_config_dict,log)
            
            if not obj_ospf:
                self.failed()
        else:
            pass

    @aetest.subsection
    def configureUnderlayOSPFv3(self,testscript,log):
        
        config_ospfv3 = testscript.parameters['config_ospfv3']
        
        if config_ospfv3:
            #ospf_config_dict
            ospfv3_config_dict = testscript.parameters['configdict']['ospfv3_config_dict']
            node_dict = testscript.parameters['node_dict']
            
            obj_ospf=ospfv3_lib.configOspfv3(node_dict['all_dut'],ospfv3_config_dict,log)
            
            if not obj_ospf:
                self.failed()
        else:
            pass
            
            
    @aetest.subsection       
    def configureBGPNeighbors(self,testscript,log):

        config_bgp = testscript.parameters['config_bgp']
        
        if config_bgp:
        
            #BGP_config_dict 
            bgp_config_dict = testscript.parameters['configdict']['bgp_config_dict']
    
            node_dict = testscript.parameters['node_dict']
            
            for dut in bgp_config_dict.keys():
                obj_bgp=bgp_lib.configBgp(bgp_config_dict,node_dict['all_dut'],log)
                if not obj_bgp.Nodes(dut):
                    self.failed()
        else:
            pass
        
    @aetest.subsection       
    def configureVPCSwitches(self,testscript,log):
        
        config_vpc = testscript.parameters['config_vpc']
        
        if config_vpc:
            node_dict = testscript.parameters['node_dict']
            config_dict = testscript.parameters['configdict']
            
            for dut in node_dict['vpc_vteps'].keys():
                hdl = node_dict['vpc_vteps'][dut]
                d = config_bringup.setupConfigVpc(hdl,dut,log,config_dict)
        else:
            pass
        
    @aetest.subsection       
    def configurePIMNeighbors(self,testscript,log):

        config_pim = testscript.parameters['config_pim']
        
        if config_pim:
            intf_config_dict = testscript.parameters['configdict']['interface_config_dict']
      
            pim_config_dict = testscript.parameters['configdict']['pim_config_dict']
    
            node_dict = testscript.parameters['node_dict']
            
            for dut in pim_config_dict.keys():
                obj_pim = pim_lib.configPim(intf_config_dict,pim_config_dict,node_dict['all_dut'],log,'-dut {0}'.format(dut))
                
            if  obj_pim.result=='fail':
                self.failed()
        else:
            pass
        
    @aetest.subsection                     
    def configureGlobalVxlan(self,testscript,log):    
        
        config_vxlan_global = testscript.parameters['config_vxlan_global']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_vxlan_global:
            #SCALE_Config_dict
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
            
            log.info(banner('The value of vtep_dict is {0}'.format(vtep_dict)))
    
            res = scale_config_obj.configureGlobalVxlanParams(vtep_dict)
            
            if not res:
                self.failed()
        else:
            pass
        
    @aetest.subsection                     
    def configureGlobalBGP(self,testscript,log):    
        
        config_bgp_global = testscript.parameters['config_bgp_global']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_bgp_global:
            #SCALE_Config_dict
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')

            log.info(banner('The value of vtep_dict is {0}'.format(vtep_dict)))
            
            res = scale_config_obj.configureGlobalBGPParams(vtep_dict)
            if not res:
                self.failed()
        else:
            pass
        
    @aetest.subsection       
    def configureScaleVlan(self,testscript,log):
        
        config_vlan = testscript.parameters['config_vlan']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_vlan:
            #SCALE_Config_dict
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            device_dict = {}
            for dut in ['all_vtep','core','l2_switch']:
                device_dict.update(scale_config_obj.getDeviceDict(dut))

            log.info(banner('The value of device_dict_dict is : {0}'.format(device_dict)))
            
            res = scale_config_obj.configScaleVlans(device_dict)
    
            if not res:
                self.failed()
        else:
            pass
        
    @aetest.subsection  
    def configureScaleVRF(self,testscript,log):
        
        config_vrf = testscript.parameters['config_vrf']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_vrf:
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            device_dict = {}
            for dut in ['all_vtep','external_rp','core']:
                device_dict.update(scale_config_obj.getDeviceDict(dut))

            log.info(banner('The value of device_dict_dict is : {0}'.format(device_dict)))
            
            res = scale_config_obj.configScaleVRFs(device_dict)
            
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection       
    def configureScaleSVI(self,testscript,log):     
        
        config_svi = testscript.parameters['config_svi']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_svi:
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            device_dict = {}
            for dut in ['all_vtep','core']:
#             for dut in ['core']:
                device_dict.update(scale_config_obj.getDeviceDict(dut))

            log.info(banner('The value of device_dict_dict is : {0}'.format(device_dict)))
            
            res = scale_config_obj.configScaleSVIs(device_dict)
            
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection                     
    def configureScaleEvpn(self,testscript,log):  
        
        config_evpn = testscript.parameters['config_evpn']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
                
        if config_evpn:
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
            log.info(banner('The value of vtep_dict is : {0}'.format(vtep_dict)))
    
            res = scale_config_obj.configScaleEVPN(vtep_dict)
            
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection                     
    def configureNveInterfaceGlobals(self,testscript,log):  
        
        config_nve_global = testscript.parameters['config_nve_global']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']        
        
        if config_nve_global:
            
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
            log.info(banner('The value of vtep_dict is : {0}'.format(vtep_dict)))
    
            res = scale_config_obj.configureNveGlobal(vtep_dict)
            
            if not res:
                self.failed()
        else:
            pass
        
    @aetest.subsection                     
    def configureL2VNIOnNveInterface(self,testscript,log):     
        
        config_nve_l2vni = testscript.parameters['config_nve_l2vni']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']  
        alias_intf_mapping = testscript.parameters['alias_intf_mapping'] 
        
        if config_nve_l2vni:
        
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
            log.info(banner('The value of vtep_dict is : {0}'.format(vtep_dict)))
    
            res = scale_config_obj.configureL2VNIOnNve(vtep_dict)
            
            if not res:
                self.failed()
        else:
            pass
        
    @aetest.subsection                     
    def configureL3VNIOnNveInterface(self,testscript,log):     
        
        config_nve_l3vni = testscript.parameters['config_nve_l3vni']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping'] 
        
        if config_nve_l3vni:
        
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
            log.info(banner('The value of vtep_dict is : {0}'.format(vtep_dict)))
    
            res = scale_config_obj.configureL3VNIOnNve(vtep_dict)
            
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection                     
    def configureSubInterfaces(self,testscript,log):     
        
        config_sub_intf = testscript.parameters['config_sub_intf']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_sub_intf:
        
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            device_dict = {}
            for dut in ['stand_vtep','external_rp','core']:
                device_dict.update(scale_config_obj.getDeviceDict(dut))

            log.info(banner('The value of device_dict_dict is : {0}'.format(device_dict)))
    
            res = scale_config_obj.configureL3SubInterface(device_dict)
             
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection                     
    def configureLoopbackInterfaces(self,testscript,log):     
        
        config_loopback_intf = testscript.parameters['config_loopback_intf']
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        if config_loopback_intf:
        
            scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
            external_rp_dict = scale_config_obj.getDeviceDict('external_rp')

            log.info(banner('The value of external_rp_dict is : {0}'.format(external_rp_dict)))
    
            res = scale_config_obj.configureLoopbackInterface(external_rp_dict)
             
            if not res:
                self.failed()
        else:
            pass

    @aetest.subsection                     
    def connectionToTrafficGenerator(self,testscript,log): 
        
        # Connect and confiure TG
 
        log.info('Connecting and configuring TG as per config dict...')
        # Get physical interface from logical interface of config file for TG
         
        config_dict = testscript.parameters['configdict']
        testbed_obj = testscript.parameters['testbed_obj']
 
        TGList_config_file = testscript.parameters['TGList']
        ix_port_list = []
        ix_port_list_alias = []
        tgn_port_dut_mapping={}
        for TG in TGList_config_file:
            d = testscript.parameters['testbed_obj'].devices[TG]
            log.info('The value of d is : {0}'.format(d))
            TGIntList = testscript.parameters['configdict']['TG'][TG]['global']['ports'].keys()
            for port in TGIntList:
                a = d.interfaces[port].alias
                b = re.search('(uut[\d]+)',a)
                if b:
                    dut = b.group(1)
                    tgn_port_dut_mapping[dut] = port
            
            
            for TGInt in TGIntList:
                log.info('The value of TGint is : {0}'.format(TGInt))
                ix_port_list.append(d.interfaces[TGInt].name)
                ix_port_list_alias.append(d.interfaces[TGInt].alias)
                # Connect to TG
            ix_port_list.sort(key=lambda x: '{0:0>8}'.format(x).lower())
            log.info('The value of ix_port_list is : {0}'.format(ix_port_list))
            log.info('The value of ix_port_list_alias is : {0}'.format(ix_port_list_alias))
            ixia_connect = connectToIxNetwork(self, tg_hdl = d, port_list = ix_port_list)
                 
            # Get port handles
            port_handle_list = []
            for port_handle in ixia_connect['vport_list'].split():
                port_handle_list.append(port_handle)
             
            port_handle_list.sort(key=lambda x: '{0:0>8}'.format(x).lower())
             
            port_handle_dict = dict(zip(ix_port_list,port_handle_list))
            log.info("Port handles are {0}".format(port_handle_list))
            log.info('The Value of port_handle_dict is: {0}'.format(port_handle_dict))
            testscript.parameters['port_handle_dict'] = port_handle_dict
            log.info('The value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            testscript.parameters['tgn_port_dut_mapping'] = tgn_port_dut_mapping
                
    @aetest.subsection      
    def configuringInterfacesOnTrafficGenerator(self,testscript,log):
        
        config_tgn_interface = testscript.parameters['config_tgn_interface']

        if config_tgn_interface:
            tg_interface_hdl_dict = {}
            port_handle_dict = testscript.parameters['port_handle_dict']
     
                #interface_handle_list = []
            TGList_config_file = testscript.parameters['TGList']
            for TG in TGList_config_file:
                tg_interface_hdl_dict[TG] = {}
                d = testscript.parameters['testbed_obj'].devices[TG]
                skip_traffic_items = testscript.parameters['configdict']['TG'][TG]['skip_traffic_items']
                log.info('Type of skip_traffic_items is : {0}'.format(type(skip_traffic_items)))
                if skip_traffic_items:
                    traffic_item_skip_list = expandTrafficItemList(testscript.parameters['configdict']['TG'][TG]['skip_traffic_items'])
                    log.info('The value of traffic_item_skip_list is : {0}'.format(traffic_item_skip_list))
                else:
                    traffic_item_skip_list = ''
                log.info('The value of traffic_item_skip_list is : {0}'.format(traffic_item_skip_list))       
                configured_stream  = []
                skipped_stream = []     
                for trf_stream in testscript.parameters['configdict']['TG'][TG]:
                    if(re.search('TRF',trf_stream)):
                        if trf_stream not in traffic_item_skip_list:
                            configured_stream.append(trf_stream)
                            tg_interface_hdl_dict[TG][trf_stream] = {}
                            TGIntList = testscript.parameters['configdict']['TG'][TG][trf_stream]['tg_interface_config_dict'].keys()
                            for TGInt in TGIntList:
                                log.info('The value of TGInt is : {0}'.format(TGInt))
                                ixia_intf_ip_list=[]
                                tg_interface_hdl_dict[TG][trf_stream][TGInt] = {}
                                intf_args = generateTrafficGenIntfConfigs(log,testscript.parameters['configdict']['TG'][TG][trf_stream]['tg_interface_config_dict'][TGInt]) 
                                log.info('The value of intf_args is : {0}'.format(intf_args))
                                for j,k  in enumerate(intf_args):
                                    a = intf_args[j]
                                    ixia_interface_config = configureMultiIxNetworkInterface(self,a,tg_hdl=d,port_handle=port_handle_dict[TGInt])
                                    log.info('the value of ixia_interface_config is : {0}'.format(ixia_interface_config))
                                    for b in ixia_interface_config:
                                        ixia_intf_ip_list.append(b)
                                        tg_interface_hdl_dict[TG][trf_stream][TGInt][b]={}
                                        tg_interface_hdl_dict[TG][trf_stream][TGInt][b]['handle']=ixia_interface_config[b]
                                    tg_interface_hdl_dict[TG][trf_stream][TGInt]['ip_list']=ixia_intf_ip_list
                        else:
                            skipped_stream.append(trf_stream)

                    elif(re.search('RAW',trf_stream)):
                        if trf_stream not in traffic_item_skip_list:
                            configured_stream.append(trf_stream)
                        else:
                            skipped_stream.append(trf_stream)
            
            log.info(banner('The following traffic stream  %s is skipped from configuring ... ' % skipped_stream))
                        
            c = yaml.dump(tg_interface_hdl_dict)
            log.info('The value of c is : {0}'.format(c))
            testscript.parameters['tg_interface_hdl_dict'] = tg_interface_hdl_dict
            testscript.parameters['configured_stream'] = configured_stream
            log.info(banner('The value of configured_stream is : {0}'.format(configured_stream)))


    @aetest.subsection                     
    def verifyConfiguationsBeforeStartOfTest(self,testscript,log,steps):
#         '''
        config_dict = testscript.parameters['configdict']
        node_dict = testscript.parameters['node_dict']
        alias_intf_mapping = testscript.parameters['alias_intf_mapping']
        
        scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
        vtep_dict = scale_config_obj.getDeviceDict('all_vtep')
                
        verify_obj = MyLib.my_config_utils.VerifyConfigs(log,config_dict,node_dict,alias_intf_mapping)
        
        with steps.start('Verify OSPFv2 Neighborship on all duts') as s:
            log.info('Verifying the OSPFv2 Neighborship on all duts ......')
            res = verify_obj.verifyOSPFv4Neighorship()
            if not res:
                self.failed()

#         with steps.start('Verify OSPFv3 Neighborship on all duts') as s:
#             log.info('Verifying the OSPFv3 Neighborship on all duts ......')
#             res = verify_obj.verifyOSPFv6Neighorship()
#             if not res:
#                 self.failed()

        with steps.start('Verify BGP L2EVPN Neighborship on all duts') as s:
            log.info('Verify BGP L2EVPN Neighborship on all duts ......')
            res = verify_obj.verifyBGPL2EVPNNeighbor()
            if not res:
                self.failed()

        with steps.start('Verify BGP mVPN Neighborship on all duts') as s:
            log.info('Verify BGP mVPN Neighborship on all duts ......')
            res = verify_obj.verifyBGPL2MVPNNeighbor()
            if not res:
                self.failed()
                        
        with steps.start('Verify L2 and L3 VNI Status on all VTEPS') as s:
            log.info('Verifying L2 and L3 VNI status on all VTEPs ......')
            res = verify_obj.verifyVNIStatus(vtep_dict)
            if not res:
                self.failed()

        with steps.start('Verify Nve Peers in VTEPs') as s:
            log.info('Verify Nve Peers in VTEPs ......')
            res = verify_obj.verifyNVEStatus(vtep_dict)
            if not res:
                self.failed()  
        
        log.info(banner('Waiting for 30 seconds before Configuring the Traffic ... {0}'.format(countDownTimer(30))))
#         '''       
        
    @aetest.subsection 
    def configureIGMPReports(self,testscript,log):
        
#         '''
        TGList_config_file = testscript.parameters['TGList']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict']
        config_dict = testscript.parameters['configdict']
        configured_stream = testscript.parameters['configured_stream'] 
        
        log.info(banner('The value of traffic_interface_handle_dict is : {0}'.format(yaml.dump(tg_interface_hdl_dict))))

        for TG in TGList_config_file:
            d = testscript.parameters['testbed_obj'].devices[TG]
            for trf_stream in configured_stream:
                if(re.search('TRF',trf_stream)):
                    log.info('The value of trf_stream is : {0}'.format(trf_stream))
                    TGIgmpIntList = list(config_dict['TG'][TG][trf_stream]['igmp_config_dict'].keys())
                    for TGIgmpInt in TGIgmpIntList:
                        e = d.interfaces[TGIgmpInt].tgen_port_handle
                        igmp_group_dict = MyLib.my_config_utils.generateIGMPGroupList(log,config_dict['TG'][TG][trf_stream]['igmp_config_dict'][TGIgmpInt])
                        log.info('the value of igmp_group_dict is : {0}'.format(igmp_group_dict))
                        ip_list = tg_interface_hdl_dict[TG][trf_stream][TGIgmpInt]['ip_list']
                        group_list = igmp_group_dict['groups']
                        group_config = igmp_group_dict['configs']
                        for i,ip in enumerate(ip_list):
                            tg_interface_hdl_dict[TG][trf_stream][TGIgmpInt][ip]['group'] = group_list[i]
                            if igmp_group_dict['v3_configs']:
                                emulation_igmp_group_cfg = configureIgmpReports(self, group_config[i], tg_hdl=d, port_handle = e, intf_handle=tg_interface_hdl_dict[TG][trf_stream][TGIgmpInt][ip]['handle'],
                                                                                g_filter_mode=igmp_group_dict['v3_configs']['g_filter_mode'],source_pool_handle=igmp_group_dict['v3_configs']['source_pool_handle'])
                            else:
                                emulation_igmp_group_cfg = configureIgmpReports(self, group_config[i], tg_hdl=d, port_handle = e, intf_handle=tg_interface_hdl_dict[TG][trf_stream][TGIgmpInt][ip]['handle'])
                            tg_interface_hdl_dict[TG][trf_stream][TGIgmpInt][ip]['session_handle'] = emulation_igmp_group_cfg.handle
              
        a = yaml.dump(tg_interface_hdl_dict)
        log.info('the value of tg_interface_hdl_dict is : {0}'.format(a)) 
#         '''
#         pass 
    @aetest.subsection     
    def configureTrafficStreams(self,testscript,log):
        
#         '''
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        log.info('the value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict))
        configured_stream = testscript.parameters['configured_stream']
        
        log.info(banner('The value of configured_stream is : {0}'.format(configured_stream)))
        port_handle_dict = testscript.parameters['port_handle_dict']
        log.info('the value of port_handle_dict is : {0}'.format(port_handle_dict))
         
        TGList_config_file = testscript.parameters['TGList']
         
        traffic_stream_dict = {}
        for TG in TGList_config_file:
            d = testscript.parameters['testbed_obj'].devices[TG]
            for trf_stream in testscript.parameters['configdict']['TG'][TG]:
                log.info(banner('The value of trf_stream is : {0}'.format(trf_stream)))
                if(re.search('TRF',trf_stream)):
                    if trf_stream in configured_stream:
                        TGIgmpIntList = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict'].keys()
                        src_handle = []
                        dest_handle = []
                        traffic_stream_dict[trf_stream] = {}
                        source_port = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['source']
                        receiver_port = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['receivers']
                        traffic_args=testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['params']
                        if isinstance(source_port, list):
                            for i in source_port:
                                log.info('src: The value of i is : {0}'.format(i))
                                for port in tg_interface_hdl_dict[TG][trf_stream]:
                                    log.info('src: The value of port is : {0}'.format(port))
                                    if(port == i):
                                        pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                                        for ip in tg_interface_hdl_dict[TG][trf_stream][port]:
                                            test=pat.match(ip)
                                            if test:
                                                log.info('src: The value of i is : {0}'.format(i))
                                                log.info('src: The value of port is : {0}'.format(port))
                                                log.info('src: The value of ip is : {0}'.format(ip))
                                                log.info('src: The value of trf_stream is : {0}'.format(trf_stream))
                                                handle = tg_interface_hdl_dict[TG][trf_stream][port][ip]['handle']
                                                src_handle.append(handle)
                     
                        if isinstance(receiver_port,list):
                            for i in receiver_port:
                                log.info('rcv:The value of i is : {0}'.format(i))
                                for port in tg_interface_hdl_dict[TG][trf_stream]:
                                    log.info('rcv: The value of port is : {0}'.format(port))
                                    if(port == i):
                                        pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                                        for ip in tg_interface_hdl_dict[TG][trf_stream][port]:
                                            test=pat.match(ip)
                                            if test:
                                                log.info('rcv: The value of i is : {0}'.format(i))
                                                log.info('rcv: The value of port is : {0}'.format(port))
                                                log.info('rcv: The value of ip is : {0}'.format(ip))
                                                log.info('rcv: The value of trf_stream is : {0}'.format(trf_stream))
                                                handle = tg_interface_hdl_dict[TG][trf_stream][port][ip]['session_handle']
                                                dest_handle.append(handle)
                        traffic_stream_dict[trf_stream]['source'] = source_port
                        traffic_stream_dict[trf_stream]['destination'] = receiver_port
                     
                        log.info('The value of src_handle is : {0}'.format(src_handle))
                        log.info('The value of dest_handle is : {0}'.format(dest_handle))
                         
                        ixia_traffic_config = configureIxNetworkTraffic(self, traffic_args, tg_hdl=d, emulation_src_handle=src_handle, emulation_dst_handle=dest_handle)
                        log.info('The value of ixia_traffic_config is : {0}'.format(ixia_traffic_config))
                    
                        traffic_stream_dict[trf_stream]['stream_id'] = ixia_traffic_config.stream_id
                        traffic_stream_dict[trf_stream]['traffic_item'] = ixia_traffic_config.traffic_item
                        traffic_stream_dict[trf_stream]['status'] = ixia_traffic_config.status
                        
                elif(re.search('RAW',trf_stream)):
                    log.info(banner('Inside RAW Stream Configuration : '))
                    if trf_stream in configured_stream:
                        TGIgmpIntList = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict'].keys()
                        traffic_stream_dict[trf_stream] = {}
                        source_port = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['source']
                        receiver_port = testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['receivers']
                        traffic_args=testscript.parameters['configdict']['TG'][TG][trf_stream]['traffic_config_dict']['params']

                        traffic_stream_dict[trf_stream]['source'] = source_port
                        traffic_stream_dict[trf_stream]['destination'] = receiver_port
                         
                        src_port = [port_handle_dict[x] for x in source_port]
                        dst_port = [port_handle_dict[x] for x in receiver_port]
                        log.info('The value of src_port is : {0}'.format(src_port))
                        log.info('The value of dst_port is : {0}'.format(dst_port))
                        
                        ixia_traffic_config = configureIxNetworkRawTrafficL2(self, traffic_args, tg_hdl=d, emulation_src_handle=src_port, emulation_dst_handle=dst_port)
                        log.info('The value of ixia_traffic_config is : {0}'.format(ixia_traffic_config))
                    
                        traffic_stream_dict[trf_stream]['stream_id'] = ixia_traffic_config.stream_id
                        traffic_stream_dict[trf_stream]['traffic_item'] = ixia_traffic_config.traffic_item
                        traffic_stream_dict[trf_stream]['status'] = ixia_traffic_config.status
                    
 
        log.info('The value of traffic_stream_dict is : {0}'.format(traffic_stream_dict))
        testscript.parameters['traffic_stream_dict']  = traffic_stream_dict 
        

    @aetest.subsection     
    def sendIGMPReports(self,testscript,log):  
        
#         '''
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
        TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        
        for TG in tgn_config_dict.keys():
            log.info('The value of TG is = %r', TG)
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
        
            igmp_status = startStopIgmpReports(tgn_hdl, action='start_all_protocols')
        
            if not igmp_status:
                log.info('IGMP Groups have not been sent successfully .. . Pls debug ')
#         '''
#         pass    
    
    
#     @aetest.subsection     
#     def startAllTrafficStreams(self,testscript,log):  
#    
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
#         traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
#         configdict = testscript.parameters['configdict'] 
#         tgn_config_dict = configdict['TG']
#         threshold = testscript.parameters['traffic_threshold'] 
#         
#         log.info(banner('The value of traffic_stream_dict is : {0}'.format(traffic_stream_dict)))
#            
#         unstarted_stream = []
#         for TG in tgn_config_dict.keys():
#             log.info('The value of TG is = %r', TG)
#             tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
#             flag = 1
#             failed_traffic_stream_stats = {}
#             for trf_stream in traffic_stream_dict:
#                 if traffic_stream_dict[trf_stream]['status']:
#                     stream_handle = traffic_stream_dict[trf_stream]['traffic_item']
#                     x = tgn_hdl.traffic_control(action='run', handle = stream_handle, max_wait_timer=60)
#                     stream_id = traffic_stream_dict[trf_stream]['stream_id']
#                     if not x.status:
#                         log.error(banner('The Stream {0} could not be started as expected '.format(stream_id)))
#                         unstarted_stream.append(stream_id)
#                         
#         if unstarted_stream:
#             log.error(banner('The Following Streams could not be started..{0}'.format(unstarted_stream)))
#             self.failed()


#========================================================================================================================

    @aetest.subsection     
    def startAllTrafficStreams(self,testscript,log):  
        
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
        TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold'] 
          
        for TG in tgn_config_dict.keys():
            log.info('The value of TG is = %r', TG)
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            flag = 1
            failed_traffic_stream_stats = {}
            for trf_stream in traffic_stream_dict:
                if traffic_stream_dict[trf_stream]['status']:
                    stream_handle = traffic_stream_dict[trf_stream]['traffic_item']
                    x = tgn_hdl.traffic_control(action='run', handle = stream_handle)
                    log.info('The Value of x is : {0}'.format(x))
                    if not x.status:
                        self.failed()
                    
                    stream_id =  traffic_stream_dict[trf_stream]['stream_id'] 
                    source = traffic_stream_dict[trf_stream]['source']
                    receiver = traffic_stream_dict[trf_stream]['destination']
                    sender_port = []
                    receiver_port = []
                    if isinstance(source, list):
                        for i in  source:
                            sender_port.append(port_handle_dict[i])
                    if isinstance(receiver, list):
                        for i in receiver:
                            receiver_port.append(port_handle_dict[i])
                    log.info('The value of source Port is : {0}'.format(sender_port))
                    log.info('The value of rcv Port is : {0}'.format(receiver_port))
                    countDownTimer(20)
                    stats = tgn_hdl.traffic_stats(stream = stream_id, mode = 'traffic_item')
                    log.info('the value of stats is : {0}'.format(stats))
                    tx_stat = stats.traffic_item[stream_id]['tx'].total_pkt_rate
                    log.info('The value of tx_stat is: {0}'.format(tx_stat))
                    rx_stat = stats.traffic_item[stream_id]['rx'].total_pkt_rate
                    log.info('The value of rx_stat is: {0}'.format(rx_stat))
                    if abs(rx_stat-tx_stat) <=threshold:
                        log.info('The traffic test on stream {0} is pass as expected ...'.format(trf_stream))
                    else:
                        log.info('The traffic pass criteria on stream {0} does not mactch as  expected ...'.format(trf_stream))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_id, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_id]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_id]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        flag = 0
                        failed_traffic_stream_stats[trf_stream] = {}
                        failed_traffic_stream_stats[trf_stream]['tx'] = total_tx
                        failed_traffic_stream_stats[trf_stream]['rx'] = total_rx
            if flag:
                log.info('Traffic test on all streams are okay !!!')
                return 1
            if not flag:
                log.info('Pass Criteria on some streams did not pass. !!!')
                self.failed()
                return failed_traffic_stream_stats
            
# ======================================================================================================================#            

# 
#     
#     @aetest.subsection     
#     def checkAllTrafficStreamsStats(self,testscript,log):  
#    
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
#         traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
#         configdict = testscript.parameters['configdict'] 
#         tgn_config_dict = configdict['TG']
#         threshold = testscript.parameters['traffic_threshold']
#         node_dict = testscript.parameters['node_dict']
#         alias_intf_mapping = testscript.parameters['alias_intf_mapping']
#         configured_stream = testscript.parameters['configured_stream']
#         
#         log.info(banner('The value of traffic_stream_dict is : {0}'.format(traffic_stream_dict)))
#         
#         failed_stream_list = []
#         for TG in tgn_config_dict.keys():
#             log.info('The value of TG is = %r', TG)
#             tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
#             for trf_stream in traffic_stream_dict:
#                 if traffic_stream_dict[trf_stream]['status']:
#                     stream_handle = traffic_stream_dict[trf_stream]['traffic_item']
#                     x = tgn_hdl.traffic_control(action='clear_stats', handle = stream_handle, max_wait_timer=60)
#                     stream_id = traffic_stream_dict[trf_stream]['stream_id']
#                     countDownTimer(10)
#                     y = tgn_hdl.traffic_stats(stream=stream_id,mode='traffic_item')
#                     log.info(banner('The value of y is : {0}'.format(y)))
#                     for i in y['traffic_item']:
#                         if i == stream_id:
#                             loss_percent= y['traffic_item'][i]['rx']['loss_percent']
#                             log.info(banner('The value of loss_percent is : {0}'.format(loss_percent)))
#                             if loss_percent > 1.0:
#                                 failed_stream_list.append(trf_stream)
#             
#             log.info(banner('Traffic Stream Details and Breakup is'))
#             
#             traffic_obj = MyLib.my_config_utils.TrafficStatistics(log,tg_interface_hdl_dict,traffic_stream_dict,port_handle_dict,
#                                                               threshold,node_dict,alias_intf_mapping,configured_stream)
#             
#             traffic_obj.getAllBoundStreamStatistics(tgn_hdl)
# #            traffic_obj.getAllRawStreamStatistics(tgn_hdl)
#         
#             if failed_stream_list:
#                 log.error(banner('The Initial Traffic Pass Criteria is not met for the following streams..{0}'.format(failed_stream_list)))
#                 failed_stream_dict = {}
#                 for stream in failed_stream_list:
#                     failed_stream_dict[stream] = MyLib.my_config_utils.getTrafficItemStatistics(log,tgn_hdl,traffic_stream_dict,stream)
#                 log.info('the value of failed_stream_dict is : {0}'.format(failed_stream_dict))
#                 MyLib.my_config_utils.drawTrafficTable(log,failed_stream_dict,traffic_stream_dict)
#                 self.failed()


    # @aetest.subsection     
    # def initializeFewThingsForTest(self,testscript,log):
    #     tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict']
    #     traffic_stream_dict = testscript.parameters['traffic_stream_dict']
    #     port_handle_dict = testscript.parameters['port_handle_dict']
    #     threshold = testscript.parameters['traffic_threshold']
    #     node_dict = testscript.parameters['node_dict']
    #     alias_intf_mapping = testscript.parameters['alias_intf_mapping']
    #     configured_stream = testscript.parameters['configured_stream']
    #     config_dict = testscript.parameters['configdict']
    # 
    #     traffic_obj = MyLib.my_config_utils.TrafficStatistics(log,tg_interface_hdl_dict,traffic_stream_dict,port_handle_dict,
    #                                                    threshold,node_dict,alias_intf_mapping,configured_stream)
    #     testscript.parameters['traffic_obj'] = traffic_obj
    #     
    #     traffic_config_obj = MyLib.my_config_utils.TrafficConfiguration(log,testscript,config_dict,port_handle_dict)
    #     
    #     testscript.parameters['traffic_config_obj'] = traffic_config_obj
    #     
    #     scale_config_obj = MyLib.my_config_utils.ScaleConfig(log,node_dict,config_dict,alias_intf_mapping)
    #     
    #     testscript.parameters['scale_config_obj'] = scale_config_obj
    #     
    #     multicast_trigger_obj = MyLib.my_trigger_utils.MulticastTrigger(log,node_dict,config_dict,alias_intf_mapping)
    #     
    #     testscript.parameters['multicast_trigger_obj'] = multicast_trigger_obj
    #     
    #     trigger_obj = MyLib.my_utils.TriggerItems(log,node_dict,config_dict,traffic_stream_dict,port_handle_dict,threshold,alias_intf_mapping,configured_stream)
    #     testscript.parameters['trigger_obj'] = trigger_obj
               
class VXLANL3TRMFUNC002(aetest.Testcase):

    """ External RP - Internal Source / Internal Receiver - NO VPC - Across BL """

    uid = 'VXLAN-L3-TRM-FUNC-002'

    @aetest.test
    def externalRPInternalSourceInternalReceiver(self,log,testscript,testbed):
#        standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#        port_handle_dict = testscript.parameters['port_handle_dict']
#        TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#        spine_dict = testscript.parameters['spine_dict']  
#        vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#        all_tg_dict = testscript.parameters['all_tg_dict'] 
#        all_dut_dict = testscript.parameters['all_dut_dict'] 
#        l2_switch_dict = testscript.parameters['l2_switch_dict']
#        vtep_dict = testscript.parameters['vtep_dict']
#        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF011'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()     

        
class VXLANL3TRMFUNC003(aetest.Testcase):

    """ External RP - Internal Source / External Receiver """

    uid = 'VXLAN-L3-TRM-FUNC-003'

    @aetest.test
    def externalRPInternalSourceExternalReceiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF012'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()     
      
class VXLANL3TRMFUNC004(aetest.Testcase):

    """ External RP - Internal Source / Receiver on BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-004'

    @aetest.test
    def externalRPInternalSourceBL1Receiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF013'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()     
 
class VXLANL3TRMFUNC005(aetest.Testcase):

    """ External RP - Internal Source / Receiver on BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-005'

    @aetest.test
    def externalRPInternalSourceBL2Receiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF014'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()          

class VXLANL3TRMFUNC006(aetest.Testcase):

    """ External RP - Internal Source / Receiver on BL-1 and BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-006'

    @aetest.test
    def externalRPInternalSourceBL1AndBL2Receiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF015'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()          

class VXLANL3TRMFUNC007(aetest.Testcase):

    """ External RP - Internal Source / Internal Receiver and Receiver on BL-1 and BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-007'

    @aetest.test
    def externalRPInternalSourceInternalReceiverAndBL1AndBL2Receiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']


        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF016'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()  
                
class VXLANL3TRMFUNC008(aetest.Testcase):

    """ External RP - Internal Source / Internal Receiver and External Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-008'

    @aetest.test
    def externalRPInternalSourceInternalAndExternalReceiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF017'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()  

class VXLANL3TRMFUNC009(aetest.Testcase):

    """ External RP - Internal Source / External + BL Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-009'

    @aetest.test
    def externalRPInternalSourceExternalAndBLReceiver(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF018'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()  
                
class VXLANL3TRMFUNC010(aetest.Testcase):

    """ External RP - Internal Source / Internal RX, External + BL Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-010'

    @aetest.test
    def externalRPInternalSourceInternalRxExternalAndBLRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF019'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()  

class VXLANL3TRMFUNC011(aetest.Testcase):

    """ External RP - Internal Source / Internal RX - VPC - NO BL"""

    uid = 'VXLAN-L3-TRM-FUNC-011'

    @aetest.test
    def externalRPInternalSourceInternalReceiverNoBL(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF020'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 

class VXLANL3TRMFUNC012(aetest.Testcase):

    """ External RP - Internal Source / External + Internal RX - VPC - NO BL"""

    uid = 'VXLAN-L3-TRM-FUNC-012'

    @aetest.test
    def externalRPInternalSourceInternalRxExternalRxNoBL(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF021'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 

class VXLANL3TRMFUNC013(aetest.Testcase):

    """ External RP - Internal Source / Internal RX - VPC - BL"""

    uid = 'VXLAN-L3-TRM-FUNC-013'

    @aetest.test
    def externalRPInternalSourceInternalRxBLRxNoExtRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF022'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 
                
class VXLANL3TRMFUNC014(aetest.Testcase):

    """ External RP - Internal Source / Internal RX,Ext Rx 1BL Rx"""

    uid = 'VXLAN-L3-TRM-FUNC-014'

    @aetest.test
    def externalRPInternalSourceInternalRxExtRxBL1Rx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF023'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 
                
class VXLANL3TRMFUNC015(aetest.Testcase):

    """ External RP - External Source / Internal RX"""

    uid = 'VXLAN-L3-TRM-FUNC-015'

    @aetest.test
    def externalRPExternalSourceInternalRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF024'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 

class VXLANL3TRMFUNC016(aetest.Testcase):

    """ External RP - External Source /  BL-1 Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-016'

    @aetest.test
    def externalRPExternalSourceBL1Rx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF025'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed() 

class VXLANL3TRMFUNC017(aetest.Testcase):

    """ External RP - External Source /  BL-2 Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-017'

    @aetest.test
    def externalRPExternalSourceBL2Rx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF026'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()

class VXLANL3TRMFUNC018(aetest.Testcase):

    """ External RP - External Source /  BL-1 & BL-2 Receiver"""

    uid = 'VXLAN-L3-TRM-FUNC-018'

    @aetest.test
    def externalRPExternalSourceBL2Rx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF027'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()                                

class VXLANL3TRMFUNC019(aetest.Testcase):

    """ External RP - External Source /  Int Rx, BL-Rx"""

    uid = 'VXLAN-L3-TRM-FUNC-019'

    @aetest.test
    def externalRPExternalSourceInternalRxBLsRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF028'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()

class VXLANL3TRMFUNC020(aetest.Testcase):

    """ External RP - External Source /  Int Rx - NO BLs"""

    uid = 'VXLAN-L3-TRM-FUNC-020'

    @aetest.test
    def externalRPExternalSourceInternalRxNoBLs(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF029'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()
                
class VXLANL3TRMFUNC021(aetest.Testcase):

    """ External RP - External Source /  Int Rx - Ext RX"""

    uid = 'VXLAN-L3-TRM-FUNC-021'

    @aetest.test
    def externalRPExternalSourceInternalAndExternalRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF030'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()

class VXLANL3TRMFUNC022(aetest.Testcase):

    """ External RP - External Source /  Int Rx - Ext RX"""

    uid = 'VXLAN-L3-TRM-FUNC-022'

    @aetest.test
    def externalRPExternalSourceAndExternalRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF031'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()

class VXLANL3TRMFUNC023(aetest.Testcase):

    """ External RP - External Source /  Ext RX and BL Rx"""

    uid = 'VXLAN-L3-TRM-FUNC-023'

    @aetest.test
    def externalRPExternalSourceExternalRxAndBLRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF032'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()


class VXLANL3TRMFUNC024(aetest.Testcase):

    """ External RP - External Source /  Int Rx, BL Rx Ext RX """

    uid = 'VXLAN-L3-TRM-FUNC-024'

    @aetest.test
    def externalRPExternalSourceInternalRxExternalRxAndBLRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF033'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()
 

class VXLANL3TRMFUNC025(aetest.Testcase):

    """ External RP - External Source /  Ext Rx, Int Rx NO BL """

    uid = 'VXLAN-L3-TRM-FUNC-025'

    @aetest.test
    def externalRPExternalSourceInternalRxExternalRxAndNoBL(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']

        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF034'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()

class VXLANL3TRMFUNC026(aetest.Testcase):

    """ External RP - Internal Source External Source /  Int Rx Only """

    uid = 'VXLAN-L3-TRM-FUNC-026'

    @aetest.test
    def externalRPExternalSourceInternalSourceInternalRxOnly(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF035'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()                                

class VXLANL3TRMFUNC027(aetest.Testcase):

    """ External RP - Internal Source External Source /  Ext Rx, Int Rx """

    uid = 'VXLAN-L3-TRM-FUNC-027'

    @aetest.test
    def externalRPExternalSourceInternalSourceInternalRxExternalRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF036'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()             

class VXLANL3TRMFUNC028(aetest.Testcase):

    """ External RP - Internal Source External Source /  Rx Everywhere """

    uid = 'VXLAN-L3-TRM-FUNC-028'

    @aetest.test
    def externalRPExternalSourceInternalSourceRxEverywhere(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF037'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()             
                
class VXLANL3TRMFUNC029(aetest.Testcase):

    """ External RP - Internal Source External Source /  Rx on only BL """

    uid = 'VXLAN-L3-TRM-FUNC-029'

    @aetest.test
    def externalRPExternalSourceInternalSourceRxOnlyOnBL(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF038'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()             

class VXLANL3TRMFUNC030(aetest.Testcase):

    """ External RP - Internal Source External Source /  Int.Rx and BL Rx """

    uid = 'VXLAN-L3-TRM-FUNC-030'

    @aetest.test
    def externalRPExternalSourceInternalSourceRxInternalRxBLRx(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
#         port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
#         tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF039'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            if abs(rx_stat-tx_stat) <=threshold:
                log.info('Traffic Initial Test passed ... Sending IGMP host leave on the ports...tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                for TG in tg_interface_hdl_dict:
                    log.info('The Value of TG is: {0}'.format(TG))
                    log.info('The Value of traffic_to_consider is: {0}'.format(traffic_to_consider))
                    log.info('The value of receiver is : {0}'.format(receiver))
                    log.info('The value of tg_interface_hdl_dict[TG] is : {0}'.format(tg_interface_hdl_dict[TG]))
                    log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                                    if not o.status:
                                        log.error('IGMP leave is not sent to the group . Pls debug.....')
                                        self.failed()
            
                countDownTimer(15)
                log.info('The value of stream_name is : {0}'.format(stream_name))
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                if rx_stat <=threshold:
                    log.info('Traffic loss is as expected.....tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic loss was expected but the received traffic is : {0}'.format(rx_stat))
                    self.failed()
                for TG in tg_interface_hdl_dict:
                    if isinstance(receiver, list):
                        for i in receiver:
                            pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                            for ip in tg_interface_hdl_dict[TG][traffic_to_consider][i]:
                                test=pat.match(ip)
                                if test:
                                    log.info('The value of ip is : {0}'.format(ip))
                                    log.info('The value of i is : {0}'.format(i))
                                    try:
                                        a = tg_interface_hdl_dict[TG][traffic_to_consider][i][ip]['session_handle']
                                    except:
                                        log.info('The value of a is :{0}'.format(a))
                                    o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                    if not o.status:
                                        log.info('IGMP join is not sent to the group . Pls debug.....')
                                        self.failed()  
                countDownTimer(15)

                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
                if abs(tx_stat-rx_stat) <=threshold:
                    log.info('Traffic resumed as expected and the value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                else:
                    log.error('Traffic did not resume as expected and the value of tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))   
                    self.failed() 
            else:
                log.error('Initial Traffic condition failed.. tx is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                self.failed()
                
class VXLANL3TRMFUNC031(aetest.Testcase):

    """ External RP - Remove NGMPVN from BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-031'

    @aetest.test
    def removeFeatureNGMVPNFromBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        res = [node_dict['all_dut'][dut].execute('terminal dont-ask') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = 'sh run | i -i "vrf context" next 13 > bootflash:automation-vrf-configs'
        cfg2 = 'sh run int nve 1 | i i "interface nve|associate-vrf" next 1 > bootflash:automation-nve-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature NGMVPN on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
        
        if out.result=='fail':
            log.error('Enable disable of NGMVPN failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of NGMVPN passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)
            node_dict['all_dut'][dut].execute(cfg2)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature NGMVPN on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
                node_dict['all_dut'][dut].configure('interface nve 1 ; shutdown')
                if out.result=='fail':
                    log.error('Disable of NGMVPN failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of NGMVPN passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(60)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
    
                    source_port = ''
                    for i in source:
                        source_port += port_handle_dict[i]
                        log.info('The value of source_port is : {0}'.format(source_port))
                        stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                        log.info('The value of stats is : {0}'.format(stats))
                        exp_trf = 0
                        for i in receiver:
                            log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                            if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
                                #rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                                log.info('the value of i is : {0}'.format(i))
                                log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                                rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                                log.info('the value of exp_trf is {0}'.format(exp_trf))
                                log.info('The value of rx is : {0}'.format(rx))
                                exp_trf = exp_trf + rx
                                log.info('The Expected Traffic is : {0}'.format(exp_trf))
                        if abs(exp_trf-rx_stat) <= threshold:
                            log.info('After removing the feature ngmvpn Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                            cfg1 = 'copy bootflash:automation-vrf-configs running-config echo-commands'
                            cfg2 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                    
                            log.info(banner('Enabling feature NGMVPN on %s' % dut))
                            out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
                            if out.result=='fail':
                                log.error('Enable disable of NGMVPN failed on VTEP %s' % dut)
                                self.failed()
                            else:
                                log.info('Enable disable of NGMVPN passes on VTEP %s' % dut)
                                node_dict['all_dut'][dut].configure(cfg1)
                                node_dict['all_dut'][dut].configure(cfg2)

                                log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                                countDownTimer(60)
                                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                                
                                if abs(tx_stat-rx_stat) <=threshold:
                                    log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                                else:
                                    log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                    self.failed()
                        else:
                            log.error('After removing the feature ngmvpn Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            node_dict['all_dut'][dut].configure(cfg1)
                            node_dict['all_dut'][dut].configure(cfg2)
                            self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()

class VXLANL3TRMFUNC032(aetest.Testcase):

    """ External RP - Remove NGMPVN from BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-032'

    @aetest.test
    def removeFeatureNGMVPNFromBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        cfg1 = 'sh run | i -i "vrf context" next 13 > bootflash:automation-vrf-configs'
        cfg2 = 'sh run int nve 1 | i i "interface nve|associate-vrf" next 1 > bootflash:automation-nve-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature NGMVPN on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
        
        if out.result=='fail':
            log.error('Enable disable of NGMVPN failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of NGMVPN passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)
            node_dict['all_dut'][dut].execute(cfg2)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature NGMVPN on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
                node_dict['all_dut'][dut].configure('interface nve 1 ; shutdown')
                if out.result=='fail':
                    log.error('Disable of NGMVPN failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of NGMVPN passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(20)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
    
                    source_port = ''
                    for i in source:
                        source_port += port_handle_dict[i]
                        log.info('The value of source_port is : {0}'.format(source_port))
                        stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                        log.info('The value of stats is : {0}'.format(stats))
                        exp_trf = 0
                        for i in receiver:
                            log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                            if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
                                #rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                                rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                                log.info('the value of exp_trf is {0}'.format(exp_trf))
                                log.info('The value of rx is : {0}'.format(rx))
                                exp_trf = exp_trf + rx
                                log.info('The Expected Traffic is : {0}'.format(exp_trf))
                        if abs(exp_trf-rx_stat) <= threshold:
                            log.info('After removing the feature ngmvpn Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                            cfg1 = 'copy bootflash:automation-vrf-configs running-config echo-commands'
                            cfg2 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                    
                            log.info(banner('Enabling feature NGMVPN on %s' % dut))
                            out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature ngmvpn' )
                            if out.result=='fail':
                                log.error('Enable disable of NGMVPN failed on VTEP %s' % dut)
                                self.failed()
                            else:
                                log.info('Enable disable of NGMVPN passes on VTEP %s' % dut)
                                node_dict['all_dut'][dut].configure(cfg1)
                                node_dict['all_dut'][dut].configure(cfg2)

                                log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                                countDownTimer(60)
                                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                                
                                if abs(tx_stat-rx_stat) <=threshold:
                                    log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                                else:
                                    log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                                    node_dict['all_dut'][dut].configure(cfg1)
                                    node_dict['all_dut'][dut].configure(cfg2)      
                                    self.failed()
                        else:
                            log.error('After removing the feature ngmvpn Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                            node_dict['all_dut'][dut].configure(cfg1)
                            node_dict['all_dut'][dut].configure(cfg2)
                            
                            self.failed()
                        
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()

class VXLANL3TRMFUNC033(aetest.Testcase):

    """ External RP - Remove BGP from BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-033'

    @aetest.test
    def removeFeatureBGPFromBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh run bgp  > automation-bgp-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature BGP on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
        
        if out.result=='fail':
            log.error('Enable disable of BGP failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of BGP passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature BGP on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
                if out.result=='fail':
                    log.error('Disable of BGP failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of BGP passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(20)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
    
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature BGP Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-bgp-configs running-config echo-commands'
                
                        log.info(banner('Enabling feature BGP on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
                        if out.result=='fail':
                            log.error('Enable disable of BGP failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of BGP passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)

                            log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature ngmvpn Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        node_dict['all_dut'][dut].configure(cfg1)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()

class VXLANL3TRMFUNC034(aetest.Testcase):

    """ External RP - Remove BGP from BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-034'

    @aetest.test
    def removeFeatureBGPFromBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh run bgp  > automation-bgp-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature BGP on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
        
        if out.result=='fail':
            log.error('Enable disable of BGP failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of BGP passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature BGP on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
                if out.result=='fail':
                    log.error('Disable of BGP failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of BGP passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(20)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
    
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature BGP Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-bgp-configs running-config echo-commands'
                
                        log.info(banner('Enabling feature BGP on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature bgp' )
                        if out.result=='fail':
                            log.error('Enable disable of BGP failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of BGP passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)

                            log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature ngmvpn Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        node_dict['all_dut'][dut].configure(cfg1)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()


class VXLANL3TRMFUNC035(aetest.Testcase):

    """ External RP - Remove Feature nv overlay """

    uid = 'VXLAN-L3-TRM-FUNC-035'

    @aetest.test
    def removeFeatureNvOverlayFromBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh running-config interface nve 1   > automation-nve-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature NV Overlay  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay')
        
        if out.result=='fail':
            log.error('Enable disable of NV Overlay failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of NV Overlay passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature Nv Overlay on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature nv overlay' )
                if out.result=='fail':
                    log.error('Disable of feature NV Overlay failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature NV Overlay passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds before collecting the Traffic Stats. ....')
                    countDownTimer(40)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
#                     source_port = ''
#                     for i in source:
#                         source_port += port_handle_dict[i]
#                         log.info('The value of source_port is : {0}'.format(source_port))
#                         stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
#                         log.info('The value of stats is : {0}'.format(stats))
#                         exp_trf = 0
#                     for i in receiver:
#                         log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
#                         if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
#                             rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
#                             log.info('the value of exp_trf is {0}'.format(exp_trf))
#                             log.info('The value of rx is : {0}'.format(rx))
#                             exp_trf = exp_trf + rx
#                             log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature NV Overlay Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                        log.info(banner('Enabling feature NV Ovelay on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay' )
                        if out.result=='fail':
                            log.error('Enable disable of feature NV Ovelay failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature NV Ovelay passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)

                            log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat)) 
                                node_dict['all_dut'][dut].configure(cfg1)     
                                self.failed()
                    else:
                        log.error('After removing the feature NV Ovelay Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('****************************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('****************************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
class VXLANL3TRMFUNC036(aetest.Testcase):

    """ External RP - Remove Feature nv overlay on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-036'

    @aetest.test
    def removeFeatureNvOverlayFromBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh running-config interface nve 1   > automation-nve-configs'
        delete = 'delete bootflash:automation* no-prompt'
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature NV Overlay  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay')
        
        if out.result=='fail':
            log.error('Enable disable of NV Overlay failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of NV Overlay passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature Nv Overlay on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature nv overlay' )
                if out.result=='fail':
                    log.error('Disable of feature NV Overlay failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature NV Overlay passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(40)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
#                     source_port = ''
#                     for i in source:
#                         source_port += port_handle_dict[i]
#                         log.info('The value of source_port is : {0}'.format(source_port))
#                         stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
#                         log.info('The value of stats is : {0}'.format(stats))
#                         exp_trf = 0
#                     for i in receiver:
#                         log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
#                         if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
#                             rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
#                             log.info('the value of exp_trf is {0}'.format(exp_trf))
#                             log.info('The value of rx is : {0}'.format(rx))
#                             exp_trf = exp_trf + rx
#                             log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature NV Overlay Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                        log.info(banner('Enabling feature NV Ovelay on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay' )
                        if out.result=='fail':
                            log.error('Enable disable of feature NV Ovelay failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature NV Ovelay passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)

                            log.info('Waiting for the traffic to recover !!! Sleeping for 20 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))
                                node_dict['all_dut'][dut].configure(cfg1)      
                                self.failed()
                    else:
                        log.error('After removing the feature NV Ovelay Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('****************************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('****************************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()

class VXLANL3TRMFUNC037(aetest.Testcase):

    """ External RP - Remove Feature vn-segment-vlan-based on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-037'

    @aetest.test
    def removeFeatureVnSegFromBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh running-config interface nve 1   > automation-nve-configs'
        cfg2 = 'sh run vlan > automation-vlan-configs'
        delete = 'delete bootflash:automation* no-prompt' 
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature vn-segment-vlan-based  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature vn-segment-vlan-based')
        
        if out.result=='fail':
            log.error('Enable disable of vn-segment-vlan-based failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of vn-segment-vlan-based passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)
            node_dict['all_dut'][dut].execute(cfg2)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature Vn-Seg on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature nv overlay,vn-segment-vlan-based' )
                if out.result=='fail':
                    log.error('Disable of feature Vn-Seg failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature Vn-Seg passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(120)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
#                     source_port = ''
#                     for i in source:
#                         source_port += port_handle_dict[i]
#                         log.info('The value of source_port is : {0}'.format(source_port))
#                         stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
#                         log.info('The value of stats is : {0}'.format(stats))
#                         exp_trf = 0
#                     for i in receiver:
#                         log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
#                         if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
#                             rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
#                             log.info('the value of exp_trf is {0}'.format(exp_trf))
#                             log.info('The value of rx is : {0}'.format(rx))
#                             exp_trf = exp_trf + rx
#                             log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature NV Overlay Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                        cfg2 = 'copy bootflash:automation-vlan-configs running-config echo-commands'
                        log.info(banner('Enabling feature Vn-Seg on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay,vn-segment-vlan-based' )
                        if out.result=='fail':
                            log.error('Enable disable of feature Vn-Seg failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature Vn-Seg passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)
                            node_dict['all_dut'][dut].configure(cfg2)
                            log.info('Waiting for the traffic to recover !!! Sleeping for 60 seconds')
                            countDownTimer(120)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature NV Ovelay Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1)
                        node_dict['all_dut'][dut].configure(cfg2)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()                               

class VXLANL3TRMFUNC038(aetest.Testcase):

    """ External RP - Remove Feature vn-segment-vlan-based on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-038'

    @aetest.test
    def removeFeatureVnSegFromBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = ' sh running-config interface nve 1   > automation-nve-configs'
        cfg2 = 'sh run vlan > automation-vlan-configs'
        delete = 'delete bootflash:automation* no-prompt' 
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature vn-segment-vlan-based  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature vn-segment-vlan-based')
        
        if out.result=='fail':
            log.error('Enable disable of vn-segment-vlan-based failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of vn-segment-vlan-based passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)
            node_dict['all_dut'][dut].execute(cfg2)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature Vn-Seg on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature nv overlay,vn-segment-vlan-based' )
                if out.result=='fail':
                    log.error('Disable of feature Vn-Seg failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature Vn-Seg passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(120)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
#                     source_port = ''
#                     for i in source:
#                         source_port += port_handle_dict[i]
#                         log.info('The value of source_port is : {0}'.format(source_port))
#                         stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
#                         log.info('The value of stats is : {0}'.format(stats))
#                         exp_trf = 0
#                     for i in receiver:
#                         log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
#                         if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
#                             rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
#                             log.info('the value of exp_trf is {0}'.format(exp_trf))
#                             log.info('The value of rx is : {0}'.format(rx))
#                             exp_trf = exp_trf + rx
#                             log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(tx_stat-rx_stat) <= threshold:
                        log.info('After removing the feature NV Overlay Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-nve-configs running-config echo-commands'
                        cfg2 = 'copy bootflash:automation-vlan-configs running-config echo-commands'
                        log.info(banner('Enabling feature Vn-Seg on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature nv overlay,vn-segment-vlan-based' )
                        if out.result=='fail':
                            log.error('Enable disable of feature Vn-Seg failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature Vn-Seg passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1)
                            node_dict['all_dut'][dut].configure(cfg2)
                            log.info('Waiting for the traffic to recover !!! Sleeping for 60 seconds')
                            countDownTimer(120)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature NV Ovelay Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1)
                        node_dict['all_dut'][dut].configure(cfg2)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
class VXLANL3TRMFUNC039(aetest.Testcase):

    """ External RP - Remove Feature interface-vlan on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-039'

    @aetest.test
    def removeFeatureInterfaceVlanFromBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        res = [node_dict['all_dut'][dut].execute('terminal dont-ask') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = 'sh run int  | i i "interface Vlan" next 11  > automation-svi-configs'
        delete = 'delete bootflash:automation* no-prompt' 
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature interface-vlan  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan')
        
        if out.result=='fail':
            log.error('Enable disable of interface vlan failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of interface-vlan  passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature interface-vlan on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan' )
                if out.result=='fail':
                    log.error('Disable of feature interface-vlan failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature Interface-vlan passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(60)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
                    source_port = ''
                    for i in source:
                        source_port += port_handle_dict[i]
                        log.info('The value of source_port is : {0}'.format(source_port))
                        stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                        log.info('The value of stats is : {0}'.format(stats))
                        exp_trf = 0
                    for i in receiver:
                        log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                        if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
                            log.info('The value of  is : {0}'.format(i))
                            log.info('The Value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                            rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            log.info('the value of exp_trf is {0}'.format(exp_trf))
                            log.info('The value of rx is : {0}'.format(rx))
                            exp_trf = exp_trf + rx
                            log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(exp_trf-rx_stat) <= threshold:
                        log.info('After removing the feature Interace-Vlan Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-svi-configs running-config echo-commands'
                        log.info(banner('Enabling feature Vn-Seg on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan' )
                        if out.result=='fail':
                            log.error('Enable disable of feature Interace-Vlan failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature Interace-Vlan passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1, timeout = 600)
                            log.info('Waiting for the traffic to recover !!! Sleeping for 60 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature interface VLAN Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1,timeout = 600)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
class VXLANL3TRMFUNC040(aetest.Testcase):

    """ External RP - Remove Feature interface-vlan on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-040'

    @aetest.test
    def removeFeatureInterfaceVlanFromBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        cfg1 = 'sh run int  | i i "interface Vlan" next 11  > automation-svi-configs'
        delete = 'delete bootflash:automation* no-prompt' 
        
        dut = "".join(list(configdict['trigger_dict']['remove_features']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        
        log.info(banner('Enabling feature interface-vlan  on %s' % dut))
        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan')
        
        if out.result=='fail':
            log.error('Enable disable of interface vlan failed on VTEP %s' % dut)
            self.failed()
        else:   
            log.info('Enable disable of interface-vlan  passes on VTEP %s' % dut) 
            node_dict['all_dut'][dut].execute(delete)
            node_dict['all_dut'][dut].execute(cfg1)

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                log.info(banner('Disabling feature Vn-Seg on %s' % dut))
                out=bringup_lib.unconfigFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan' )

                if out.result=='fail':
                    log.error('Disable of feature interface-vlan failed on VTEP %s' % dut)
                    self.failed()
                else:
                    log.info('Disable of Feature Interface-vlan passes on VTEP %s' % dut)
                    log.info('Sleeping for 20 seconds for the traffic to go down ....')
                    countDownTimer(60)
                    stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                    tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                    rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                    
                    source_port = ''
                    for i in source:
                        source_port += port_handle_dict[i]
                        log.info('The value of source_port is : {0}'.format(source_port))
                        stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                        log.info('The value of stats is : {0}'.format(stats))
                        exp_trf = 0
                    for i in receiver:
                        log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                        if port_handle_dict[i] !=  port_handle_dict[tgn_port_dut_mapping[dut]]:
                            rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            log.info('the value of exp_trf is {0}'.format(exp_trf))
                            log.info('The value of rx is : {0}'.format(rx))
                            exp_trf = exp_trf + rx
                            log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(exp_trf-rx_stat) <= threshold:
                        log.info('After removing the feature Interace-Vlan Traffic flow is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        cfg1 = 'copy bootflash:automation-svi-configs running-config echo-commands'
                        log.info(banner('Enabling feature Vn-Seg on %s' % dut))
                        out=bringup_lib.configFeature(node_dict['all_dut'][dut], log, '-feature interface-vlan' )
                        if out.result=='fail':
                            log.error('Enable disable of feature Interace-Vlan failed on VTEP %s' % dut)
                            self.failed()
                        else:
                            log.info('Enable disable of feature Interace-Vlan passes on VTEP %s' % dut)
                            node_dict['all_dut'][dut].configure(cfg1, timeout = 600)
                            log.info('Waiting for the traffic to recover !!! Sleeping for 60 seconds')
                            countDownTimer(60)
                            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                            if abs(tx_stat-rx_stat) <=threshold:
                                log.info('Traffic has resumed as expected after re-configuring the feature ngmvpn Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                            else:
                                log.error('Traffic did not resume as expected after re-configuring the feature ngmvpn. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                                self.failed()
                    else:
                        log.error('After removing the feature NV Ovelay Traffic flow is NOT as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg1, timeout = 600)
                        self.failed()
                            
            else:
                log.info('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                

class VXLANL3TRMFUNC041(aetest.Testcase):

    """ External RP - Kill IGMP Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-041'

    @aetest.test
    def killIGMPProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'igmp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()
                
class VXLANL3TRMFUNC042(aetest.Testcase):

    """ External RP - Kill IGMP Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-042'

    @aetest.test
    def killIGMPProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'igmp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    

class VXLANL3TRMFUNC043(aetest.Testcase):

    """ External RP - Kill L2RIB Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-043'

    @aetest.test
    def killL2RIBProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'l2rib')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()  
                
class VXLANL3TRMFUNC044(aetest.Testcase):

    """ External RP - Kill L2RIB Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-044'

    @aetest.test
    def killL2RIBProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'l2rib')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()  
                
class VXLANL3TRMFUNC045(aetest.Testcase):

    """ External RP - Kill BGP Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-045'

    @aetest.test
    def killBGPProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'bgp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()

class VXLANL3TRMFUNC046(aetest.Testcase):

    """ External RP - Kill BGP Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-046'

    @aetest.test
    def killBGPProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'bgp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()


class VXLANL3TRMFUNC047(aetest.Testcase):

    """ External RP - Kill MFDM Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-047'

    @aetest.test
    def killMFDMProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'mfdm')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    
                

class VXLANL3TRMFUNC048(aetest.Testcase):

    """ External RP - Kill MFDM Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-048'

    @aetest.test
    def killMFDMProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'mfdm')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    

class VXLANL3TRMFUNC049(aetest.Testcase):

    """ External RP - Kill UFDM Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-049'

    @aetest.test
    def killUFDMProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'ufdm')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    
                                         
class VXLANL3TRMFUNC050(aetest.Testcase):

    """ External RP - Kill UFDM Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-050'

    @aetest.test
    def killUFDMProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict']
        node_dict = testscript.parameters['node_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'ufdm')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC051(aetest.Testcase):

    """ External RP - Kill NVE Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-051'

    @aetest.test
    def killNveProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
        node_dict = testscript.parameters['node_dict']
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'nve')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    
                                         
class VXLANL3TRMFUNC052(aetest.Testcase):

    """ External RP - Kill NVE Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-052'

    @aetest.test
    def killNveProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'nve')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC053(aetest.Testcase):

    """ External RP - Kill PIM Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-053'

    @aetest.test
    def killPimrocessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        

        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'ufdm')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()    
                                         
class VXLANL3TRMFUNC054(aetest.Testcase):

    """ External RP - Kill PIM Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-054'

    @aetest.test
    def killPimProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['kill_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestart(node_dict['all_dut'][dut],'nve')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC055(aetest.Testcase):

    """ External RP - Restart OSPF Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-055'

    @aetest.test
    def restartOSPFProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        ospf_process_id = "".join(list(configdict['ospfv2_config_dict'][dut].keys()))
        log.info('The value of ospf_process_id is : {0}'.format(ospf_process_id))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'ospf', process_id = ospf_process_id)
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 



class VXLANL3TRMFUNC056(aetest.Testcase):

    """ External RP - Restart OSPF Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-056'

    @aetest.test
    def restartOSPFProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        ospf_process_id = "".join(list(configdict['ospfv2_config_dict'][dut].keys()))
        log.info('The value of ospf_process_id is : {0}'.format(ospf_process_id))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'ospf', process_id = ospf_process_id)
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 


class VXLANL3TRMFUNC057(aetest.Testcase):

    """ External RP - Restart BGP Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-057'

    @aetest.test
    def restartBGPProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        bgp_as_no = list(configdict['bgp_config_dict'][dut].keys())
        if isinstance(bgp_as_no, list):
            for i in bgp_as_no:
                as_no = i
        log.info('The value of bgp_as_no is : {0}'.format(as_no))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'bgp', process_id = as_no)
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(vtep))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC058(aetest.Testcase):

    """ External RP - Restart BGP Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-058'

    @aetest.test
    def restartBGPProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        bgp_as_no = list(configdict['bgp_config_dict'][dut].keys())
        if isinstance(bgp_as_no, list):
            for i in bgp_as_no:
                as_no = i
        log.info('The value of bgp_as_no is : {0}'.format(as_no))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'bgp', process_id = as_no)
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC059(aetest.Testcase):

    """ External RP - Restart ngmpvn Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-059'

    @aetest.test
    def restartNGMVPNProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'ngmvpn')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC060(aetest.Testcase):

    """ External RP - Restart ngmpvn Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-060'

    @aetest.test
    def restartNGMVPNProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        node_dict = testscript.parameters['node_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'ngmvpn')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 
 
 
class VXLANL3TRMFUNC061(aetest.Testcase):

    """ External RP - Restart Pim Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-061'

    @aetest.test
    def restartPIMProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'pim')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(300)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                            [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                            countDownTimer(180)
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed()           

class VXLANL3TRMFUNC062(aetest.Testcase):

    """ External RP - Restart Pim Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-062'

    @aetest.test
    def restartPIMProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'pim')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(180)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                            [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                            countDownTimer(180)
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC063(aetest.Testcase):

    """ External RP - Restart IGMP Process on BL1 """

    uid = 'VXLAN-L3-TRM-FUNC-063'

    @aetest.test
    def restartIGMPProcessonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'igmp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 


class VXLANL3TRMFUNC064(aetest.Testcase):

    """ External RP - Restart IGMP Process on BL2 """

    uid = 'VXLAN-L3-TRM-FUNC-064'

    @aetest.test
    def restartIGMPProcessonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['restart_process']['BorderLeaf_2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))

        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                    
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
            
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                
                res = verifyProcessRestartWithFlushRoutes(node_dict['all_dut'][dut],'igmp')
            
                if not res:
                    log.info('Process restart failed on the dut {0}'.format(dut))
                
                else:
                    for TG in tgn_config_dict.keys():
                        tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
                        countDownTimer(60)
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                            
                        if abs(tx_stat-rx_stat) <=threshold:
                            log.info(' TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                        else:
                            log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                            self.failed
                
                            total_tx = {}
                            total_rx = {}
                            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                            for i in stat_breakup:
                                if i in sender_port:
                                    log.info('sender_port: The value of is : {0}'.format(i))
                                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                    total_tx[i] = tx
                                if i in receiver_port:
                                    log.info('rcv_port: The value of is : {0}'.format(i))
                                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                    total_rx[i] = rx
                            log.info('***********************************************************************************************************************************')
                            log.info('The value of total_tx is : {0}'.format(total_tx))
                            log.info('The value of total_rx is : {0}'.format(total_rx))
                            log.info('***********************************************************************************************************************************')
                            self.failed()
                            
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                self.failed()
                
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 


class VXLANL3TRMFUNC065(aetest.Testcase):

    """ External RP - remove and readd vxlan IGMP snooping cli on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-065'

    @aetest.test
    def removeReaddVxlanIGMPSnoopingClionBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))

        cfg = 'ip igmp snooping vxlan'            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                     
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
             
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                log.info(banner('Removing the Vxlan IGMP Snooping CLI on dut : {0}'.format(dut))) 
                cfg1 = 'no ' + cfg
                node_dict['all_dut'][dut].configure(cfg1)
                log.info(banner('Waiting for 30 seconds before re-configuring the cli.'))
                countDownTimer(30)             
                log.info(banner('Re-configuring the Vxlan IGMP Snooping CLI ...'))
                node_dict['all_dut'][dut].configure(cfg)
                log.info(banner('Waiting for 100 seconds before re-configuring the cli.'))
                countDownTimer(200)
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                source_port = ''
                        
                if abs(tx_stat - rx_stat) <= threshold:
                    log.info('Traffic is recovered as expected after removing and readding the vlxan igmp Snoopoing CLI : Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                else:
                        log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg)
                        self.failed()
                                     
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 


class VXLANL3TRMFUNC066(aetest.Testcase):

    """ External RP - remove and readd vxlan IGMP snooping cli on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-066'

    @aetest.test
    def removeReaddVxlanIGMPSnoopingClionBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))

        cfg = 'ip igmp snooping vxlan'            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                     
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
             
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                log.info(banner('Removing the Vxlan IGMP Snooping CLI on dut : {0}'.format(dut))) 
                cfg1 = 'no ' + cfg
                node_dict['all_dut'][dut].configure(cfg1)
                log.info(banner('Waiting for 30 seconds before re-configuring the cli.'))
                countDownTimer(30)             
                log.info(banner('Re-configuring the Vxlan IGMP Snooping CLI ...'))
                node_dict['all_dut'][dut].configure(cfg)
                log.info(banner('Waiting for 100 seconds before re-configuring the cli.'))
                countDownTimer(200)
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                source_port = ''
                        
                if abs(tx_stat - rx_stat) <= threshold:
                    log.info('Traffic is recovered as expected after removing and readding the vlxan igmp Snoopoing CLI : Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                else:
                        log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        node_dict['all_dut'][dut].configure(cfg)
                        self.failed()
                                     
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 


class VXLANL3TRMFUNC067(aetest.Testcase):

    """ External RP - remove and readd Pim - L2 VNI SVI on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-067'

    @aetest.test
    def removeReaddPimOnL2VNISVIonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        cfg = 'ip pim sparse-mode'
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        log.info('the value of afffected port is : {0}'.format(affected_port))
        total_port_list.remove(affected_port)
        
        log.info('The value of unaffected_ports is : {0}'.format(total_port_list))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                     
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
             
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                vlan = configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf1'][dut]['vlan']
                log.info('The value of vlan is : {0}'.format(vlan))
                if isinstance(vlan,list):
                    for i in vlan:
                        cfg1 =  '''interface vlan {0}
                                   no {1}'''.format(i, cfg)
                        node_dict['all_dut'][dut].configure(cfg1)
                
                countDownTimer(30)             
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                source_port = ''
                for i in source:
                    source_port += port_handle_dict[i]
                    log.info('The value of source_port is : {0}'.format(source_port))
                    stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                    log.info('The value of stats is : {0}'.format(stats))
                    exp_trf = 0
                    for i in receiver:
                        log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                        if port_handle_dict[i] !=  affected_port:
                            #rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            log.info('the value of exp_trf is {0}'.format(exp_trf))
                            log.info('The value of rx is : {0}'.format(rx))
                            exp_trf = exp_trf + rx
                            log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(exp_trf-rx_stat) <= threshold:
                        log.info('After PIM disable on L2VNI, Traffic is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                                 
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        
                        vlan = configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf1'][dut]['vlan']
                        if isinstance(vlan,list):
                            for i in vlan:
                                cfg1 =  '''interface vlan {0}
                                          {1}'''.format(i, cfg)
                                node_dict['all_dut'][dut].configure(cfg1)
                        
                        countDownTimer(100)             
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                        
                        if abs(tx_stat - rx_stat) <= threshold:
                            log.info('Traffic is recovered as expected after removing and readding the vlxan igmp Snoopoing CLI : Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        else:
                                log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                                total_tx = {}
                                total_rx = {}
                                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                                for i in stat_breakup:
                                    if i in sender_port:
                                        log.info('sender_port: The value of is : {0}'.format(i))
                                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                        total_tx[i] = tx
                                    if i in receiver_port:
                                        log.info('rcv_port: The value of is : {0}'.format(i))
                                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                        total_rx[i] = rx
                                log.info('***********************************************************************************************************************************')
                                log.info('The value of total_tx is : {0}'.format(total_tx))
                                log.info('The value of total_rx is : {0}'.format(total_rx))
                                log.info('***********************************************************************************************************************************')
                                self.failed()
                                     
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

class VXLANL3TRMFUNC068(aetest.Testcase):

    """ External RP - remove and readd Pim - L2 VNI SVI on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-068'

    @aetest.test
    def removeReaddPimOnL2VNISVIonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        cfg = 'ip pim sparse-mode'
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        log.info('the value of afffected port is : {0}'.format(affected_port))
        total_port_list.remove(affected_port)
        
        log.info('The value of unaffected_ports is : {0}'.format(total_port_list))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
            tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
            rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
            total_tx = {}
            total_rx = {}
            stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
            for i in stat_breakup:
                if i in sender_port:
                    log.info('sender_port: The value of is : {0}'.format(i))
                    tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                    total_tx[i] = tx
                if i in receiver_port:
                    log.info('rcv_port: The value of is : {0}'.format(i))
                    rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                    total_rx[i] = rx
                     
            log.info('***********************************************************************************************************************************')
            log.info('The value of total_tx is : {0}'.format(total_tx))
            log.info('The value of total_rx is : {0}'.format(total_rx))
            log.info('***********************************************************************************************************************************')
             
            if abs(tx_stat-rx_stat) <=threshold:
                log.info('Initial TTraffic flow is as expected Tx  is {0} and rx is {1}: '.format(tx_stat,rx_stat))
                vlan = configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf2'][dut]['vlan']
                log.info('The value of vlan is : {0}'.format(vlan))
                if isinstance(vlan,list):
                    for i in vlan:
                        cfg1 =  '''interface vlan {0}
                                   no {1}'''.format(i, cfg)
                        node_dict['all_dut'][dut].configure(cfg1)
                
                countDownTimer(30)             
                stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                source_port = ''
                for i in source:
                    source_port += port_handle_dict[i]
                    log.info('The value of source_port is : {0}'.format(source_port))
                    stats = tgn_hdl.traffic_stats(port_handle=source_port, mode = 'streams')
                    log.info('The value of stats is : {0}'.format(stats))
                    exp_trf = 0
                    for i in receiver:
                        log.info('The value of port_handle_dict[i] is : {0}'.format(port_handle_dict[i]))
                        if port_handle_dict[i] !=  affected_port:
                            #rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            rx = stats[port_handle_dict[i]]['stream'][stream_name]['rx']['total_pkt_rate']
                            log.info('the value of exp_trf is {0}'.format(exp_trf))
                            log.info('The value of rx is : {0}'.format(rx))
                            exp_trf = exp_trf + rx
                            log.info('The Expected Traffic is : {0}'.format(exp_trf))
                    if abs(exp_trf-rx_stat) <= threshold:
                        log.info('After PIM disable on L2VNI, Traffic is as expected..Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        total_tx = {}
                        total_rx = {}
                        stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                        for i in stat_breakup:
                            if i in sender_port:
                                log.info('sender_port: The value of is : {0}'.format(i))
                                tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                total_tx[i] = tx
                            if i in receiver_port:
                                log.info('rcv_port: The value of is : {0}'.format(i))
                                rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                total_rx[i] = rx
                                 
                        log.info('***********************************************************************************************************************************')
                        log.info('The value of total_tx is : {0}'.format(total_tx))
                        log.info('The value of total_rx is : {0}'.format(total_rx))
                        log.info('***********************************************************************************************************************************')
                        
                        vlan = configdict['trigger_dict']['enableDisablePimL2VNI']['BorderLeaf2'][dut]['vlan']
                        if isinstance(vlan,list):
                            for i in vlan:
                                cfg1 =  '''interface vlan {0}
                                          {1}'''.format(i, cfg)
                                node_dict['all_dut'][dut].configure(cfg1)
                        
                        countDownTimer(100)             
                        stats = tgn_hdl.traffic_stats(stream = stream_name, mode = 'traffic_item')             
                        tx_stat = stats.traffic_item[stream_name]['tx'].total_pkt_rate
                        rx_stat = stats.traffic_item[stream_name]['rx'].total_pkt_rate
                        
                        if abs(tx_stat - rx_stat) <= threshold:
                            log.info('Traffic is recovered as expected after removing and readding the vlxan igmp Snoopoing CLI : Tx is {0} and Rx is {1} :'.format(tx_stat,rx_stat))
                        else:
                                log.error('Traffic flow is not as expected... Tx is {0} and rx is : {1}:'.format(tx_stat,rx_stat))
                                total_tx = {}
                                total_rx = {}
                                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                                for i in stat_breakup:
                                    if i in sender_port:
                                        log.info('sender_port: The value of is : {0}'.format(i))
                                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                                        total_tx[i] = tx
                                    if i in receiver_port:
                                        log.info('rcv_port: The value of is : {0}'.format(i))
                                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                                        total_rx[i] = rx
                                log.info('***********************************************************************************************************************************')
                                log.info('The value of total_tx is : {0}'.format(total_tx))
                                log.info('The value of total_rx is : {0}'.format(total_rx))
                                log.info('***********************************************************************************************************************************')
                                self.failed()
                                     
            else:
                log.error('Initial Traffic flow is not as expected. The Value of tx is {0}and rx is {1}: '.format(tx_stat,rx_stat))      
                total_tx = {}
                total_rx = {}
                stat_breakup = tgn_hdl.traffic_stats(stream = stream_name, mode = 'streams')
                for i in stat_breakup:
                    if i in sender_port:
                        log.info('sender_port: The value of is : {0}'.format(i))
                        tx = stat_breakup[i]['stream'][stream_name]['tx']['total_pkt_rate']
                        total_tx[i] = tx
                    if i in receiver_port:
                        log.info('rcv_port: The value of is : {0}'.format(i))
                        rx = stat_breakup[i]['stream'][stream_name]['rx']['total_pkt_rate']
                        total_rx[i] = rx
                log.info('***********************************************************************************************************************************')
                log.info('The value of total_tx is : {0}'.format(total_tx))
                log.info('The value of total_rx is : {0}'.format(total_rx))
                log.info('***********************************************************************************************************************************')
                self.failed() 

                
class VXLANL3TRMFUNC069(aetest.Testcase):

    """ External RP - Clear IP IGMP Snooping entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-069'

    @aetest.test
    def clearIpIgmpSnoopingEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        cfg = 'ip pim sparse-mode'
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        log.info('the value of afffected port is : {0}'.format(affected_port))
        #total_port_list.remove(affected_port)
        
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip igmp snooping groups * vlan all'
               
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                                


class VXLANL3TRMFUNC070(aetest.Testcase):

    """ External RP - Clear IP IGMP Snooping entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-070'

    @aetest.test
    def clearIpIgmpSnoopingEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(total_port_list))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip igmp snooping groups * vlan all'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()    

class VXLANL3TRMFUNC071(aetest.Testcase):

    """ External RP - Clear IP IGMP Group entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-071'

    @aetest.test
    def clearIpIgmpGroupEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip igmp groups *  vrf all'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                                

class VXLANL3TRMFUNC072(aetest.Testcase):

    """ External RP - Clear IP IGMP Snooping entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-072'

    @aetest.test
    def clearIpIgmpGroupEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip igmp groups *  vrf all'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                                


class VXLANL3TRMFUNC073(aetest.Testcase):

    """ External RP - Clear IP IGMP mroute entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-073'

    @aetest.test
    def clearIpMRouteEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip mroute * vrf all'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  

class VXLANL3TRMFUNC074(aetest.Testcase):

    """ External RP - Clear IP IGMP mroute entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-074'

    @aetest.test
    def clearIpMRouteEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
        
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip mroute * vrf all'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()    
                
class VXLANL3TRMFUNC075(aetest.Testcase):

    """ External RP - Clear IP Route entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-075'

    @aetest.test
    def clearIpRouteEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip route vrf all *'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  
 
class VXLANL3TRMFUNC076(aetest.Testcase):

    """ External RP - Clear IP Route entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-076'

    @aetest.test
    def clearIpRouteEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip route vrf all *'
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()   

class VXLANL3TRMFUNC077(aetest.Testcase):

    """ External RP - Clear IP BGP Route entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-077'

    @aetest.test
    def clearIpBGPRouteEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip bgp * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  


class VXLANL3TRMFUNC078(aetest.Testcase):

    """ External RP - Clear IP BGP Route entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-078'

    @aetest.test
    def clearIpBGPRouteEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip bgp * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 
                
                
class VXLANL3TRMFUNC079(aetest.Testcase):

    """ External RP - Clear IP ARP entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-079'

    @aetest.test
    def clearIpARPEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip arp vrf all force-delete '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  


class VXLANL3TRMFUNC080(aetest.Testcase):

    """ External RP - Clear IP ARP entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-080'

    @aetest.test
    def clearIpARPEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip arp vrf all force-delete '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()     
                
class VXLANL3TRMFUNC081(aetest.Testcase):

    """ External RP - Clear IP PIM Route entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-081'

    @aetest.test
    def clearIpPimRouteEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip pim route * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()        
                
                
class VXLANL3TRMFUNC082(aetest.Testcase):

    """ External RP - Clear IP PIM Route entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-082'

    @aetest.test
    def clearIpPimRouteEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip pim route * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                           
                
class VXLANL3TRMFUNC083(aetest.Testcase):

    """ External RP - Clear IP MBGP Route entries on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-083'

    @aetest.test
    def clearIpMBGPRouteEntriesonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip mbgp * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf1'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 
 
 
class VXLANL3TRMFUNC084(aetest.Testcase):

    """ External RP - Clear IP MBGP Route entries on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-084'

    @aetest.test
    def clearIpMBGPRouteEntriesonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['config_unconfig']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
#         total_port_list = []
#         for uut in tgn_port_dut_mapping:
#             total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
#             log.info('The value of total_port_list is : {0}'.format(total_port_list))
#         affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
#         log.info('the value of afffected port is : {0}'.format(affected_port))
#         unaffected_ports = total_port_list.remove(affected_port)
#         
#         log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                cfg = 'clear ip mbgp * vrf all '
                
                dut = "".join(list(configdict['trigger_dict']['execute_commands']['BorderLeaf2'].keys()))
                
                node_dict['all_dut'][dut].execute(cfg)
                countDownTimer(180)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic  flow is as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                else:
                    log.error('Traffic  flow is NOT as expected after clearing the snooping entries.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'interface nve 1 ; shutdown ; sleep 5 ; no shutdown'
                    [node_dict['all_dut'][dut].configure(cfg) for dut in ['uut1','uut2','uut4','uut5']]
                    countDownTimer(180)
                    self.failed()
            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()   
                
class VXLANL3TRMFUNC085(aetest.Testcase):

    """ External RP - checking Checkpoint functionality on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-085'

    @aetest.test
    def checkCheckpointFunctionalityonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['checkpoint']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_ports = total_port_list[:]
        unaffected_ports.remove(affected_port)
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                res = deleteAndCreateCheckpoint(log,hdl)
                feature_list = configdict['trigger_dict']['checkpoint']['BorderLeaf1'][dut]['feature']
                for i in feature_list:
                    cfg = 'no feature {0}'.format(i)
                    hdl.configure(cfg,timeout=500)
               
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k == affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=600)
                    countDownTimer(300)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = 'rollback running-config checkpoint c1 verbose'
                        node_dict['all_dut'][dut].execute(cfg,timeout=300)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()         

                
class VXLANL3TRMFUNC086(aetest.Testcase):

    """ External RP - checking Checkpoint functionality on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-086'

    @aetest.test
    def checkCheckpointFunctionalityonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['checkpoint']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_ports = total_port_list[:]
        unaffected_ports.remove(affected_port)
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                res = deleteAndCreateCheckpoint(log,hdl)
                feature_list = configdict['trigger_dict']['checkpoint']['BorderLeaf2'][dut]['feature']
                for i in feature_list:
                    cfg = 'no feature {0}'.format(i)
                    hdl.configure(cfg,timeout=500)
               
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k == affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    countDownTimer(300)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = 'rollback running-config checkpoint c1 verbose'
                        node_dict['all_dut'][dut].execute(cfg,timeout=300)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  


class VXLANL3TRMFUNC087(aetest.Testcase):

    """ External RP - checking ConfigReplace functionality on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-087'

    @aetest.test
    def checkConfigReplaceFunctionalityonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['checkpoint']['BorderLeaf1'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_ports = total_port_list[:]
        unaffected_ports.remove(affected_port)
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
        
        delete = 'delete bootflash:automation* no-prompt'
        cfg = 'copy running-config bootflash:automation-config-replace-config'
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                hdl.execute(delete)
                hdl.execute(cfg)
              
                feature_list = configdict['trigger_dict']['checkpoint']['BorderLeaf1'][dut]['feature']
                for i in feature_list:
                    cfg = 'no feature {0}'.format(i)
                    hdl.configure(cfg,timeout=500)
               
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    countDownTimer(300)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = 'rollback running-config checkpoint c1 verbose'
                        node_dict['all_dut'][dut].execute(cfg,timeout=300)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'rollback running-config checkpoint c1 verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  
                              
class VXLANL3TRMFUNC088(aetest.Testcase):

    """ External RP - checking ConfigReplace functionality on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-088'

    @aetest.test
    def checkConfigReplaceFunctionalityonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['checkpoint']['BorderLeaf2'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        delete = 'delete bootflash:automation* no-prompt'
        cfg = 'copy running-config bootflash:automation-config-replace-config'
        total_port_list = []
        for uut in tgn_port_dut_mapping:
            total_port_list.append(port_handle_dict[tgn_port_dut_mapping[uut]])
            log.info('The value of total_port_list is : {0}'.format(total_port_list))
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_ports = total_port_list[:]
        unaffected_ports.remove(affected_port)
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_ports))     
            
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                hdl.execute(delete)
                hdl.execute(cfg)
                feature_list = configdict['trigger_dict']['checkpoint']['BorderLeaf2'][dut]['feature']
                for i in feature_list:
                    cfg = 'no feature {0}'.format(i)
                    hdl.configure(cfg,timeout=500)
               
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_tx']-res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg = 'configure replace bootflash:automation-config-replace-config verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    countDownTimer(300)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = 'configure replace bootflash:automation-config-replace-config verbose'
                        node_dict['all_dut'][dut].execute(cfg,timeout=300)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = 'configure replace bootflash:automation-config-replace-config verbose'
                    node_dict['all_dut'][dut].execute(cfg,timeout=300)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                


class VXLANL3TRMFUNC089(aetest.Testcase):

    """ External RP - Flap the Uplinks  on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-089'

    @aetest.test
    def flapUplinkOnBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['uplink_port_flap'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_port = []
        for i in receiver:
            unaffected_port.append(port_handle_dict[i])
        unaffected_port.remove(affected_port)
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                uplink_port_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['uplink_port_flap'][dut]['uplink_ports']
                if isinstance(uplink_port_list, list):
                    for i in uplink_port_list:
                        cfg = '''interface {0}
                                 shutdown'''.format(i)
                        hdl.configure(cfg)
                log.info(banner('Waiting for 300 seconds before starting Traffic stats measurement.'))
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k == affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_rx'] - res['total_rx']) <= threshold:
                    log.info('Traffic is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    if isinstance(uplink_port_list, list):
                        for i in uplink_port_list:
                            cfg = '''interface {0}
                                     no shutdown'''.format(i)
                            hdl.configure(cfg)
                    countDownTimer(60)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        if isinstance(uplink_port_list, list):
                            for i in uplink_port_list:
                                cfg = '''interface {0}
                                         no shutdown'''.format(i)
                                hdl.configure(cfg)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    if isinstance(uplink_port_list, list):
                        for i in uplink_port_list:
                            cfg = '''interface {0}
                                     no shutdown'''.format(i)
                            hdl.configure(cfg)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  


class VXLANL3TRMFUNC090(aetest.Testcase):

    """ External RP - Flap the Uplinks  on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-090'

    @aetest.test
    def flapUplinkOnBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['uplink_port_flap'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_port = []
        for i in receiver:
            unaffected_port.append(port_handle_dict[i])
        unaffected_port.remove(affected_port)
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                uplink_port_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['uplink_port_flap'][dut]['uplink_ports']
                if isinstance(uplink_port_list, list):
                    for i in uplink_port_list:
                        cfg = '''interface {0}
                                 shutdown'''.format(i)
                        hdl.configure(cfg)
               
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k == affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    if isinstance(uplink_port_list, list):
                        for i in uplink_port_list:
                            cfg = '''interface {0}
                                     no shutdown'''.format(i)
                            hdl.configure(cfg)
                    countDownTimer(60)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        if isinstance(uplink_port_list, list):
                            for i in uplink_port_list:
                                cfg = '''interface {0}
                                         no shutdown'''.format(i)
                                hdl.configure(cfg)
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    if isinstance(uplink_port_list, list):
                        for i in uplink_port_list:
                            cfg = '''interface {0}
                                     no shutdown'''.format(i)
                            hdl.configure(cfg)
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC091(aetest.Testcase):

    """ External RP - IGMP Host Leave on BL-1 """

    uid = 'VXLAN-L3-TRM-FUNC-091'

    @aetest.test
    def igmpHostLeaveOnBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['IGMP_Host_Leave'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_port = []
        for i in receiver:
            unaffected_port.append(port_handle_dict[i])
        unaffected_port.remove(affected_port)
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                for ip in tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]:
                    pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                    log.info('the value of ip is : {0}'.format(ip))

                    test=pat.match(ip)
                    if test:
                        log.info('The value of tg_interface_hdl_dict[TG] is {0}'.format(tg_interface_hdl_dict[TG]))
                        log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                        log.info('The value of new is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]))
                        log.info('The new1 value is {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]))
                        try:
                            a = tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]['session_handle']
                        except:
                            log.info('The value of a is :{0}'.format(a))
                        o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                        if not o.status:
                            log.info('IGMP leave is not sent to the group . Pls debug.....')
                            self.failed()
               
                countDownTimer(15)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    for ip in tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]:
                        log.info('the value of ip is : {0}'.format(ip))
                        test=pat.match(ip)
                        if test:
                            log.info('The value of ip is : {0}'.format(ip))
                            log.info('The value of tg_interface_hdl_dict[TG] is {0}'.format(tg_interface_hdl_dict[TG]))
                            log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                            log.info('The value of new is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]))
                            log.info('The new1 value is {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]))
                            try:
                                a = tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]['session_handle']
                            except:
                                log.info('The value of a is :{0}'.format(a))
                            o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                            if not o.status:
                                log.info('IGMP leave is not sent to the group . Pls debug.....')
                                self.failed()

                    countDownTimer(45)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  


class VXLANL3TRMFUNC092(aetest.Testcase):

    """ External RP - IGMP Host Leave on BL-2 """

    uid = 'VXLAN-L3-TRM-FUNC-092'

    @aetest.test
    def igmpHostLeaveOnBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['IGMP_Host_Leave'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        unaffected_port = []
        for i in receiver:
            unaffected_port.append(port_handle_dict[i])
        unaffected_port.remove(affected_port)
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                
                for ip in tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]:
                    pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                    log.info('the value of ip is : {0}'.format(ip))
                    test=pat.match(ip)
                    if test:
                        log.info('The value of ip is : {0}'.format(ip))
                        log.info('The value of i is : {0}'.format(i))
                        try:
                            a = tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]['session_handle']
                        except:
                            log.info('The value of a is :{0}'.format(a))
                        o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                        if not o.status:
                            log.info('IGMP leave is not sent to the group . Pls debug.....')
                            self.failed()
               
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    for ip in tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]]:
                        log.info('the value of ip is : {0}'.format(ip))
                        test=pat.match(ip)
                        if test:
                            log.info('The value of ip is : {0}'.format(ip))
                            log.info('The value of tg_interface_hdl_dict[TG] is {0}'.format(tg_interface_hdl_dict[TG]))
                            log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider])) 
                            try:
                                a = tg_interface_hdl_dict[TG][traffic_to_consider][tgn_port_dut_mapping[dut]][ip]['session_handle']
                            except:
                                log.info('The value of a is :{0}'.format(a))
                            o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                            if not o.status:
                                log.info('IGMP leave is not sent to the group . Pls debug.....')
                                self.failed()

                    countDownTimer(45)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  
                
class VXLANL3TRMFUNC093(aetest.Testcase):

    """ External RP - External RP Flap """

    uid = 'VXLAN-L3-TRM-FUNC-093'

    @aetest.test
    def externalRPFlap(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
#         tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['External_RP_Flap'].keys()))
        log.info('the value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= configdict['trigger_dict']['External_RP_Flap'][dut]['affected_duts']
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        log.info('the value of traffic_stream_dict is : {0}'.format(traffic_stream_dict))
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
        
                hdl = node_dict['all_dut'][dut]
                interface = configdict['trigger_dict']['External_RP_Flap'][dut]['interface']
                
                cfg = '''interface {0}
                         shutdown'''.format(interface)
                hdl.configure(cfg)
                
                y = tgn_hdl.traffic_control(action='stop',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not y.status:
                    self.failed()
                countDownTimer(600)
                x = tgn_hdl.traffic_control(action='run',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not x.status:
                    self.failed()
                countDownTimer(20)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg1 = '''interface {0}
                              no shutdown'''.format(interface)
                    hdl.configure(cfg1)

                    countDownTimer(100)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    else:
                        log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()
                else:
                    log.error('Traffic loss was expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()

            else:
                log.error('Traffic initial flow is NOT as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()  
                                        
                                                                                   
class VXLANL3TRMFUNC094(aetest.Testcase):

    """ External RP - External RP Change """

    uid = 'VXLAN-L3-TRM-FUNC-094'

    @aetest.test
    def externalRPChange(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= configdict['trigger_dict']['pim-rp-change']['affected_duts']
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))
                previous_rp_config = {}
                for uut in configdict['trigger_dict']['pim-rp-change']:
                    if 'uut' in uut:
                        vrf_name = configdict['trigger_dict']['pim-rp-change'][uut]['vrf']
                        cfg = 'show run vrf {0} | grep rp'.format(vrf_name)
                        out = node_dict['all_dut'][uut].execute(cfg)
                        previous_rp_config[uut] = {}
                        previous_rp_config[uut]['config'] = out
                        group = out.split(' ')[-1]
                        previous_rp_config[uut]['group'] = group
                        
                log.info('The value of previous_rp_config is : {0}'.format(previous_rp_config))

                log.info('The value of receiver is : {0}'.format(receiver))
                for rcv_port in receiver:
                    for ip in tg_interface_hdl_dict[TG][traffic_to_consider][rcv_port]:
                        pat = re.compile("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
                        log.info('the value of ip is : {0}'.format(ip))
                        test=pat.match(ip)
                        if test:
                            log.info('The value of ip is : {0}'.format(ip))
                            log.info('The value of i is : {0}'.format(i))
                            try:
                                a = tg_interface_hdl_dict[TG][traffic_to_consider][rcv_port][ip]['session_handle']
                            except:
                                log.info('The value of a is :{0}'.format(a))
                            o=tgn_hdl.emulation_igmp_control(mode='leave',group_member_handle=a)
                            
                            if not o.status:
                                log.info('IGMP leave is not sent to the group . Pls debug.....')
                                self.failed()
                        
                log.info('------------------Changing the RP on all the VTPEs----------------')
                
                for uut in configdict['trigger_dict']['pim-rp-change']:
                    if 'uut' in uut:
                        vrf_name = configdict['trigger_dict']['pim-rp-change'][uut]['vrf']
                        rp_address = configdict['trigger_dict']['pim-rp-change'][uut]['rp-address']
                        new_rp_conf = 'ip pim rp-address {0} group-list {1}'.format(rp_address,previous_rp_config[uut]['group'])
                        cfg1 = '''vrf context {0}
                                  no {1}
                                  ip pim rp-address {2} group-list {3}
                               '''.format(vrf_name,previous_rp_config[uut]['config'],rp_address,previous_rp_config[uut]['group'])
                        node_dict['all_dut'][uut].configure(cfg1)
                
                border_leaf_devices = []
                for device in testbed.devices:
                    if re.search('EXTERNAL',testbed.devices[device].type):
                        external_rp = testbed.devices[device].alias
                    if re.search('STAND',testbed.devices[device].type):
                        border_leaf_devices.append(testbed.devices[device].alias)
                
                log.info('The value of external_rp is : {0}'.format(external_rp))
                log.info('the value of border_leaf_devices is : {0}'.format(border_leaf_devices))
                ospf_process_id = "".join(list(configdict['ospfv2_config_dict'][external_rp].keys()))
                
                cfg = '''interface loopback 201
                         vrf member {0}
                         ip address {1}/32
                         ip ospf dead-interval 4
                         ip ospf hello-interval 1
                         ip router ospf {2} area 0.0.0.0
                         ip pim sparse-mode'''.format(vrf_name,rp_address,ospf_process_id)
                node_dict['all_dut'][external_rp].configure(cfg)
                
                for i in border_leaf_devices:
                    try:
                        d = list(configdict['bgp_config_dict'][i].keys())
                        for j in d:
                            bgp_as_no = j
                    except:
                        a = configdict['bgp_config_dict'][i].keys()
                        log.info('The type of a is : {0}'.format(a))
                        log.info('the value of list(a is {0}'.format(list(a)))
                        log.info('the value of str of a is {0}'.format(str(list(a))))
                    bgp_cfg = '''router bgp {0}
                                 vrf {1}
                                 address-family ipv4 unicast
                                 network {2}/32'''.format(bgp_as_no,vrf_name,rp_address)
                    node_dict['all_dut'][i].configure(bgp_cfg)

                
                y = tgn_hdl.traffic_control(action='stop',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not y.status:
                    self.failed()
                    
                countDownTimer(600)
                x = tgn_hdl.traffic_control(action='run',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not x.status:
                    self.failed()
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                # for k,v in res['rx_breakup'].items():
                #     if not k in affected_port:
                #         exp_trf += v
                # log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                log.info('Value of res: {0}'.format(res))
                # log.info('Value of exp_trf: {0}'.format(exp_trf))
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected check check Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    for rcv_port in receiver:
                        for ip in tg_interface_hdl_dict[TG][traffic_to_consider][rcv_port]:
                            log.info('the value of ip is : {0}'.format(ip))
                            test=pat.match(ip)
                            if test:
                                log.info('The value of ip is : {0}'.format(ip))
                                log.info('The value of tg_interface_hdl_dict[TG] is {0}'.format(tg_interface_hdl_dict[TG]))
                                log.info('The value of tg_interface_hdl_dict[TG][traffic_to_consider] is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider])) 
                                try:
                                    a = tg_interface_hdl_dict[TG][traffic_to_consider][rcv_port][ip]['session_handle']
                                except:
                                    log.info('The value of a is :{0}'.format(a))
                                    log.info('Sending Join ######## ')
                                o=tgn_hdl.emulation_igmp_control(mode='join',group_member_handle=a)
                                if not o.status:
                                    log.info('IGMP leave is not sent to the group . Pls debug.....')
                                    self.failed()
                    
                    countDownTimer(40)
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                    log.info('The value of res is : {0}'.format(res))

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after changing the RP is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        
                        cfg = 'no interface loopback 201'
                        node_dict['all_dut'][external_rp].configure(cfg)
                        
                        
                        cfg = 'show run vrf {0} | grep rp'.format(vrf_name)
                        out = node_dict['all_dut'][external_rp].execute(cfg)
                        
                        for uut in configdict['trigger_dict']['pim-rp-change']:
                            if 'uut' in uut:
                                cfg = '''vrf context {0}
                                         no {1}
                                         {2}'''.format(vrf_name,out,previous_rp_config[uut]['config'])
                                node_dict['all_dut'][uut].configure(cfg)
   
                    else:
                        log.error('Traffic loss after changing the RP is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()
                else:
                    log.error('Traffic loss was expected as Recivers are not there. but The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()                
            else:
                log.error('Traffic Initial flow is not as expected..The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()                    
                
                
class VXLANL3TRMFUNC095(aetest.Testcase):

    """ External RP - Vlan State Change in BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-095'

    @aetest.test
    def vlanStateChangeonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        dut = "".join(list(configdict['trigger_dict']['change_vlan_state']['BorderLeaf1'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= dut
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        b.remove(affected_port)
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl =  node_dict['all_dut'][dut]
                
                a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf1'][dut]['vlans']
                ns = parseChangeVlanStateTrigger(log,a)  
                if ns.no_of_vlans_to_shut > 1:
                    for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                        cfg = '''vlan {0}
                                 shutdown'''.format(j)
                        node_dict['all_dut'][dut].configure(cfg)
                if ns.no_of_vlans_to_shut == 1:
                    cfg = '''vlan {0}
                             shutdown'''.format(ns.vlan_start)
                    node_dict['all_dut'][dut].configure(cfg)
                
                countDownTimer(60)
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf1'][dut]['vlans']
                    ns = parseChangeVlanStateTrigger(log,a)  
                    if ns.no_of_vlans_to_shut > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            cfg = '''vlan {0}
                                     no shutdown'''.format(j)
                            node_dict['all_dut'][dut].configure(cfg)
                    if ns.no_of_vlans_to_shut == 1:
                        cfg = '''vlan {0}
                                 no shutdown'''.format(ns.vlan_start)
                        node_dict['all_dut'][dut].configure(cfg)
                        
                    countDownTimer(60)
                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf1'][dut]['vlans']
                        ns = parseChangeVlanStateTrigger(log,a)  
                        if ns.no_of_vlans_to_shut > 1:
                            for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                                cfg = '''vlan {0}
                                         no shutdown'''.format(j)
                                node_dict['all_dut'][dut].configure(cfg)
                        if ns.no_of_vlans_to_shut == 1:
                            cfg = '''vlan {0}
                                     no shutdown'''.format(ns.vlan_start)
                            node_dict['all_dut'][dut].configure(cfg)
                        countDownTimer(60)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf1'][dut]['vlans']
                    ns = parseChangeVlanStateTrigger(log,a)  
                    if ns.no_of_vlans_to_shut > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            cfg = '''vlan {0}
                                     no shutdown'''.format(j)
                            node_dict['all_dut'][dut].configure(cfg)
                    if ns.no_of_vlans_to_shut == 1:
                        cfg = '''vlan {0}
                                 no shutdown'''.format(ns.vlan_start)
                        node_dict['all_dut'][dut].configure(cfg)
                    countDownTimer(60)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
                

class VXLANL3TRMFUNC096(aetest.Testcase):

    """ External RP - Vlan State Change in BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-096'

    @aetest.test
    def vlanStateChangeonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        dut = "".join(list(configdict['trigger_dict']['change_vlan_state']['BorderLeaf2'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= dut
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        b.remove(affected_port)
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl =  node_dict['all_dut'][dut]
                
                a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf2'][dut]['vlans']
                ns = parseChangeVlanStateTrigger(log,a)  
                if ns.no_of_vlans_to_shut > 1:
                    for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                        cfg = '''vlan {0}
                                 shutdown'''.format(j)
                        node_dict['all_dut'][dut].configure(cfg)
                if ns.no_of_vlans_to_shut == 1:
                    cfg = '''vlan {0}
                             shutdown'''.format(ns.vlan_start)
                    node_dict['all_dut'][dut].configure(cfg)
                
                countDownTimer(60)
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    log.info(banner('Value of k is : {0} and v is : {1}'.format(k,v)))
                    if not k == affected_port:
                        exp_trf += v
                        log.info('The value of exp_traffic is : {0} and port is : {1}'.format(exp_trf, v))
                log.info('The Final value of exp_traffic is : {0}'.format(exp_trf))
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf2'][dut]['vlans']
                    ns = parseChangeVlanStateTrigger(log,a)  
                    if ns.no_of_vlans_to_shut > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            cfg = '''vlan {0}
                                     no shutdown'''.format(j)
                            node_dict['all_dut'][dut].configure(cfg)
                    if ns.no_of_vlans_to_shut == 1:
                        cfg = '''vlan {0}
                                 no shutdown'''.format(ns.vlan_start)
                        node_dict['all_dut'][dut].configure(cfg)
                        
                    countDownTimer(120)
                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf2'][dut]['vlans']
                        ns = parseChangeVlanStateTrigger(log,a)  
                        if ns.no_of_vlans_to_shut > 1:
                            for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                                cfg = '''vlan {0}
                                         no shutdown'''.format(j)
                                node_dict['all_dut'][dut].configure(cfg)
                        if ns.no_of_vlans_to_shut == 1:
                            cfg = '''vlan {0}
                                     no shutdown'''.format(ns.vlan_start)
                            node_dict['all_dut'][dut].configure(cfg)
                        countDownTimer(60)
                        self.failed()
                        

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    a = configdict['trigger_dict']['change_vlan_state']['BorderLeaf2'][dut]['vlans']
                    ns = parseChangeVlanStateTrigger(log,a)  
                    if ns.no_of_vlans_to_shut > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            cfg = '''vlan {0}
                                     no shutdown'''.format(j)
                            node_dict['all_dut'][dut].configure(cfg)
                    if ns.no_of_vlans_to_shut == 1:
                        cfg = '''vlan {0}
                                 no shutdown'''.format(ns.vlan_start)
                        node_dict['all_dut'][dut].configure(cfg)
                    countDownTimer(60)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
                

class VXLANL3TRMFUNC097(aetest.Testcase):

    """ External RP - Vlan Removal in BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-097'

    @aetest.test
    def vlanRemovalonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        dut = "".join(list(configdict['trigger_dict']['vlan_removal']['BorderLeaf1'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= dut
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        b.remove(affected_port)
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl =  node_dict['all_dut'][dut]
                
                chk_pt_removal = 'no checkpoint c1'
                chk_pt_creation = 'checkpoint c1'
                rollback_cfg ='rollback running-config checkpoint c1 verbose'
                
                hdl.execute(chk_pt_removal)
                countDownTimer(30)
                hdl.configure(chk_pt_creation)
                
                vlan_list = configdict['trigger_dict']['vlan_removal']['BorderLeaf1'][dut]['vlans']
                
                if isinstance(vlan_list, list):
                    for vlan in vlan_list:
                        cfg = 'no vlan {0}'.format(vlan)
                        hdl.configure(cfg)
                
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                log.info('The value of res is : {0}'.format(res))
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    hdl.execute(rollback_cfg)
                    countDownTimer(100)
                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        a = configdict['trigger_dict']['vlan_removal']['BorderLeaf1'][dut]['vlans']
                        ns = parseChangeVlanStateTrigger(log,a)  
                        if ns.no_of_vlans_to_shut > 1:
                            for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                                cfg = '''vlan {0}
                                         no shutdown'''.format(j)
                                node_dict['all_dut'][dut].configure(cfg)
                        if ns.no_of_vlans_to_shut == 1:
                            cfg = '''vlan {0}
                                     no shutdown'''.format(ns.vlan_start)
                            node_dict['all_dut'][dut].configure(cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    a = configdict['trigger_dict']['vlan_removal']['BorderLeaf1'][dut]['vlans']
                    ns = parseChangeVlanStateTrigger(log,a)  
                    if ns.no_of_vlans_to_shut > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            cfg = '''vlan {0}
                                     no shutdown'''.format(j)
                            node_dict['all_dut'][dut].configure(cfg)
                    if ns.no_of_vlans_to_shut == 1:
                        cfg = '''vlan {0}
                                 no shutdown'''.format(ns.vlan_start)
                        node_dict['all_dut'][dut].configure(cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()


class VXLANL3TRMFUNC098(aetest.Testcase):

    """ External RP - Vlan State Change in BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-098'

    @aetest.test
    def vlanRemovalonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        dut = "".join(list(configdict['trigger_dict']['vlan_removal']['BorderLeaf2'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        affected_dut= dut
        
        affected_port = port_handle_dict[tgn_port_dut_mapping[dut]]
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        b.remove(affected_port)
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl =  node_dict['all_dut'][dut]
                
                chk_pt_removal = 'no checkpoint c1'
                chk_pt_creation = 'checkpoint c1'
                rollback_cfg ='rollback running-config checkpoint c1 verbose'
                
                hdl.execute(chk_pt_removal)
                time.sleep(30)
                hdl.configure(chk_pt_creation)
                
                vlan_list = configdict['trigger_dict']['vlan_removal']['BorderLeaf2'][dut]['vlans']
                
                if isinstance(vlan_list, list):
                    for vlan in vlan_list:
                        cfg = 'no vlan {0}'.format(vlan)
                        hdl.configure(cfg)
                
                countDownTimer(30)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                log.info('The value of res is : {0}'.format(res))
                
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k == affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    hdl.execute(rollback_cfg)
                    countDownTimer(100)
                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.execute(rollback_cfg)
                        countDownTimer(60)
                        self.failed()
                        

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.execute(rollback_cfg)
                    countDownTimer(60)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
                
class VXLANL3TRMFUNC099(aetest.Testcase):

    """ External RP - L2 VNI Change on Both BL-1 and BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-099'

    @aetest.test
    def l2VNIChangeonAllDUTS(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= []
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                
                
                chk_pt_removal = 'no checkpoint c1'
                chk_pt_creation = 'checkpoint c1'
                rollback_cfg ='rollback running-config checkpoint c1 verbose'
                
                for dut in configdict['trigger_dict']['modify_l2vni_mapping']:
                    
                    node_dict['all_dut'][dut].configure(chk_pt_removal)
                    node_dict['all_dut'][dut].configure(chk_pt_creation)
                    
                    d = configdict['trigger_dict']['modify_l2vni_mapping'][dut]['vlans']
                    ns = parseModifyVNIMapping(log,d)
                    if ns.no_of_vlans_to_modify > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            vni_start = ns.vni_start + i
                            cfg = '''vlan {0}
                                     no vn-segment
                                     vn-segment'''.format(j,vni_start)
                            evpn_cfg = '''epvn
                                       vni {0} l2
                                       rd {1}
                                       route-target import {2}
                                       route-target export {3}
                                       '''.format(vni_start,ns.l2_vni_rd,ns.l2_vni_rt_import,ns.l2_vni_rt_export)
                            vlan_cmd = 'show run vlan {0}'.format(ns.vlan_start)
                            out = node_dict['all_dut'][dut].execute(vlan_cmd)
                            log.info('the value of out is :{0}'.format(out))
                            for i in out.splitlines():
                                if 'vn-segment' in i:
                                    old_vni = i.split(' ')[-1]
                                    log.info('The value of old_vni is : {0}'.format(old_vni))
                            nve_cmd = 'sh run int nve 1 | grep ' + str(old_vni)
                            log.info('the value of nve_cmd is :{0}'.format(nve_cmd))
                            out1=node_dict['all_dut'][dut].execute(nve_cmd)
                            log.info('the value of out is :{0}'.format(out1))
                            e=out1.replace(old_vni,vni_start)
                            log.info('The value of e is : {0}'.format(e))
                            nve_cfg = '''interface nve1
                                         {0}'''.format(e)
                            node_dict['all_dut'][dut].configure(nve_cfg)
                            node_dict['all_dut'][dut].configure(cfg)
                            node_dict['all_dut'][dut].configure(evpn_cfg)
                    if ns.no_of_vlans_to_modify == 1:
                        cfg = '''vlan {0}
                                 no vn-segment
                                 vn-segment {1}'''.format(ns.vlan_start,ns.vni_start)
                        evpn_cfg = '''evpn
                                   vni {0} l2
                                   rd {1}
                                   route-target import {2}
                                   route-target export {3}
                                   '''.format(ns.vni_start,ns.l2_vni_rd,ns.l2_vni_rt_import,ns.l2_vni_rt_export)
                        vlan_cmd = 'show run vlan {0}'.format(ns.vlan_start)
                        out = node_dict['all_dut'][dut].execute(vlan_cmd)
                        log.info('the value of out is :{0}'.format(out))
                        for i in out.splitlines():
                            if 'vn-segment' in i:
                                old_vni = i.split(' ')[-1]
                                log.info('The value of old_vni is : {0}'.format(old_vni))
                        nve_cmd = 'sh run int nve 1 | grep ' + str(old_vni)
                        log.info('the value of nve_cmd is :{0}'.format(nve_cmd)) 
                        out1=node_dict['all_dut'][dut].execute(nve_cmd)
                        log.info('the value of out is :{0}'.format(out1))
                        e=out1.replace(str(old_vni),str(ns.vni_start))
                        log.info('The value of e is : {0}'.format(e))
                        nve_cfg = '''interface nve1
                                     {0}'''.format(e)
                        node_dict['all_dut'][dut].configure(nve_cfg)
                        node_dict['all_dut'][dut].configure(cfg)
                        node_dict['all_dut'][dut].configure(evpn_cfg)
            
                y = tgn_hdl.traffic_control(action='stop',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not y.status:
                    self.failed()
                    
                countDownTimer(600)
                x = tgn_hdl.traffic_control(action='run',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not x.status:
                    self.failed()
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    for dut in configdict['trigger_dict']['modify_l2vni_mapping']:
                        node_dict['all_dut'][dut].configure(rollback_cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        for dut in configdict['trigger_dict']['modify_l2vni_mapping']:
                            node_dict['all_dut'][dut].configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    for dut in configdict['trigger_dict']['modify_l2vni_mapping']:
                        node_dict['all_dut'][dut].configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
                
 
class VXLANL3TRMFUNC100(aetest.Testcase):

    """ External RP - L2 VNI MCAST Change on Both BL-1 and BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-100'

    @aetest.test
    def l2VNIChangeonAllDUTS(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        affected_dut= []
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                
                
                chk_pt_removal = 'no checkpoint c1'
                chk_pt_creation = 'checkpoint c1'
                rollback_cfg ='rollback running-config checkpoint c1 verbose'
                
                for dut in configdict['trigger_dict']['modify_l2vni_mcast']:
                    
                    node_dict['all_dut'][dut].execute(chk_pt_removal)
                    node_dict['all_dut'][dut].configure(chk_pt_creation)
                    
                    d = configdict['trigger_dict']['modify_l2vni_mcast'][dut]['vlans']
                    ns = parseModifyL2VNIMcastMapping(log,d)
                    log.info('The value of ns is : {0}'.format(ns))
                    if ns.no_of_vlans_to_modify > 1:
                        for i,j in enumerate(range(ns.vlan_start,ns.vlan_start+no_of_vlans_to_shut)):
                            vni_start = ns.vni_start + i
                            vlan_cmd = 'show run vlan {0}'.format(ns.vlan_start)
                            out = node_dict['all_dut'][dut].execute(vlan_cmd)
                            log.info('the value of out is :{0}'.format(out))
                            for i in out.splitlines():
                                if 'vn-segment' in i:
                                    vni = i.split(' ')[-1]
                                    log.info('The value of old_vni is : {0}'.format(vni))
                            nve_cmd = 'sh run int nve 1 | grep ' + str(vni)
                            log.info('the value of nve_cmd is :{0}'.format(nve_cmd))
                            old_nve_cfg=node_dict['all_dut'][dut].execute(nve_cmd)
                            log.info('the value of out is :{0}'.format(old_nve_cfg))
                            new_nve_cfg = 'member vni {0} mcast-group {1}'.format(vni,ns.new_mcast_group)
                            log.info('The value of new_nve_cfg is : {0}'.format(new_nve_cfg))
                            nve_cfg = '''interface nve1
                                         no {0}
                                         {1}'''.format(old_nve_cfg,new_nve_cfg)
                            node_dict['all_dut'][dut].configure(nve_cfg)
                    if ns.no_of_vlans_to_modify == 1:
                        vlan_cmd = 'show run vlan {0}'.format(ns.vlan_start)
                        out = node_dict['all_dut'][dut].execute(vlan_cmd)
                        log.info('the value of out is :{0}'.format(out))
                        for i in out.splitlines():
                            if 'vn-segment' in i:
                                vni = i.split(' ')[-1]
                                log.info('The value of old_vni is : {0}'.format(vni))
                        nve_cmd = 'sh run int nve 1 | grep ' + str(vni)
                        log.info('the value of nve_cmd is :{0}'.format(nve_cmd))
                        old_nve_cfg=node_dict['all_dut'][dut].execute(nve_cmd)
                        log.info('the value of out is :{0}'.format(old_nve_cfg))
                        new_nve_cfg = 'member vni {0} mcast-group {1}'.format(vni,ns.new_mcast_group)
                        log.info('The value of new_nve_cfg is : {0}'.format(new_nve_cfg))
                        nve_cfg = '''interface nve1
                                     no {0}
                                     {1}'''.format(old_nve_cfg,new_nve_cfg)
                        node_dict['all_dut'][dut].configure(nve_cfg)
                                        
                y = tgn_hdl.traffic_control(action='stop',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not y.status:
                    self.failed()
                    
                countDownTimer(600)
                x = tgn_hdl.traffic_control(action='run',handle=traffic_stream_dict[traffic_to_consider]['traffic_item'])
                if not x.status:
                    self.failed()
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic is as expected .. The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    for dut in configdict['trigger_dict']['modify_l2vni_mapping']:
                        node_dict['all_dut'][dut].configure(rollback_cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        node_dict['all_dut'][dut].configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    node_dict['all_dut'][dut].configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
                

class VXLANL3TRMFUNC101(aetest.Testcase):

    """ External RP - Flap NVE interface on BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-101'

    @aetest.test
    def flapNVEInterfaceonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['nve_removal'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                
                cfg = '''interface nve1
                         shutdown'''
                hdl.configure(cfg)
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic flow is as expected....... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    cfg = '''interface nve1
                             no shutdown'''
                    hdl.configure(cfg)
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = '''interface nve1
                                 no shutdown'''
                        hdl.configure(cfg)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = '''interface nve1
                             no shutdown'''
                    hdl.configure(cfg)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 
 

class VXLANL3TRMFUNC102(aetest.Testcase):

    """ External RP - Flap NVE interface on BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-102'

    @aetest.test
    def flapNVEInterfaceonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['nve_removal'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                
                cfg = '''interface nve1
                         shutdown'''
                hdl.configure(cfg)
                countDownTimer(60)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    cfg = '''interface nve1
                             no shutdown'''
                    hdl.configure(cfg)
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg = '''interface nve1
                                 no shutdown'''
                        hdl.configure(cfg)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg = '''interface nve1
                             no shutdown'''
                    hdl.configure(cfg)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 

class VXLANL3TRMFUNC103(aetest.Testcase):

    """ External RP - Change NVE Source interface IP on BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-103'

    @aetest.test
    def changeNveSourceInterfaceIPonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_ip_change'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                try:
                    hdl.execute(a)
                    hdl.execute(b)
                except:
                    hdl.execute(b)
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_ip_change'][dut]['loopback'])
                ospf_params = parseOSPFInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_ip_change'][dut]['ospf'])
                pim_params = parsePimInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_ip_change'][dut]['pim'])
                log.info('the value of loopback_params is : {0}'.format(loopback_params))
                cfg= ''
                if loopback_params.id == 0:
                    cfg = cfg + 'interface loopback {0}'.format(loopback_params.id) + '\n' 
                if loopback_params.ip_addr:
                    cfg = cfg + 'no ip address' + '\n' + 'ip address {0}'.format(loopback_params.ip_addr) + '\n' 
                if loopback_params.ip_addr_sec:
                    cfg = cfg + 'ip address {0} secondary'.format(loopback_params.ip_addr_sec) + '\n' 
                if ospf_params.process:
                    cfg = cfg + 'ip router ospf {0} area 0.0.0.0 '.format(ospf_params.process) + '\n'
                if pim_params.state:
                    cfg = cfg + 'ip pim sparse-mode' + '\n'
                log.info('The value of cfg is: {0}'.format(cfg)) 
                
                cfg1 = '''interface nve 1
                          shutdown
                       '''
                hdl.configure(cfg1)
                hdl.configure(cfg)
                cfg2 = '''interface nve 1
                          no shutdown
                       '''
                hdl.configure(cfg2)
                
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    

                    
                    hdl.configure(rollback_cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


 
class VXLANL3TRMFUNC104(aetest.Testcase):

    """ External RP - Change NVE Source interface IP on BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-104'

    @aetest.test
    def changeNveSourceInterfaceIPonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_ip_change'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                try:
                    hdl.execute(a)
                    hdl.execute(b)
                except:
                    hdl.execute(b)
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_ip_change'][dut]['loopback'])
                ospf_params = parseOSPFInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_ip_change'][dut]['ospf'])
                pim_params = parsePimInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_ip_change'][dut]['pim'])
                log.info('the value of loopback_params is : {0}'.format(loopback_params))
                cfg= ''
                if loopback_params.id == 0:
                    cfg = cfg + 'interface loopback {0}'.format(loopback_params.id) + '\n' 
                if loopback_params.ip_addr:
                    cfg = cfg + 'no ip address' + '\n' + 'ip address {0}'.format(loopback_params.ip_addr) + '\n' 
                if loopback_params.ip_addr_sec:
                    cfg = cfg + 'ip address {0} secondary'.format(loopback_params.ip_addr_sec) + '\n' 
                if ospf_params.process:
                    cfg = cfg + 'ip router ospf {0} area 0.0.0.0 '.format(ospf_params.process) + '\n'
                if pim_params.state:
                    cfg = cfg + 'ip pim sparse-mode' + '\n'
                log.info('The value of cfg is: {0}'.format(cfg)) 
                
                cfg1 = '''interface nve 1
                          shutdown
                       '''
                hdl.configure(cfg1)
                hdl.configure(cfg)
                cfg2 = '''interface nve 1
                          no shutdown
                       '''
                hdl.configure(cfg2)
                
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
#                 exp_trf= 0
#                 for k,v in res['rx_breakup'].items():
#                     if not k in affected_port:
#                         exp_trf += v
#                 log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(res['total_tx'] - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    

                    
                    hdl.configure(rollback_cfg)
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 
 

class VXLANL3TRMFUNC105(aetest.Testcase):

    """ External RP - Change NVE Source interface  on BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-105'

    @aetest.test
    def changeNveSourceInterfaceonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_change'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                try:
                    hdl.execute(a)
                    hdl.execute(b)
                except:
                    hdl.execute(b)
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_change'][dut]['loopback'])
                ospf_params = parseOSPFInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_change'][dut]['ospf'])
                pim_params = parsePimInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_change'][dut]['pim'])
                log.info('the value of loopback_params is : {0}'.format(loopback_params))
                cfg= ''
                if loopback_params.id:
                    cfg = cfg + 'interface loopback {0}'.format(loopback_params.id) + '\n' 
                if loopback_params.ip_addr:
                    cfg = cfg + 'no ip address' + '\n' + 'ip address {0}'.format(loopback_params.ip_addr) + '\n' 
                if loopback_params.ip_addr_sec:
                    cfg = cfg + 'ip address {0} secondary'.format(loopback_params.ip_addr_sec) + '\n' 
                if ospf_params.process:
                    cfg = cfg + 'ip router ospf {0} area 0.0.0.0 '.format(ospf_params.process) + '\n'
                if pim_params.state:
                    cfg = cfg + 'ip pim sparse-mode' + '\n'
                log.info('The value of cfg is: {0}'.format(cfg)) 
                
                cfg1 = '''interface nve 1
                          shutdown
                          no source-interface
                       '''
                hdl.configure(cfg1)
                hdl.configure(cfg)
                cfg2 = '''interface nve 1
                          source-interface loopback {0}
                          no shutdown
                       '''.format(loopback_params.id)
                hdl.configure(cfg2)
                
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic  is as expected...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg3 = '''interface nve 1
                              shutdown
                              no source-interface
                              source-interface loopback 0
                              no shutdown
                            '''
                    hdl.configure(cfg3)
#                     countDownTimer(5)
#                     hdl.configure(rollback_cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg3 = '''interface nve 1
                                  shutdown
                                  no source-interface
                                  source-interface loopback 0
                                  no shutdown
                                '''
                        hdl.configure(cfg3)
                        countDownTimer(100)
#                         hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg3 = '''interface nve 1
                              shutdown
                              no source-interface
                              source-interface loopback 0
                              no shutdown
                            '''
                    hdl.configure(cfg3)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()

class VXLANL3TRMFUNC106(aetest.Testcase):

    """ External RP - Change NVE Source interface  on BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-106'

    @aetest.test
    def changeNveSourceInterfaceonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_change'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                try:
                    hdl.execute(a)
                    hdl.execute(b)
                except:
                    hdl.execute(b)
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_change'][dut]['loopback'])
                ospf_params = parseOSPFInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_change'][dut]['ospf'])
                pim_params = parsePimInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_change'][dut]['pim'])
                log.info('the value of loopback_params is : {0}'.format(loopback_params))
                cfg= ''
                if loopback_params.id:
                    cfg = cfg + 'interface loopback {0}'.format(loopback_params.id) + '\n' 
                if loopback_params.ip_addr:
                    cfg = cfg + 'no ip address' + '\n' + 'ip address {0}'.format(loopback_params.ip_addr) + '\n' 
                if loopback_params.ip_addr_sec:
                    cfg = cfg + 'ip address {0} secondary'.format(loopback_params.ip_addr_sec) + '\n' 
                if ospf_params.process:
                    cfg = cfg + 'ip router ospf {0} area 0.0.0.0 '.format(ospf_params.process) + '\n'
                if pim_params.state:
                    cfg = cfg + 'ip pim sparse-mode' + '\n'
                log.info('The value of cfg is: {0}'.format(cfg)) 
                
                cfg1 = '''interface nve 1
                          shutdown
                          no source-interface
                       '''
                hdl.configure(cfg1)
                hdl.configure(cfg)
                cfg2 = '''interface nve 1
                          source-interface loopback {0}
                          no shutdown
                       '''.format(loopback_params.id)
                hdl.configure(cfg2)
                
                countDownTimer(60)
                
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    cfg3 = '''interface nve 1
                              shutdown
                              no source-interface
                              source-interface loopback 0
                              no shutdown
                            '''
                    hdl.configure(cfg3)                     
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        cfg3 = '''interface nve 1
                                  shutdown
                                  no source-interface
                                  source-interface loopback 0
                                  no shutdown
                                '''
                        hdl.configure(cfg3)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    cfg3 = '''interface nve 1
                              shutdown
                              no source-interface
                              source-interface loopback 0
                              no shutdown
                            '''
                    hdl.configure(cfg3)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed()
               
class VXLANL3TRMFUNC107(aetest.Testcase):

    """ External RP - Flap NVE Source interface on BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-107'

    @aetest.test
    def flapNVESourceInterfaceonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_flap'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_ip_change'][dut]['loopback'])
                cfg = '''interface loopback {0}
                         shutdown'''.format(loopback_params.id)
                hdl.configure(cfg)
                countDownTimer(30)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    cfg = '''interface loopback {0}
                             no shutdown'''
                    
                    hdl.configure(cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 
 
 
class VXLANL3TRMFUNC108(aetest.Testcase):

    """ External RP - Flap NVE Source interface on BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-108'

    @aetest.test
    def flapNVESourceInterfaceonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_flap'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                hdl = node_dict['all_dut'][dut]
                loopback_params = parseLoopbackInPSourceIpChange(log,configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['source_intf_ip_change'][dut]['loopback'])
                cfg = '''interface loopback {0}
                         shutdown'''.format(loopback_params.id)
                hdl.configure(cfg)
                countDownTimer(30)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic loss is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    cfg = '''interface loopback {0}
                             no shutdown'''.format(loopback_params.id)
                    
                    hdl.configure(cfg)
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC109(aetest.Testcase):

    """ External RP - Change Uplink to SVI and Flap - BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-109'

    @aetest.test
    def changeUplinkToSVIandFlapOnBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['source_intf_flap'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                
                for dut in list(configdict['trigger_dict']['vpc_trigger_dict']['modify_uplink']['vpc'].keys()):
                    try:
                        node_dict['all_dut'][dut].execute(a)
                        node_dict['all_dut'][dut].execute(b)
                    except:
                        node_dict['all_dut'][dut].execute(b)
                    
                    for svi in configdict['trigger_dict']['vpc_trigger_dict']['modify_uplink']['vpc'][dut]['svi']:
                        args = configdict['trigger_dict']['vpc_trigger_dict']['modify_uplink']['vpc'][dut]['svi'][svi]
                        ns = parseModifyUplinkSVI(log,args)
                        log.info('The value of ns is: {0}'.format(ns))
                        d = re.search('vlan([\d]+)',svi)
                        if d:
                            vlan_no = d.group(1)
                        vlan_config = 'vlan {0}'.format(vlan_no)
                        node_dict['all_dut'][dut].configure(vlan_config)
                        intf_cfg = '''interface {0}
                                 shutdown'''.format(ns.member_list) + '\n'
                        svi_cfg = '''interface vlan {0}
                                  no shut'''.format(vlan_no) + '\n'
                        if ns.member_list:
                            def_cfg = 'default interface {0}'.format(ns.member_list)
                            node_dict['all_dut'][dut].configure(def_cfg)

                        if ns.mode:
                            intf_cfg += 'switchport' + '\n'
                        if ns.switchportmode:
                            intf_cfg += 'switchport mode {0}'.format(ns.switchportmode) + '\n'
                        if ns.allowed_vlan_list:
                            intf_cfg += 'switchport trunk allowed vlan {0}'.format(ns.allowed_vlan_list) + '\n'
                        if ns.ip_addr:
                            svi_cfg +=  'ip address {0}'.format(ns.ip_addr) + '\n'
                        if ns.ipv6_addr:
                            svi_cfg += 'ipv6 address {0}'.format(ns.ipv6_addr) + '\n'
                        if ns.ospf_process:
                            svi_cfg += 'ip router ospf {0} area 0.0.0.0'.format(ns.ospf_process) + '\n'
                        if ns.ospf_hello:
                            svi_cfg += 'ip ospf hello {0}'.format(ns.ospf_hello) + '\n'
                        if ns.ospf_dead:
                            svi_cfg += 'ip ospf dead {0}'.format(ns.ospf_dead) + '\n'
                        if ns.pim_state:
                            svi_cfg += 'ip pim sparse-mode' + '\n'
                        log.info('The value of Intf config is : {0}'.format(intf_cfg))
                        log.info('The value of SVI config is : {0}'.format(svi_cfg))
                        node_dict['all_dut'][dut].configure(intf_cfg)
                        node_dict['all_dut'][dut].configure(svi_cfg)
               
                countDownTimer(30)
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    for dut in list(configdict['trigger_dict']['vpc_trigger_dict']['modify_uplink']['vpc'].keys()):
                    
                        node_dict['all_dut'][dut].configure(rollback_cfg)
                    
                        
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        for dut in list(configdict['trigger_dict']['vpc_trigger_dict']['modify_uplink']['vpc'].keys()):
                            node_dict['all_dut'][dut].configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC110(aetest.Testcase):

    """ External RP - L3VNI VRF-Flap - BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-110'

    @aetest.test
    def l3VniVRFFlaponBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_vrf_trigger'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                
                
                hdl = node_dict['all_dut'][dut]
                vrf_name = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_vrf_trigger'][dut]['vrf']
                
                log.info('The value of vrf_name is : {0}'.format(vrf_name))
                for vrf in vrf_name:
                    cfg = '''vrf context {0}
                             shutdown'''.format(vrf)
                    hdl.configure(cfg)
                countDownTimer(600)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    for vrf in vrf_name:
                        cfg = '''vrf context {0}
                                 no shutdown'''.format(vrf)
                             
                        hdl.configure(cfg)
                    
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        for vrf in vrf_name:
                            cfg = '''vrf context {0}
                                     no shutdown'''.format(vrf)  
                            hdl.configure(cfg)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    for vrf in vrf_name:
                        cfg = '''vrf context {0}
                                 no shutdown'''.format(vrf)
                             
                        hdl.configure(cfg)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 

class VXLANL3TRMFUNC111(aetest.Testcase):

    """ External RP - L3VNI VRF-Flap - BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-111'

    @aetest.test
    def l3VniVRFFlaponBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_vrf_trigger'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                

                hdl = node_dict['all_dut'][dut]
                vrf_name = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_vrf_trigger'][dut]['vrf']
                
                log.info('The value of vrf_name is : {0}'.format(vrf_name))
                for vrf in vrf_name:
                    cfg = '''vrf context {0}
                             shutdown'''.format(vrf)
                    hdl.configure(cfg)
                countDownTimer(600)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    for vrf in vrf_name:
                        cfg = '''vrf context {0}
                                 no shutdown'''.format(vrf)
                        hdl.configure(cfg)
                    
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        for vrf in vrf_name:
                            cfg = '''vrf context {0}
                                     no shutdown'''.format(vrf)
                            hdl.configure(cfg)
                        countDownTimer(100)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    for vrf in vrf_name:
                        cfg = '''vrf context {0}
                                 no shutdown'''.format(vrf)
                        hdl.configure(cfg)
                    countDownTimer(100)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC112(aetest.Testcase):

    """ External RP - Nve Interface Removal- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-112'

    @aetest.test
    def nveInterfaceRemovalOnBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['nve_removal'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                
                
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                
                cfg = 'no interface nve 1'
                hdl.configure(cfg)
                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since Nve Is removed are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                             
                    hdl.configure(rollback_cfg)
                    
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC113(aetest.Testcase):

    """ External RP - Nve Interface Removal- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-113'

    @aetest.test
    def nveInterfaceRemovalOnBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['nve_removal'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
                
                
                hdl = node_dict['all_dut'][dut]
                hdl.execute(a)
                hdl.execute(b)
                
                
                cfg = 'no interface nve 1'
                hdl.configure(cfg)
                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                             
                    hdl.configure(rollback_cfg)
                    
                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC114(aetest.Testcase):

    """ External RP - L3 VNI SVI SHut on- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-114'

    @aetest.test
    def l3VNISviShutonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.execute(a)
                hdl.execute(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = '''interface vlan {0}
                             shutdown'''.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected ...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    for vlan in vlan_list:
                        cfg = '''interface vlan {0}
                                 no shutdown'''.format(vlan)
                        hdl.configure(cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC115(aetest.Testcase):

    """ External RP - L3 VNI SVI SHut on- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-115'

    @aetest.test
    def l3VNISviShutonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = '''interface vlan {0}
                             shutdown'''.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    for vlan in vlan_list:
                        cfg = '''interface vlan {0}
                                 no shutdown'''.format(vlan)
                        hdl.configure(cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 

class VXLANL3TRMFUNC116(aetest.Testcase):

    """ External RP - L3 VNI SVI Remove on- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-116'

    @aetest.test
    def l3VNISviRemoveonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = 'no interface vlan {0}'.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC117(aetest.Testcase):

    """ External RP - L3 VNI SVI Remove on- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-117'

    @aetest.test
    def l3VNISviRemoveonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= []
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = 'no interface vlan {0}'.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 



class VXLANL3TRMFUNC118(aetest.Testcase):

    """ External RP - L3 VNI SVI VRF Remove on- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-118'

    @aetest.test
    def l3VNIVRFRemoveonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_vrf_trigger'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vrf_name_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_vrf_trigger'][dut]['vrf']
                for vrf_name in vrf_name_list:
                    cfg = 'no vrf context {0}'.format(vrf_name)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 

class VXLANL3TRMFUNC119(aetest.Testcase):

    """ External RP - L3 VNI SVI VRF Remove on- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-119'

    @aetest.test
    def l3VNIVRFRemoveonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_vrf_trigger'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vrf_name_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_vrf_trigger'][dut]['vrf']
                for vrf_name in vrf_name_list:
                    cfg = 'no vrf context {0}'.format(vrf_name)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 



class VXLANL3TRMFUNC120(aetest.Testcase):

    """ External RP - L2 VNI SVI SHut on- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-120'

    @aetest.test
    def l2VNISviShutonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L2VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = '''interface vlan {0}
                             shutdown'''.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    for vlan in vlan_list:
                        cfg = '''interface vlan {0}
                                 no shutdown'''.format(vlan)
                        hdl.configure(cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 


class VXLANL3TRMFUNC121(aetest.Testcase):

    """ External RP - L2 VNI SVI SHut on- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-121'

    @aetest.test
    def l2VNISviShutonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L3VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L2VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = '''interface vlan {0}
                             shutdown'''.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    
                    for vlan in vlan_list:
                        cfg = '''interface vlan {0}
                                 no shutdown'''.format(vlan)
                        hdl.configure(cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 



class VXLANL3TRMFUNC122(aetest.Testcase):

    """ External RP - L2 VNI SVI Remove and Add on- BL-1"""

    uid = 'VXLAN-L3-TRM-FUNC-122'

    @aetest.test
    def l2VNISviRemoveAndReaddonBL1(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        res = [node_dict['all_dut'][dut].execute('show version') for dut in node_dict['all_dut'] if re.search('uut', dut)]
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L2VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf1']['L2VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = 'no interface vlan {0}'.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    

                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        hdl.configure(rollback_cfg)
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    hdl.configure(rollback_cfg)
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 

class VXLANL3TRMFUNC123(aetest.Testcase):

    """ External RP - L2 VNI SVI Remove and Add on- BL-2"""

    uid = 'VXLAN-L3-TRM-FUNC-123'

    @aetest.test
    def l2VNISviRemoveAndReaddonBL2(self,log,testscript,testbed):
#         standalone_vtep_dict = testscript.parameters['standalone_vtep_dict']
        tg_interface_hdl_dict = testscript.parameters['tg_interface_hdl_dict'] 
        traffic_stream_dict = testscript.parameters['traffic_stream_dict'] 
        port_handle_dict = testscript.parameters['port_handle_dict']
#         TGList_config_file = testscript.parameters['TGList']
        configdict = testscript.parameters['configdict'] 
        tgn_config_dict = configdict['TG']
        threshold = testscript.parameters['traffic_threshold']
        node_dict = testscript.parameters['node_dict']
#         spine_dict = testscript.parameters['spine_dict']  
#         vpc_vtep_dict = testscript.parameters['vpc_vtep_dict']
#         all_tg_dict = testscript.parameters['all_tg_dict'] 
#         all_dut_dict = testscript.parameters['all_dut_dict'] 
#         l2_switch_dict = testscript.parameters['l2_switch_dict']
#         vtep_dict = testscript.parameters['vtep_dict']
        tgn_port_dut_mapping = testscript.parameters['tgn_port_dut_mapping']
        
        
        traffic_to_consider = 'TRF099'
        stream_name = traffic_stream_dict[traffic_to_consider]['stream_id']
        source = traffic_stream_dict[traffic_to_consider]['source']
        receiver = traffic_stream_dict[traffic_to_consider]['destination']
        
        sender_port = []
        receiver_port = []
        
        dut = "".join(list(configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L2VNI_Svi_Shut'].keys()))
        log.info('The value of dut is : {0}'.format(dut))
        
        dut_alias = testbed.devices.aliases
        log.info('The value of dut_alias is : {0}'.format(dut_alias))
        
        
        log.info('The type of dut is : {0}'.format(type(dut)))
        affected_dut= dut.split(" ")
        log.info('The value of affected_dut is : {0}'.format(affected_dut))
        
        affected_port = []
        for i in affected_dut:
            log.info('The value of i is {0} : '.format(i))
            log.info('the value of tgn_port_dut_mapping is : {0}'.format(tgn_port_dut_mapping))
            log.info('The value of tgn_port_dut_mapping[i] is {0}'.format(tgn_port_dut_mapping[i]))
            affected_port.append(port_handle_dict[tgn_port_dut_mapping[i]])
        
        b = unaffected_port = []
        
        for i in receiver:
            b.append(port_handle_dict[i])
        
        for i in affected_port:
            
            b.remove(i)
            log.info('The value of b now is : {0}'.format(b))
        
        unaffected_port = b
        
        log.info('the value of afffected port is : {0}'.format(affected_port))
        
        log.info('The value of unaffected_ports is : {0}'.format(unaffected_port))     
        
        
        for TG in tgn_config_dict.keys():
            tgn_hdl = testscript.parameters['testbed_obj'].devices[TG]
            for i in source:
                sender_port.append(port_handle_dict[i])
            for j in receiver:
                receiver_port.append(port_handle_dict[j])
                
            res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
            log.info('The value of res is : {0}'.format(res))
            
            if abs(res['total_tx']-res['total_rx']) <= threshold:
                log.info('Traffic initial flow is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                
                log.info('The value of tg_interface_hdl_dict is : {0}'.format(tg_interface_hdl_dict[TG][traffic_to_consider]))  
                
                a = 'no checkpoint c1'
                b = 'checkpoint c1'
                rollback_cfg='rollback running-config checkpoint c1 verbose'
            
                hdl = node_dict['all_dut'][dut]
                hdl.configure(a)
                hdl.configure(b)
                
                vlan_list = configdict['trigger_dict']['BorderLeaf_trigger']['BorderLeaf2']['L2VNI_Svi_Shut'][dut]['vlans']
                for vlan in vlan_list:
                    cfg = 'no interface vlan {0}'.format(vlan)
                    hdl.configure(cfg)

                countDownTimer(100)
                    
                res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)
                 
                exp_trf= 0
                for k,v in res['rx_breakup'].items():
                    if not k in affected_port:
                        exp_trf += v
                log.info('The value of exp_traffic is : {0}'.format(exp_trf))
                 
                if abs(exp_trf - res['total_rx']) <= threshold:
                    log.info('Traffic Flow is as expected Since receivers are not there...... The value of tx is {0} and Rx is {1}'.format(res['total_tx'],res['total_rx']))
                    
                    

                    hdl.configure(rollback_cfg)

                    countDownTimer(100)

                    
                    res = getStatsStatus(log,tgn_hdl,threshold,stream_name,sender_port,receiver_port)

                    if abs(res['total_tx']-res['total_rx']) <= threshold:
                        log.info('Traffic  flow after bringing up the vlan  is as expected.. The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    
                    else:
                        log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                        log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                        log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                        self.failed()

                else:
                    log.error('Traffic loss  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                    log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                    log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                    self.failed()
                
            else:
                log.error('Traffic Initial flow  is not as expected The value of tx is {0} and rx is {1}'.format(res['total_tx'],res['total_rx']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                log.info('The value of Tx Breakup is : {0}'.format(res['tx_breakup']))
                log.info('The value of Rx Breakup is : {0}'.format(res['rx_breakup']))
                log.info('-------------------------------------------------------------------------------------------------------------------------------------------')
                self.failed() 



class CommonCleanup(aetest.Testcase):
    
    """ VLan State Change on Both the DUTS """

    uid = 'VXLAN-L3-TRM-FUNC-001'

    @aetest.subsection
    def checkTopo(self):
        pass
        
        
class CommonCleanup(aetest.CommonCleanup):

    @aetest.subsection
    def disconnect(self):
        pass

