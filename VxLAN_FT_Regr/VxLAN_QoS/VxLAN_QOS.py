#!/usr/bin/env python

###################################################################
###                  Importing Libraries                        ###
###################################################################
import logging
import time
import yaml
import sys
import ipaddress as ip
import re
import json
import pdb

from yaml import Loader
from pyats import aetest
from pyats.log.utils import banner

log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)

import unicon.statemachine.statemachine
from unicon.eal.dialogs import Statement, Dialog

tcl_dependencies = [
 '/auto/dc3-india/script_repository/IXIA_9.10/lib/PythonApi',
 '/auto/dc3-india/script_repository/IXIA_9.10/lib/TclApi/IxTclProtocol',
 '/auto/dc3-india/script_repository/IXIA_9.10/lib/TclApi/IxTclNetwork'
 ]
from ixiatcl import IxiaTcl 
from ixiahlt import IxiaHlt
from ixiangpf import IxiaNgpf
from ixiaerror import IxiaError

ixiatcl = IxiaTcl(tcl_autopath=tcl_dependencies)
ixiahlt = IxiaHlt(ixiatcl)
ixiangpf = IxiaNgpf(ixiahlt)

# ------------------------------------------------------
# Import and initialize EVPN specific libraries
# ------------------------------------------------------
from VxLAN_PYlib import vxlanEVPN_FNL_lib
evpnLib     = vxlanEVPN_FNL_lib.configure39KVxlanEvpn()
verifyEvpn  = vxlanEVPN_FNL_lib.verifyEVPNconfiguration()

# ------------------------------------------------------
# Import and initialize IXIA specific libraries
# ------------------------------------------------------
from VxLAN_PYlib import ixiaPyats_lib
ixLib = ixiaPyats_lib.ixiaPyats_lib()


# ------------------------------------------------------
# Import and initialize INFRA specific libraries
# ------------------------------------------------------
from VxLAN_PYlib import infra_lib
infraTrig = infra_lib.infraTrigger()
infraConfig = infra_lib.infraConfigure()
infraVerify = infra_lib.infraVerify()

#-------------------------------------------------------
#Import tcam libraries
#-------------------------------------------------------
# import tcam_lib


class ForkedPdb(pdb.Pdb):
   """A Pdb subclass that may be used
   from a forked multiprocessing child
   """

   def interaction(self, *args, **kwargs):
       _stdin = sys.stdin
       try:
           sys.stdin = open('/dev/stdin')
           pdb.Pdb.interaction(self, *args, **kwargs)
       finally:
           sys.stdin = _stdin

###Declare global variables
#global stream_id
stream_id = ''
###################################################################
###                  User Library Methods                       ###
###################################################################

def increment_prefix_network(pref, count):
    size = 1 << (pref.network.max_prefixlen - pref.network.prefixlen)
    pref_lst = []
    for i in range(count):
        pref_lst.append(str((pref.ip+size*i)) + "/" + str(pref.network.prefixlen))
    return pref_lst

def verifyDevicePingsForIxiaTraffic(testscript):

    forwardingSysDict = testscript.parameters['forwardingSysDict']
    vrf_id = forwardingSysDict['VRF_id_start']
    l2_vlan_ipv4_start =  testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_ipv4_start']
    l2_vlan_ipv4_mask = testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_ipv4_mask']

    # ----------------------------------------------------
    # LEAF-1 Counter Variables
    # ----------------------------------------------------
    l3_vrf_count_iter = 0
    l2_vlan_count_iter = 0
    ip_index = 0

    total_ip_count = int(forwardingSysDict['VLAN_PER_VRF_count']) * int(forwardingSysDict['VRF_count'])
    l2_ipv4s = increment_prefix_network(ip.IPv4Interface(str(l2_vlan_ipv4_start) + str(l2_vlan_ipv4_mask)),total_ip_count)

    while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
        while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

            testscript.parameters['LEAF-1'].configure('''ping '''+str(l2_ipv4s[ip_index])+''' vrf '''+'EVPN-VRF-'+str(vrf_id))
            testscript.parameters['LEAF-2'].configure('''ping '''+str(l2_ipv4s[ip_index])+''' vrf '''+'EVPN-VRF-'+str(vrf_id))
            testscript.parameters['LEAF-3'].configure('''ping '''+str(l2_ipv4s[ip_index])+''' vrf '''+'EVPN-VRF-'+str(vrf_id))

            l2_vlan_count_iter += 1
        l3_vrf_count_iter += 1
        vrf_id += 1

def verify_dscp(output,dscp,dscpcode):
    m=re.search('.*DSCP\s(0x[0-9a-z]+)*',output)
    if m:
            if m.group(1)==dscp:
                log.info("traffic has valid dscp. Test passed.")
                return 1
            
    else:
            n=re.search('.*DSCP:\s([A-Z]+[0-9]+|[A-Z]+)',output)
            #hexcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
            if n:
                     log.info("match found")
                     if n.group(1)==dscpcode:
                         log.info("traffic has valid dscp. Test passed.")
                         return 1
    return 0

def verify_queing_for_traffic(LEAF, LEAF_dict, qos_group):
    
    LEAF.execute('clear qos statistics')
    time.sleep(20)
    fail_flag = []
    status = ''
    po_members_lst = []
    po_members_str = ''

    uplink_po_members_json = json.loads(LEAF.execute('show port-ch sum interface po'+str(LEAF_dict['SPINE_1_UPLINK_PO']['po_id'])+' | json'))['TABLE_channel']['ROW_channel']['TABLE_member']['ROW_member']
    # If there are multiple links in uplink PO
    if type(uplink_po_members_json) == list:
        # First get the interfaces
        for i in range(len(uplink_po_members_json)):
            po_members_lst.append(str(uplink_po_members_json[i]['port']))
            po_members_str+=str(uplink_po_members_json[i]['port'])
            if i < len(uplink_po_members_json):
                po_members_str+=','
        # Check the queue
        for intf in uplink_po_members_json:
            # Shut other ints
            for int_port in po_members_lst:
                if intf['port'] != int_port:
                    LEAF.configure('''
                        interface '''+str(int_port)+'''
                            shut
                    ''', timeout=600)
            time.sleep(10)
            # Verify traffic path
            output=LEAF.execute('sh queuing tabular interface '+str(intf['port'])+' | json-pretty')        
            a=json.loads(output)
            pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0][qos_group]
            if pkts == '0':
                log.info("For UP-link Interface "+str(intf['port'])+" : traffic not egressing out of qos_group_2")
                status += "\nFor UP-link Interface "+str(intf['port'])+" : traffic not egressing out of qos_group_2"
                fail_flag.append(0)
            else:
                log.info("For UP-link Interface "+str(intf['port'])+" : traffic taking right queue")
                status += "\nFor UP-link Interface "+str(intf['port'])+" : traffic taking right queue"
            # No-Shut other ints
            for int_port in po_members_lst:
                if intf['port'] != int_port:
                    LEAF.configure('''
                        interface '''+str(int_port)+'''
                            no shut
                    ''', timeout=600)
            time.sleep(10)
    # If there is single interface in uplink PO
    elif type(uplink_po_members_json) == dict:
        intf = str(uplink_po_members_json['port'])
        # Verify traffic path
        output=LEAF.execute('sh queuing tabular interface '+str(intf)+' | json-pretty')        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("For UP-link Interface "+str(intf)+" : traffic not egressing out of qos_group_2")
            status += "\nFor UP-link Interface "+str(intf)+" : traffic not egressing out of qos_group_2"
            fail_flag.append(0)
        else:
            log.info("For UP-link Interface "+str(intf)+" : traffic taking right queue")
            status += "\nFor UP-link Interface "+str(intf)+" : traffic taking right queue"
    
    if 0 in fail_flag:
        return {'result' : 0, 'status_msgs' : status}
    else:
        return {'result' : 1, 'status_msgs' : status}

###################################################################
###                  GLOBAL VARIABLES                           ###
###################################################################

device_list     = []
post_test_process_dict = {}

###################################################################
###                  COMMON SETUP SECTION                       ###
###################################################################

# Configure and setup all devices and test equipment in this section.
# This should represent the BASE CONFIGURATION that is applicable
# for the bunch of test cases that would follow.

class COMMON_SETUP(aetest.CommonSetup):
    """ Common Setup """

    @aetest.subsection
    def connecting_to_devices(self, testscript, testbed, uut_list):
        """ common setup subsection: Connecting to devices """


        # Grab the device object of the uut device with that name
        SPINE = testscript.parameters['SPINE'] = testbed.devices[uut_list['SPINE']]

        LEAF_1 = testscript.parameters['LEAF-1'] = testbed.devices[uut_list['LEAF-1']]
        LEAF_2 = testscript.parameters['LEAF-2'] = testbed.devices[uut_list['LEAF-2']]
        LEAF_3 = testscript.parameters['LEAF-3'] = testbed.devices[uut_list['LEAF-3']]

        FAN_1 = testscript.parameters['FAN-1'] = testbed.devices[uut_list['FAN-1']]

        IXIA = testscript.parameters['IXIA'] = testbed.devices[uut_list['ixia']]

        testscript.parameters['ixia_chassis_ip'] = str(IXIA.connections.a.ip)
        testscript.parameters['ixia_tcl_server'] = str(IXIA.connections.alt.ip)
        testscript.parameters['ixia_tcl_port'] = str(IXIA.connections.alt.port)


        # Connect to the device
        SPINE.connect()
        LEAF_1.connect()
        LEAF_2.connect()
        LEAF_3.connect()
        FAN_1.connect()

        device_list.append(SPINE)
        device_list.append(LEAF_1)
        device_list.append(LEAF_2)
        device_list.append(LEAF_3)
        device_list.append(FAN_1)


        # Make sure that the connection went fine
        for dut in device_list:
            if not hasattr(dut, 'execute'):
                self.failed()

            if dut.execute != dut.connectionmgr.default.execute:
                self.failed()

        print(aetest.runtime.uids)
        log.info(aetest.runtime.uids)
        # time.sleep(30)

    # *****************************************************************************************************************************#
    @aetest.subsection
    def set_script_flags(self, testscript, configurationFile, job_file_params):


        # Import script_flags into testscript.parameters
        # Setting up the Post Test Check Parameters
        global post_test_process_dict
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        log.info(job_file_params)
        if 'script_flags' not in job_file_params.keys():
            script_flags = {}
            testscript.parameters['script_flags'] = {}
        else:
            script_flags = job_file_params['script_flags']
            script_flags = job_file_params['script_flags']
            testscript.parameters['script_flags'] = job_file_params['script_flags']

        if script_flags is not None:
            if 'skip_device_config' in script_flags.keys():
                testscript.parameters['script_flags']['skip_device_config'] = script_flags['skip_device_config']
            else:
                testscript.parameters['script_flags']['skip_device_config'] = 0

            if 'skip_tgen_config' in script_flags.keys():
                testscript.parameters['script_flags']['skip_tgen_config'] = script_flags['skip_tgen_config']
            else:
                testscript.parameters['script_flags']['skip_tgen_config'] = 0

            if 'skip_device_cleanup' in script_flags.keys():
                testscript.parameters['script_flags']['skip_device_cleanup'] = script_flags['skip_device_cleanup']
            else:
                testscript.parameters['script_flags']['skip_device_cleanup'] = 0
            if 'eor_flag' in script_flags.keys():
                testscript.parameters['script_flags']['eor_flag'] = script_flags['skip_device_cleanup']
            else:
                testscript.parameters['script_flags']['eor_flag'] = 0
            if 'skip_eor_triggers' in script_flags.keys():
                testscript.parameters['script_flags']['skip_eor_triggers'] = script_flags['skip_eor_triggers']
            else:
                testscript.parameters['script_flags']['skip_eor_triggers'] = 1
        else:
            testscript.parameters['script_flags']['skip_device_config'] = 0
            testscript.parameters['script_flags']['skip_tgen_config'] = 0
            testscript.parameters['script_flags']['skip_device_cleanup'] = 0
            testscript.parameters['script_flags']['eor_flag'] = 0

        post_test_process_dict = {}
        post_test_process_dict = job_file_params['postTestArgs']
        post_test_process_dict['dut_list'] = [LEAF_1, LEAF_2, LEAF_3]
        log.info("===> Post Test Check Process Parameters")
        log.info(post_test_process_dict)

        # Flags to control pre-clean, config and EOR Trigger test-cases
        resn = "Skipped by the user via job file"
        log.info(resn)
        if testscript.parameters['script_flags']['skip_device_config']:
            aetest.skip.affix(section=DEVICE_BRINGUP_enable_feature_set, reason=resn)
            aetest.skip.affix(section=DEVICE_BRINGUP_configure_SPINE, reason=resn)
            aetest.skip.affix(section=DEVICE_BRINGUP_configure_LEAF_1_2, reason=resn)
            aetest.skip.affix(section=DEVICE_BRINGUP_configure_LEAF_3, reason=resn)
            aetest.skip.affix(section=DEVICE_BRINGUP_configure_FAN, reason=resn)
        if testscript.parameters['script_flags']['skip_eor_triggers']:
            pass
            # aetest.skip.affix(section=TC042_vxlan_vpc_leaf1_LC_reload, reason=resn)
            # aetest.skip.affix(section=TC043_vxlan_vpc_leaf2_LC_reload, reason=resn)
            # aetest.skip.affix(section=TC044_vxlan_leaf3_LC_reload, reason=resn)
            # aetest.skip.affix(section=TC045_vxlan_vpc_leaf1_FM_all_reload, reason=resn)
            # aetest.skip.affix(section=TC046_vxlan_vpc_leaf2_FM_all_reload, reason=resn)
            # aetest.skip.affix(section=TC047_vxlan_leaf3_FM_all_reload, reason=resn)
            # aetest.skip.affix(section=TC048_vxlan_vpc_leaf1_SC_all_reload, reason=resn)
            # aetest.skip.affix(section=TC049_vxlan_vpc_leaf2_SC_all_reload, reason=resn)
            # aetest.skip.affix(section=TC050_vxlan_leaf3_SC_all_reload, reason=resn)
            # aetest.skip.affix(section=TC051_vxlan_vpc_leaf1_SSO, reason=resn)
            # aetest.skip.affix(section=TC052_vxlan_vpc_leaf2_SSO, reason=resn)
            # aetest.skip.affix(section=TC053_vxlan_leaf3_SSO, reason=resn)


        # Import Configuration File and create required Structures

        with open(configurationFile) as cfgFile:
            configuration = yaml.load(cfgFile, Loader=Loader)

        testscript.parameters['LEAF_1_dict']            = configuration['LEAF_1_dict']
        testscript.parameters['LEAF_2_dict']            = configuration['LEAF_2_dict']
        testscript.parameters['LEAF_3_dict']            = configuration['LEAF_3_dict']
        testscript.parameters['SPINE_1_dict']            = configuration['SPINE_1_dict']
        testscript.parameters['forwardingSysDict']      = configuration['FWD_SYS_dict']

        testscript.parameters['LEAF_2_TGEN_dict']       = configuration['LEAF_2_TGEN_data']
        testscript.parameters['LEAF_3_TGEN_dict']       = configuration['LEAF_3_TGEN_data']

        testscript.parameters['leafVPCDictData']        = {LEAF_1 : configuration['LEAF_1_dict'], LEAF_2 : configuration['LEAF_2_dict']}
        testscript.parameters['leavesDictList']         = [configuration['LEAF_1_dict'], configuration['LEAF_2_dict'], configuration['LEAF_3_dict']]
        testscript.parameters['leavesDict']             = {LEAF_1 : configuration['LEAF_1_dict'],
                                                           LEAF_2 : configuration['LEAF_2_dict'],
                                                           LEAF_3 : configuration['LEAF_3_dict']}
        testscript.parameters['tcam_config_dict']       = configuration['tcam_config_dict']

        testscript.parameters['VTEP_List'] = [testscript.parameters['LEAF_1_dict'], testscript.parameters['LEAF_2_dict'], testscript.parameters['LEAF_3_dict']]

    # *****************************************************************************************************************************#

    @aetest.subsection
    def get_interfaces(self, testscript):
        """ common setup subsection: Getting required Connections for Test """

        SPINE = testscript.parameters['SPINE']
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        FAN_1 = testscript.parameters['FAN-1']
        IXIA = testscript.parameters['IXIA']



        log.info("================================================")
        log.info("All Available Interfaces from the YAML file are:")
        for dut in device_list:
            log.info("\n\n--->" + str(dut) + " Interface list")
            for interface in dut.interfaces.keys():
                log.info(str(interface) + " --> " + str(dut.interfaces[interface].intf))


        # Fetching the specific interfaces
        testscript.parameters['intf_SPINE_to_LEAF_1']       = SPINE.interfaces['SPINE_to_LEAF-1_1'].intf
        testscript.parameters['intf_SPINE_to_LEAF_2']       = SPINE.interfaces['SPINE_to_LEAF-2_1'].intf
        testscript.parameters['intf_SPINE_to_LEAF_3']       = SPINE.interfaces['SPINE_to_LEAF-3_1'].intf

        testscript.parameters['intf_LEAF_1_to_LEAF_2_1']    = LEAF_1.interfaces['LEAF_to_PEER_KEEP_ALIVE'].intf
        testscript.parameters['intf_LEAF_1_to_LEAF_2_2']    = LEAF_1.interfaces['LEAF_to_MCT'].intf
        testscript.parameters['intf_LEAF_1_to_SPINE']       = LEAF_1.interfaces['LEAF_to_SPINE_1'].intf
        testscript.parameters['intf_LEAF_1_to_FAN_1']       = LEAF_1.interfaces['LEAF_to_FAN_1_1'].intf

        testscript.parameters['intf_LEAF_2_to_LEAF_1_1']    = LEAF_2.interfaces['LEAF_to_PEER_KEEP_ALIVE'].intf
        testscript.parameters['intf_LEAF_2_to_LEAF_1_2']    = LEAF_2.interfaces['LEAF_to_MCT'].intf
        testscript.parameters['intf_LEAF_2_to_SPINE']       = LEAF_2.interfaces['LEAF_to_SPINE_1'].intf
        testscript.parameters['intf_LEAF_2_to_FAN_1']       = LEAF_2.interfaces['LEAF_to_FAN_1_1'].intf

        testscript.parameters['intf_LEAF_3_to_SPINE']       = LEAF_3.interfaces['LEAF_to_SPINE_1'].intf

        testscript.parameters['intf_FAN_1_to_LEAF_1']       = FAN_1.interfaces['FAN_to_LEAF-1_1'].intf
        testscript.parameters['intf_FAN_1_to_LEAF_2']       = FAN_1.interfaces['FAN_to_LEAF-2_1'].intf

        testscript.parameters['intf_LEAF_3_to_IXIA']          = LEAF_3.interfaces['LEAF_to_IXIA'].intf
        testscript.parameters['intf_FAN_1_to_IXIA']           = FAN_1.interfaces['FAN_to_IXIA'].intf

        testscript.parameters['intf_IXIA_to_FAN_1']           = IXIA.interfaces['IXIA_to_FAN'].intf
        testscript.parameters['intf_IXIA_to_LEAF_3']          = IXIA.interfaces['IXIA_to_LEAF-3'].intf
         

        testscript.parameters['ixia_int_list'] = str(testscript.parameters['intf_IXIA_to_FAN_1']) + " " + str(testscript.parameters['intf_IXIA_to_LEAF_3'])


        log.info("\n\n================================================")
        log.info("Topology Specific Interfaces \n\n")
        for key in testscript.parameters.keys():
            if "intf_" in key:
                log.info("%-25s   ---> %-15s" % (key, testscript.parameters[key]))
        log.info("\n\n")


    # ==============================================================================================================================#
    # @aetest.subsection
    # def configureTCAM(self,testscript,testbed):
    # 
    #     #TCAM comfigurable DUTS are:
    #     testbed_obj = testbed
    #     tcam_configurable_duts = testscript.parameters['tcam_config_dict'].keys()
    #     log.info('{0} are the duts for which the tcam has to be carved'.format(tcam_configurable_duts))
    #     
    #     tcam_config_dict = testscript.parameters['tcam_config_dict']
    #     
    #     tcam_dut_obj_list = {}
    #     for dut in tcam_configurable_duts:
    #         tcam_dut_obj_list[dut] = testbed.devices[dut]
    #     
    #     
    #     log.info('The value of tcam_dut_obj_list is {0} '.format(tcam_dut_obj_list))
    #     
    #     
    #     d = tcam_lib.configTcam(tcam_config_dict,tcam_dut_obj_list,log)
    #     for dut in tcam_dut_obj_list.keys():
    #         tcam_dut_obj_list[dut].connect(via='console')
    #     res = d.Nodes(dut)
        
        
    # *****************************************************************************************************************************#

    @aetest.subsection
    def topology_used_for_suite(self):
        """ common setup subsection: Represent Topology """

        # Set topology to be used
        topology = """
        
                                            +-------------+
                                            |    SPINE    |
                                            +-------------+
                                           /       |      \\
                                          /        |       \\
                                         /         |        \\
                                        /          |         \\
                                       /           |          \\
                              +-----------+    +-----------+   +-----------+
                              |   LEAF-1  |====|   LEAF-2  |   |   LEAF-3  |
                              +-----------+    +-----------+   +-----------+
                                   \              /                  |
                                    \            /                   |
                                     \          /                   ixia
                                      \        /                           
                                    +-----------+     
                                    |   FAN     |     
                                    +-----------+     
                                         |
                                         |
                                        ixia    
        """

        log.info("Topology to be used is")
        log.info(topology)


# *****************************************************************************************************************************#
class DEVICE_BRINGUP_enable_feature_set(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def enable_feature_set(self, testscript):
        """ Device Bring-up subsection: Configuring Features and Feature-sets """

        # Do not perform configurations if skip_device_config flag is set
        if not testscript.parameters['script_flags']['skip_device_config']:

            leafLst                 = [testscript.parameters['LEAF-1'], testscript.parameters['LEAF-2'], testscript.parameters['LEAF-3']]
            spineFeatureList        = ['ospf', 'bgp', 'pim', 'lacp', 'nv overlay']
            vpcLeafFeatureList      = ['vpc', 'ospf', 'bgp', 'pim', 'interface-vlan', 'vn-segment-vlan-based', 'lacp', 'nv overlay']
            LeafFeatureList         = ['ospf', 'bgp', 'pim', 'interface-vlan', 'vn-segment-vlan-based', 'lacp', 'nv overlay']
            fanOutFeatureList       = ['lacp']
            configFeatureSet_status = []
            configFeatureSet_msgs = ""

            # --------------------------------
            # Configure Features on SPINE
            featureConfigureSpine_status = infraConfig.configureVerifyFeature(testscript.parameters['SPINE'], spineFeatureList)
            if featureConfigureSpine_status['result']:
                log.info("Passed Configuring features on SPINE")
            else:
                log.debug("Failed configuring features on SPINE")
                configFeatureSet_msgs += featureConfigureSpine_status['log']
                configFeatureSet_status.append(0)

            # --------------------------------
            featureConfigureLeaf1_status = infraConfig.configureVerifyFeature(testscript.parameters['LEAF-1'], vpcLeafFeatureList)
            if featureConfigureLeaf1_status['result']:
                log.info("Passed Configuring features on LEAF-1")
            else:
                log.debug("Failed configuring features on LEAF-1")
                configFeatureSet_msgs += featureConfigureLeaf1_status['log']
                configFeatureSet_status.append(0)

            # --------------------------------
            featureConfigureLeaf2_status = infraConfig.configureVerifyFeature(testscript.parameters['LEAF-2'], vpcLeafFeatureList)
            if featureConfigureLeaf2_status['result']:
                log.info("Passed Configuring features on LEAF-2")
            else:
                log.debug("Failed configuring features on LEAF-2")
                configFeatureSet_msgs += featureConfigureLeaf1_status['log']
                configFeatureSet_status.append(0)

            # --------------------------------
            featureConfigureLeaf3_status = infraConfig.configureVerifyFeature(testscript.parameters['LEAF-3'], LeafFeatureList)
            if featureConfigureLeaf3_status['result']:
                log.info("Passed Configuring features on LEAF-3")
            else:
                log.debug("Failed configuring features on LEAF-3")
                configFeatureSet_msgs += featureConfigureLeaf1_status['log']
                configFeatureSet_status.append(0)

            # --------------------------------
            # Configure Feature-set on FAN-1
            featureConfigureFan1_status = infraConfig.configureVerifyFeature(testscript.parameters['FAN-1'], fanOutFeatureList)
            if featureConfigureFan1_status['result']:
                log.info("Passed Configuring features on FAN-1")
            else:
                log.debug("Failed configuring features on FAN-1")
                configFeatureSet_msgs += featureConfigureFan1_status['log']
                configFeatureSet_status.append(0)

            if 0 in configFeatureSet_status:
                self.failed(reason=configFeatureSet_msgs, goto=['common_cleanup'])

        else:
            self.passed(reason="Skipped Device Configuration as per request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_configure_SPINE(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def configure_SPINE(self, testscript):
        """ Device Bring-up subsection: Configuring SPINE """

        SPINE = testscript.parameters['SPINE']
        evpnLib.configureEVPNSpines([testscript.parameters['SPINE']], testscript.parameters['forwardingSysDict'] , testscript.parameters['leavesDictList'])

        try:
            for interf in SPINE.interfaces.keys():
                if "SPINE_to_LEAF" in interf:
                    log.info("Interface picked up is "+ str(SPINE.interfaces[interf].intf) +" and corresponding PO ID is "+ str(SPINE.interfaces[interf].PO))
                    SPINE.configure('''
                        interface ''' + str(SPINE.interfaces[interf].intf) + '''
                            channel-group ''' + str(SPINE.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.failed('Exception occurred while configuring on SPINE', goto=['common_cleanup'])

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_configure_LEAF_1_2(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def configure_LEAF_1_2(self, testscript):
        """ Device Bring-up subsection: Configuring LEAF-1 """

        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        evpnLib.configureEVPNVPCLeafs(testscript.parameters['forwardingSysDict'], testscript.parameters['leafVPCDictData'])

        try:
            for interf in LEAF_1.interfaces.keys():
                if "LEAF_to_SPINE" in interf:
                    LEAF_1.configure('''
                        interface ''' + str(LEAF_1.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_1.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
                elif "LEAF_to_PEER_KEEP_ALIVE" in interf:
                    LEAF_1.configure('''
                        interface ''' + str(LEAF_1.interfaces[interf].intf) + '''
                            no switchport
                            vrf member ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['kp_al_vrf']) + '''
                            ip address ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['kp_al_ip']) + '''/24
                            no shutdown
                    ''')
                elif "LEAF_to_MCT" in interf:
                    LEAF_1.configure('''
                        interface ''' + str(LEAF_1.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_1.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
                elif "LEAF_to_FAN" in interf:
                    LEAF_1.configure('''
                        interface ''' + str(LEAF_1.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_1.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring on LEAF-1', goto=['common_cleanup'])

        try:
            for interf in LEAF_2.interfaces.keys():
                if "LEAF_to_SPINE" in interf:
                    LEAF_2.configure('''
                        interface ''' + str(LEAF_2.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_2.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
                elif "LEAF_to_PEER_KEEP_ALIVE" in interf:
                    LEAF_2.configure('''
                        interface ''' + str(LEAF_2.interfaces[interf].intf) + '''
                            no switchport
                            vrf member ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['kp_al_vrf']) + '''
                            ip address ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['kp_al_ip']) + '''/24
                            no shutdown
                    ''')
                elif "LEAF_to_MCT" in interf:
                    LEAF_2.configure('''
                        interface ''' + str(LEAF_2.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_2.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
                elif "LEAF_to_FAN" in interf:
                    LEAF_2.configure('''                 
                        interface ''' + str(LEAF_2.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_2.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring on LEAF-2', goto=['common_cleanup'])

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_configure_LEAF_3(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def configure_LEAF_3(self, testscript):
        """ Device Bring-up subsection: Configuring LEAF-3 """

        LEAF_3 = testscript.parameters['LEAF-3']
        evpnLib.configureEVPNLeaf(testscript.parameters['LEAF-3'], testscript.parameters['forwardingSysDict'], testscript.parameters['LEAF_3_dict'])

        try:
            for interf in LEAF_3.interfaces.keys():
                if "LEAF_to_SPINE" in interf:
                    LEAF_3.configure('''
                        interface ''' + str(LEAF_3.interfaces[interf].intf) + '''
                            channel-group ''' + str(LEAF_3.interfaces[interf].PO) + ''' force mode active
                            no shut
                    ''')
                elif "LEAF_to_IXIA" in interf:
                    LEAF_3.configure('''
                        interface ''' + str(LEAF_3.interfaces[interf].intf) + '''
                            switchport
                            switchport mode trunk
                            spanning-tree port type edge trunk
                            no shutdown
                    ''')

        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring on LEAF-3', goto=['common_cleanup'])

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_configure_FAN(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def configure_FAN_1(self, testscript):
        """ Device Bring-up subsection: Configuring FAN_1 """

        # Do not perform configurations if skip_device_config flag is set
        if not testscript.parameters['script_flags']['skip_device_config']:

            fanOut1_vlanConfiguration = ""
            FAN = testscript.parameters['FAN-1']

            l3_vrf_count_iter = 0
            l2_vlan_id = testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']
            l3_vlan_id = testscript.parameters['LEAF_1_dict']['VNI_data']['l3_vlan_start']

            while l3_vrf_count_iter < testscript.parameters['forwardingSysDict']['VRF_count']:
                l2_vlan_count_iter = 0
                fanOut1_vlanConfiguration += '''vlan ''' + str(l3_vlan_id) + '''\n
                                                state active\n
                                                no shut\n'''
                while l2_vlan_count_iter < testscript.parameters['forwardingSysDict']['VLAN_PER_VRF_count']:
                    # Incrementing L2 VLAN Iteration counters
                    fanOut1_vlanConfiguration += '''vlan ''' + str(l2_vlan_id) + '''\n
                                                    state active\n
                                                    no shut\n'''
                    l2_vlan_count_iter += 1
                    l2_vlan_id += 1
                # Incrementing L3 VRF Iteration counters
                l3_vrf_count_iter += 1
                l3_vlan_id += 1

            try:
                FAN.configure(fanOut1_vlanConfiguration)
                FAN.configure('''
                interface port-channel '''+str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po'])+'''
                    switchport
                    switchport mode trunk
                    no shutdown
                ''')
                
                for interf in FAN.interfaces.keys():
                    if "FAN_to_LEAF" in interf:
                        FAN.configure('''
                            interface ''' + str(FAN.interfaces[interf].intf) + '''
                                channel-group ''' + str(FAN.interfaces[interf].PO) + ''' force mode active
                                no shut
                        ''')
                    elif "FAN_to_IXIA" in interf:
                        FAN.configure('''
                            interface ''' + str(FAN.interfaces[interf].intf) + '''
                                switchport
                                switchport mode trunk
                                spanning-tree port type edge trunk
                                no shutdown
                        ''')

            except Exception as error:
                log.debug("Unable to configure - Encountered Exception " + str(error))
                self.errored('Exception occurred while configuring on FAN-1', goto=['common_cleanup'])
        
        else:
            self.passed(reason="Skipped Device Configurations as per Request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_ENABLE_L2_MCAST_CONFIGURATION(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def configure_igmp_querier(self, testscript):
        """ ENABLE_L2_TRM_CONFIGURATION test subsection: Configure IGMP Querier """

        forwardingSysDict = testscript.parameters['forwardingSysDict']

        # ----------------------------------------------------
        # LEAF-1 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        vrf_id = forwardingSysDict['VRF_id_start']
        l2_vlan_id = testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']

        # ----------------------------------------------------
        # Configuring on LEAF-1
        # ----------------------------------------------------
        testscript.parameters['LEAF-1'].configure("""
                                                  ip igmp snooping vxlan                                              
                                                  """)

        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:
                testscript.parameters['LEAF-1'].configure('''
                                                            vlan configuration ''' + str(l2_vlan_id) + '''
                                                              ip igmp snooping querier 1.1.1.1
                                                           
                                                        ''')
                l2_vlan_count_iter += 1
                l2_vlan_id += 1

            l3_vrf_count_iter += 1
            vrf_id += 1

        # ----------------------------------------------------
        # LEAF-2 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        vrf_id = forwardingSysDict['VRF_id_start']
        l2_vlan_id = testscript.parameters['LEAF_2_dict']['VNI_data']['l2_vlan_start']

        # ----------------------------------------------------
        # Configuring on LEAF-2
        # ----------------------------------------------------
        testscript.parameters['LEAF-2'].configure("""
                                                  ip igmp snooping vxlan                                              
                                                  """)

        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:
                testscript.parameters['LEAF-2'].configure('''
                                                            vlan configuration ''' + str(l2_vlan_id) + '''
                                                              ip igmp snooping querier 1.1.1.1
                                                              
                                                        ''')
                l2_vlan_count_iter += 1
                l2_vlan_id += 1

            l3_vrf_count_iter += 1
            vrf_id += 1

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        vrf_id = forwardingSysDict['VRF_id_start']
        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']

        # ----------------------------------------------------
        # Configuring on LEAF-3
        # ----------------------------------------------------
        testscript.parameters['LEAF-3'].configure("""
                                                  ip igmp snooping vxlan                                              
                                                  """)

        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:
                testscript.parameters['LEAF-3'].configure('''
                                                            vlan configuration ''' + str(l2_vlan_id) + '''
                                                              ip igmp snooping querier 1.1.1.1
                                                             
                                                        ''')
                l2_vlan_count_iter += 1
                l2_vlan_id += 1

            l3_vrf_count_iter += 1
            vrf_id += 1

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class DEVICE_BRINGUP_perform_copy_r_s(aetest.Testcase):
    """Device Bring-up Test-Case"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def perform_copy_r_s(self, testscript):
        """ ENABLE_L2_TRM_CONFIGURATION test subsection: Save all configurations (copy r s) """

        testscript.parameters['LEAF-1'].configure("copy r s", timeout=300)
        testscript.parameters['LEAF-2'].configure("copy r s", timeout=300)
        testscript.parameters['LEAF-3'].configure("copy r s", timeout=300)

        if not testscript.parameters['script_flags']['skip_device_config']:
            time.sleep(300)
        else:
            time.sleep(60)

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class VERIFY_NETWORK(aetest.Testcase):
    """This is description for my testcase one"""

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def verify_vpc(self, testscript):
        """ VERIFY_NETWORK subsection: Verify VPC """

        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']

        VPCStatus = infraVerify.verifyVPCStatus(LEAF_1, LEAF_2)

        if VPCStatus['result']:
            log.info(VPCStatus['log'])
            log.info("PASS : VPC Status for '" + str(LEAF_1) + "' and '" + str(LEAF_2) + "' is Successfully Verified\n\n")
        else:
            log.info(VPCStatus['log'])
            log.info("FAIL : VPC Status for '" + str(LEAF_1) + "' and '" + str(LEAF_2) + "' is Failed\n\n")
            self.failed()

    @aetest.test
    def verify_bgp_neighborship(self, testscript):
        """ VERIFY_NETWORK subsection: Verify SPINE BGP Neighborship """

        bgpSessionData = verifyEvpn.verifyEvpnUpLinkBGPSessions(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if bgpSessionData['result'] is 1:
            log.info("PASS : Successfully verified SPINE BGP Neighborship with Leaf's\n\n")
            self.passed(reason=bgpSessionData['log'])
        else:
            log.info("FAIL : Failed to verify SPINE BGP Neighborship with LEAF's\n\n")
            self.failed(reason=bgpSessionData['log'])

    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])

    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_CONNECT_IXIA_CHASSIS(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")    

    @aetest.test
    def CONNECT_IXIA_CHASSIS(self, testscript):
        

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            # Get IXIA paraameters
            ixia_chassis_ip = testscript.parameters['ixia_chassis_ip']
            ixia_tcl_server = testscript.parameters['ixia_tcl_server']
            ixia_tcl_port = testscript.parameters['ixia_tcl_port']
            ixia_int_list = testscript.parameters['ixia_int_list']

            ix_int_1 = testscript.parameters['intf_IXIA_to_FAN_1']
            ix_int_2 = testscript.parameters['intf_IXIA_to_LEAF_3']

            ixiaArgDict = {
                            'chassis_ip'    : ixia_chassis_ip,
                            'port_list'     : ixia_int_list,
                            'tcl_server'    : ixia_tcl_server,
                            'tcl_port'      : ixia_tcl_port
            }

            log.info("Ixia Args Dict is:")
            log.info(ixiaArgDict)

            result = ixLib.connect_to_ixia(ixiaArgDict)
            if result == 0:
                log.debug("Connecting to ixia failed")
                self.errored("Connecting to ixia failed", goto=['cleanup'])

            ch_key = result['port_handle']
            for ch_p in ixia_chassis_ip.split('.'):
                ch_key = ch_key[ch_p]

            log.info("Port Handles are:")
            log.info(ch_key)

            testscript.parameters['port_handle_1'] = ch_key[ix_int_1]
            testscript.parameters['port_handle_2'] = ch_key[ix_int_2]

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_CREATE_IXIA_TOPOLOGIES(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")    

    @aetest.test
    def CREATE_IXIA_TOPOLOGIES(self, testscript):
                
                                         
        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            TOPO_1_dict = {'topology_name': 'FAN-1-TG',
                           'device_grp_name': 'FAN-1-TG',
                           'port_handle': testscript.parameters['port_handle_1']}

            TOPO_2_dict = {'topology_name': 'LEAF-3-TG',
                           'device_grp_name': 'LEAF-3-TG',
                           'port_handle': testscript.parameters['port_handle_2']}

            testscript.parameters['IX_TP1'] = ixLib.create_topo_device_grp(TOPO_1_dict)
            if testscript.parameters['IX_TP1'] == 0:
                log.debug("Creating Topology failed")
                self.errored("Creating Topology failed", goto=['cleanup'])
            else:
                log.info("Created BL1-TG Topology Successfully")

            testscript.parameters['IX_TP2'] = ixLib.create_topo_device_grp(TOPO_2_dict)
            if testscript.parameters['IX_TP2'] == 0:
                log.debug("Creating Topology failed")
                self.errored("Creating Topology failed", goto=['cleanup'])
            else:
                log.info("Created BL2-TG Topology Successfully")

            testscript.parameters['IX_TP1']['port_handle'] = testscript.parameters['port_handle_1']
            testscript.parameters['IX_TP2']['port_handle'] = testscript.parameters['port_handle_2']
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_CONFIGURE_IXIA_INTERFACES(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")  

    @aetest.test
    def CONFIGURE_IXIA_INTERFACES(self, testscript):
        

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            P1 = testscript.parameters['port_handle_1']
            P2 = testscript.parameters['port_handle_2']

            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            P1_int_dict_1 = {'dev_grp_hndl': testscript.parameters['IX_TP1']['dev_grp_hndl'],
                             'port_hndl': P1,
                             'no_of_ints': P1_dict['no_of_ints'],
                             'phy_mode': P1_dict['phy_mode'],
                             'mac': P1_dict['mac'],
                             'mac_step': P1_dict['mac_step'],
                             'protocol': P1_dict['protocol'],
                             'v4_addr': P1_dict['v4_addr'],
                             'v4_addr_step': P1_dict['v4_addr_step'],
                             'v4_gateway': P1_dict['v4_addr_gateway'],
                             'v4_gateway_step': P1_dict['v4_gateway_step'],
                             'v4_netmask': P1_dict['netmask'],
                             'v6_addr': P1_dict['v6_addr'],
                             'v6_addr_step': P1_dict['v6_addr_step'],
                             'v6_gateway': P1_dict['v6_gateway'],
                             'v6_gateway_step': P1_dict['v6_gateway_step'],
                             'v6_netmask': P1_dict['v6_netmask'],
                             'vlan_id': P1_dict['vlan_id'],
                             'vlan_user_priority': P1_dict['vlan_user_priority'],
                             'vlan_id_step': P1_dict['vlan_id_step'],
                             'frame_size': P1_dict['frame_size'],
                             'L3_dst_addr': P1_dict['L3_dst_addr']}

            P2_int_dict_1 = {'dev_grp_hndl': testscript.parameters['IX_TP2']['dev_grp_hndl'],
                             'port_hndl': P2,
                             'no_of_ints': P2_dict['no_of_ints'],
                             'phy_mode': P2_dict['phy_mode'],
                             'mac': P2_dict['mac'],
                             'mac_step': P2_dict['mac_step'],
                             'protocol': P2_dict['protocol'],
                             'v4_addr': P2_dict['v4_addr'],
                             'v4_addr_step': P2_dict['v4_addr_step'],
                             'v4_gateway': P2_dict['v4_addr_gateway'],
                             'v4_gateway_step': P2_dict['v4_gateway_step'],
                             'v4_netmask': P2_dict['netmask'],
                             'v6_addr': P2_dict['v6_addr'],
                             'v6_addr_step': P2_dict['v6_addr_step'],
                             'v6_gateway': P2_dict['v6_gateway'],
                             'v6_gateway_step': P2_dict['v6_gateway_step'],
                             'v6_netmask': P2_dict['v6_netmask'],
                             'vlan_id': P2_dict['vlan_id'],
                             'vlan_user_priority': P1_dict['vlan_user_priority'],
                             'vlan_id_step': P2_dict['vlan_id_step'],
                             'frame_size': P2_dict['frame_size'],
                             'L3_dst_addr': P2_dict['L3_dst_addr']}

            P1_IX_int_data = ixLib.configure_multi_ixia_interface(P1_int_dict_1)
            P2_IX_int_data = ixLib.configure_multi_ixia_interface(P2_int_dict_1)

            if P1_IX_int_data == 0 or P2_IX_int_data == 0:
                log.debug("Configuring IXIA Interface failed")
                self.errored("Configuring IXIA Interface failed", goto=['cleanup'])
            else:
                log.info("Configured IXIA Interface Successfully")

            testscript.parameters['IX_TP1']['eth_handle'] = P1_IX_int_data['eth_handle']
            testscript.parameters['IX_TP1']['ipv4_handle'] = P1_IX_int_data['ipv4_handle']
            testscript.parameters['IX_TP1']['ipv6_handle'] = P1_IX_int_data['ipv6_handle']
            #testscript.parameters['IX_TP1']['port_handle'] = P1_IX_int_data['port_hndl']
            testscript.parameters['IX_TP1']['topo_int_handle'] = P1_IX_int_data['topo_int_handle'].split(" ")

            testscript.parameters['IX_TP2']['eth_handle'] = P2_IX_int_data['eth_handle']
            testscript.parameters['IX_TP2']['ipv4_handle'] = P2_IX_int_data['ipv4_handle']
            testscript.parameters['IX_TP2']['ipv6_handle'] = P2_IX_int_data['ipv6_handle']
            #testscript.parameters['IX_TP2']['port_handle'] = P2_IX_int_data['port_hndl']
            testscript.parameters['IX_TP2']['topo_int_handle'] = P2_IX_int_data['topo_int_handle'].split(" ")

            log.info("IXIA Port 1 Handles")
            log.info(testscript.parameters['IX_TP1'])
            log.info("IXIA Port 2 Handles")
            log.info(testscript.parameters['IX_TP2'])

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_CONFIGURE_IXIA_IGMP_GROUPS(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")  

    @aetest.test
    def CONFIGURE_IXIA_IGMP_GROUPS(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure IXIA IGMP Groups """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP2 = testscript.parameters['IX_TP2']
            P1_TGEN_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_TGEN_dict = testscript.parameters['LEAF_3_TGEN_dict']

            IGMP_dict_1 = {'ipv4_hndl': IX_TP2['ipv4_handle'],
                           'igmp_ver': P2_TGEN_dict['igmp_ver'],
                           'mcast_grp_ip': P2_TGEN_dict['mcast_grp_ip'],
                           'mcast_grp_ip_step': P2_TGEN_dict['mcast_grp_ip_step'],
                           'no_of_grps': P2_TGEN_dict['no_of_grps'],
                           'mcast_src_ip': P1_TGEN_dict['v4_addr'],
                           'mcast_src_ip_step': P2_TGEN_dict['v4_addr_step'],
                           'mcast_src_ip_step_per_port': P2_TGEN_dict['v4_addr_step'],
                           'mcast_grp_ip_step_per_port': P2_TGEN_dict['v4_addr_step'],
                           'mcast_no_of_srcs': P2_TGEN_dict['no_of_mcast_sources'],
                           'topology_handle': IX_TP2['topo_hndl']
                           }

            IGMP_EML = ixLib.emulate_igmp_groupHost(IGMP_dict_1)

            if IGMP_EML == 0:
                log.debug("Configuring IGMP failed")
                self.errored("Configuring IGMP failed")
            else:
                log.info("Configured IGMP Successfully")

            testscript.parameters['IX_TP2']['igmpHost_handle'] = []
            testscript.parameters['IX_TP2']['igmp_group_handle'] = []
            testscript.parameters['IX_TP2']['igmp_source_handle'] = []
            testscript.parameters['IX_TP2']['igmpMcastGrpList'] = []

            testscript.parameters['IX_TP2']['igmpHost_handle'].append(IGMP_EML['igmpHost_handle'])
            testscript.parameters['IX_TP2']['igmp_group_handle'].append(IGMP_EML['igmp_group_handle'])
            testscript.parameters['IX_TP2']['igmp_source_handle'].append(IGMP_EML['igmp_source_handle'])
            testscript.parameters['IX_TP2']['igmpMcastGrpList'].append(IGMP_EML['igmpMcastGrpList'])

        else:
            self.skipped(reason="Skipped TGEN Configurations as per request")

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_START_IXIA_PROTOCOLS(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 

    @aetest.test
    def START_IXIA_PROTOCOLS(self):
        """ IXIA_CONFIGURATION subsection: Configure IXIA IGMP Groups """

        # _result_ = ixiahlt.test_control(action='configure_all')
        # print(_result_)
        proto_result = ixLib.start_protocols()
        if proto_result == 0:
            log.debug("Starting Protocols failed")
            self.errored("Starting Protocols failed", goto=['cleanup'])
        else:
            log.info("Started Protocols Successfully")

        time.sleep(60)

        proto_result = ixLib.stop_protocols()
        if proto_result == 0:
            log.debug("Stopped Protocols failed")
            self.errored("Stopped Protocols failed", goto=['cleanup'])
        else:
            log.info("Stopped Protocols Successfully")

        time.sleep(30)

        proto_result = ixLib.start_protocols()
        if proto_result == 0:
            log.debug("Starting Protocols failed")
            self.errored("Starting Protocols failed", goto=['cleanup'])
        else:
            log.info("Started Protocols Successfully")

        time.sleep(120)

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class IXIA_CONFIGURATION_Connect_to_ixia_session(aetest.Testcase):

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 

    @aetest.test
    def Connect_to_ixia_session(self,testscript):
        """ IXIA_CONFIGURATION subsection: Connect to  IXIA session """
        
        
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        
        connect_status = ixiangpf.connect(
            ixnetwork_tcl_server    =  ixnetwork_tcl_server,
            session_resume_keys     =  0,
        )
        
        if connect_status['status'] != '1':
            log.debug("Connecting to the ixia session failed")
            self.errored("Connecting to the ixia session failed", goto=['cleanup'])
        else:
            log.info("Connected to the ixia session Successfully")
            
    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """
        log.info("Pass testcase cleanup")

# *****************************************************************************************************************************#
class TC001_MCAST_VERIFICATION(aetest.Testcase):
    """ MCAST_VERIFICATION """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 

    @aetest.test
    def verify_mcast_group_entry(self, testscript):
        """ TRM_MCAST_VERIFICATION subsection: Verify MCast Group Entry """

        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']
        LEAF_3_TGEN_data = testscript.parameters['LEAF_3_TGEN_dict']

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']
        mcast_grp_ip=ip.IPv4Interface(LEAF_3_TGEN_data['mcast_grp_ip']).ip
        log.info(mcast_grp_ip)

        # ----------------------------------------------------
        # Verify IGMP Snooping Groups on LEAF-3
        # ---------------------------------------------------
        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

                mcast_grp_output = LEAF_3.execute("sh ip igmp snoop groups vlan "+str(l2_vlan_id)+" | grep " + str(mcast_grp_ip))
                if (str(l2_vlan_id) in str(mcast_grp_output)) and (str(mcast_grp_ip) in str(mcast_grp_output)):
                    log.info("IP IGMP Snooping Groups is created in RCV - FHR Leaf")
                else:
                    log.debug("IP IGMP Snooping Groups is not created in RCV - FHR Leaf")
                    self.failed("IP IGMP Snooping Groups verification Failed")

                l2_vlan_count_iter += 1
                l2_vlan_id += 1
                mcast_grp_ip += 256
            l3_vrf_count_iter += 1

    @aetest.cleanup
    def cleanup(self):
        """ testcase clean up """

        status = infraVerify.postTestVerification(post_test_process_dict)
        if status['status'] == 0:
            self.failed(reason=status['logs'])
        else:
            self.passed(reason=status['logs'])

# *****************************************************************************************************************************#
class TC002_L2_COS_TO_DSCP_ENCAP(aetest.Testcase):
    """ L2_COS_TO_DSCP_ENCAP """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 

    #stream_id=''
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }

            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
            
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
            
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                dscpcode=dscp_code_mapping[str(int(expected_dscp,16))]
                if verify_dscp(output,str(expected_dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
        LEAF_1.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_1.execute('sh queuing tabular interface '+testscript.parameters['intf_LEAF_1_to_SPINE']+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            return 0
        else:
            log.info("traffic taking right queue")
            
    @aetest.test
    def stop_traffic(self):
        
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(10)
     
    @aetest.cleanup
    def cleanup(self):
        """Unconfigure qos policies"""
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
            UCAST_v4_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_v4_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)

            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])       

# *****************************************************************************************************************************#
class TC003_DSCP_ENCAP_DEFAULT_QOS(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
            
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                dscp=hex(P1_dict['ip_dscp'])
                dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])        
    
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self):
        """Unconfigure qos policies"""
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
            UCAST_v4_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_v4_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC004_DSCP_ENCAP_DSCP_20(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
                
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
                      
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
            
            time.sleep(30)
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
            
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        
        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                dscp=hex(P1_dict['ip_dscp'])
                dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])        
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            status = infraVerify.postTestVerification(post_test_process_dict)

            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])  
    
# *****************************************************************************************************************************#
class TC005_DSCP_ENCAP_DSCP_MCAST(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """            

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
            
    @aetest.test
    def CONFIGURE_MCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            # Creating TAGs for SRC IP Handles
            TAG_dict = {'subject_handle': IX_TP1['ipv4_handle'],
                        'topo_handle': IX_TP1['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            SRC_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if SRC_IP_TAG == 0:
                log.debug("Configuring TAGS for SRC IP failed")

            # Creating TAGs for DST IP Handles
            TAG_dict = {'subject_handle': IX_TP2['ipv4_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            DST_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if DST_IP_TAG == 0:
                log.debug("Configuring TAGS for DST IP failed")

            # Creating TAGs for IGMP Host Handles
            TAG_dict = {'subject_handle': IX_TP2['igmp_group_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            IGMP_Host_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if IGMP_Host_TAG == 0:
                log.debug("Configuring TAGS for IGMP Hosts failed")

            MCAST_dict = {'src_ipv4_topo_handle': IX_TP1['topo_hndl'],
                          'total_tags': 2,
                          'TI_name': "M_cast",
                          'rate_pps': "10000",
                          'frame_size': "70",
                          'ip_dscp'   : P1_dict['ip_dscp']
                          }

            MCAST_TI = ixLib.configure_v4_mcast_traffic_item_per_tag_QoSValidation(MCAST_dict)

            if MCAST_TI == 0:
                log.debug("Configuring MCast TI failed")
                self.errored("Configuring MCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = MCAST_TI


        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def verify_mcast_group_entry(self, testscript):
        """ TRM_MCAST_VERIFICATION subsection: Verify MCast Group Entry """

        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']
        LEAF_3_TGEN_data = testscript.parameters['LEAF_3_TGEN_dict']

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']
        mcast_grp_ip=ip.IPv4Interface(LEAF_3_TGEN_data['mcast_grp_ip']).ip

        # ----------------------------------------------------
        # Verify IGMP Snooping Groups on LEAF-3
        # ---------------------------------------------------
        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

                mcast_grp_output = LEAF_3.execute("sh ip igmp snoop groups vlan "+str(l2_vlan_id)+" | grep " + str(mcast_grp_ip))
                if str(l2_vlan_id) in mcast_grp_output and (str(mcast_grp_ip)) in mcast_grp_output:
                    log.info("IP IGMP Snooping Groups is created in RCV - FHR Leaf")
                else:
                    log.debug("IP IGMP Snooping Groups is not created in RCV - FHR Leaf")
                    self.failed("IP IGMP Snooping Groups verification Failed")

                l2_vlan_count_iter += 1
                l2_vlan_id += 1
                mcast_grp_ip += 256
            l3_vrf_count_iter += 1

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
            
    @aetest.test
    def SHUT_UPLINK_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['SPINE_1_UPLINK_PO']['po_id']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        
        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""

        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                dscp=hex(P1_dict['ip_dscp'])
                dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup']) 
            
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['SPINE_1_UPLINK_PO']['po_id']) + '''
              no shutdown                
          ''')
            
            MCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(MCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC006_DSCP_ENCAP_MCAST_TOS(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """            
            
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
            
    @aetest.test
    def CONFIGURE_MCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            # Creating TAGs for SRC IP Handles
            TAG_dict = {'subject_handle': IX_TP1['ipv4_handle'],
                        'topo_handle': IX_TP1['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            SRC_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if SRC_IP_TAG == 0:
                log.debug("Configuring TAGS for SRC IP failed")

            # Creating TAGs for DST IP Handles
            TAG_dict = {'subject_handle': IX_TP2['ipv4_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            DST_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if DST_IP_TAG == 0:
                log.debug("Configuring TAGS for DST IP failed")

            # Creating TAGs for IGMP Host Handles
            TAG_dict = {'subject_handle': IX_TP2['igmp_group_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            IGMP_Host_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if IGMP_Host_TAG == 0:
                log.debug("Configuring TAGS for IGMP Hosts failed")

            MCAST_dict = {'src_ipv4_topo_handle': IX_TP1['topo_hndl'],
                          'total_tags': 2,
                          'TI_name': "M_cast",
                          'rate_pps': "10000",
                          'frame_size': "70",
                          'ip_precedence' : P1_dict['ip_precedence'],
                          }

            MCAST_TI = ixLib.configure_v4_mcast_traffic_item_per_tag_QoSValidation(MCAST_dict)

            if MCAST_TI == 0:
                log.debug("Configuring MCast TI failed")
                self.errored("Configuring MCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = MCAST_TI


        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def verify_mcast_group_entry(self, testscript):
        """ TRM_MCAST_VERIFICATION subsection: Verify MCast Group Entry """

        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']
        LEAF_3_TGEN_data = testscript.parameters['LEAF_3_TGEN_dict']

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']
        mcast_grp_ip=ip.IPv4Interface(LEAF_3_TGEN_data['mcast_grp_ip']).ip

        # ----------------------------------------------------
        # Verify IGMP Snooping Groups on LEAF-3
        # ---------------------------------------------------
        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

                mcast_grp_output = LEAF_3.execute("sh ip igmp snoop groups vlan "+str(l2_vlan_id)+" | grep " + str(mcast_grp_ip))
                if str(l2_vlan_id) in mcast_grp_output and (str(mcast_grp_ip)) in mcast_grp_output:
                    log.info("IP IGMP Snooping Groups is created in RCV - FHR Leaf")
                else:
                    log.debug("IP IGMP Snooping Groups is not created in RCV - FHR Leaf")
                    self.failed("IP IGMP Snooping Groups verification Failed")

                l2_vlan_count_iter += 1
                l2_vlan_id += 1
                mcast_grp_ip += 256
            l3_vrf_count_iter += 1

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
         
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
            
    @aetest.test
    def SHUT_UPLINK_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['SPINE_1_UPLINK_PO']['po_id']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])        
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut ''')
            
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        
        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=cos_dscp_mapping[tos]
        
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['SPINE_1_UPLINK_PO']['po_id']) + '''
              no shutdown                
          ''')
            
            
            MCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(MCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])

        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC007_DSCP_ENCAP_TOS(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_precedence' : P1_dict['ip_precedence'],
                                'enable_data_integrity' : P1_dict['enable_data_integrity'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_tos(UCAST_v4_dict)
                
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
               
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """configure a monitor session on Leaf1 to capture and view packets"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Verify the monitor session is up on Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_tos_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=hex(cos_dscp_mapping[tos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                dscp=expected_dscp
                dscpcode=dscp_code_mapping[str(cos_dscp_mapping[tos])]
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup']) 
            
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''
                                policy-map type qos tos-policy
                                  class tos-5
                                    set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def stop_traffic(self):
        
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])    

# *****************************************************************************************************************************#
class TC008_DSCP_ENCAP_DSCP_20_IPV6(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v6_dict = {   'src_hndl'  : IX_TP1['ipv6_handle'],
                                'dst_hndl'  : IX_TP2['ipv6_handle'],
                                'circuit'   : 'ipv6',
                                'TI_name'   : "UCAST_V6",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ipv6_traffic_class'   : P1_dict['ipv6_traffic_class'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            
            UCAST_v6_TI = ixLib.configure_ixia_traffic_item_ipv6_cos(UCAST_v6_dict)    
            if UCAST_v6_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v6_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        
        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv6(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ipv6.src=="+P1_dict['v6_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                dscp=hex(P1_dict['ip_dscp'])
                dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC009_DSCP_ENCAP_IP_ACL(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
                
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])     
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])     
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_1.configure('''
                             ip access-list dscp
                             permit ip any ''' + P2_dict['v4_addr'] + ''' 0.0.0.255 dscp ''' + str(P2_dict['ip_dscp'])
                             )
            LEAF_1.configure('''class-map type qos match-all acl-dscp
                                  match access-group name dscp
                                policy-map type qos acl-policy
                                  class acl-dscp
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input acl-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        
        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                m=re.findall('.*DSCP\s(0x[0-9a-z]+)*',output)
                if m:
                    if m[0]==hex(P1_dict['ip_dscp']) and m[1]==hex(P1_dict['ip_dscp']):
                        print("traffic has valid dscp. Test passed.")
                        log.info("traffic has valid dscp. Test passed.")
                        break
                else:
                    n=re.findall('.*DSCP:\s([A-Z]+[0-9]+|[A-Z]+)',output)
                    if n:
                        if n[0]==dscpcode and n[1]==dscpcode:
                            print("traffic has valid dscp. Test passed.")
                        log.info("traffic has valid dscp. Test passed.")
                        break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''policy-map type qos acl-policy
                                  class acl-dscp
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input acl-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input acl-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos acl-policy
                                no class-map type qos match-all acl-dscp
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])        

# *****************************************************************************************************************************#
class TC010_DSCP_ENCAP_IP_COS_DSCP_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_COS",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'ip_src_addrs' : P1_dict['v4_addr'],
                                'ip_dst_addrs' : P2_dict['v4_addr'],
                                'ip_src_step' : P1_dict['v4_addr_step'],
                                'ip_dst_step' : P2_dict['v4_addr_step'],
                          }

            UCAST_v4_TI = ixLib.configure_ixia_IP_UCAST_COS_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])      
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])      
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos 3
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    set dscp 22
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x1a
        dscpcode='AF23'
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc']) 
            
# *****************************************************************************************************************************#
class TC011_DSCP_ENCAP_DSCP_DSCP_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])  
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])    
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set dscp 22
                                    set qos-group 3
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x1a
        dscpcode='AF23'
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc']) 

# *****************************************************************************************************************************#
class TC012_DSCP_ENCAP_DSCP_POLICE_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
                   
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])      
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])     
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(15)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp='0x20'
        dscpcode='CS4'
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                else:
                    time.sleep(1)
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
                  
    @aetest.test
    def stop_traffic(self):

        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(15)

    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                                    set qos-group 3
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
        
    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
        
    @aetest.test
    def start_traffi_after_editing_TI(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_for_violate_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp='0x28'
        dscpcode='CS5'
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def stop_traffi_after_editing_TI(self):

        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
                        
        time.sleep(10)
                   
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                            
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC013_DSCP_ENCAP_DSCP_TOS_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])   
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])      
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set precedence 5
                                    set qos-group 3
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):

        # Start traffic from ixia
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x28
        dscpcode='CS5'
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                       
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
             ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs']) 
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC014_L2_COS_TO_DSCP_VLAN_POLICY(aetest.Testcase):
    """ L2_COS_TO_DSCP_ENCAP """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    #stream_id=''
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']  
                          }

            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")       
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])      
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])      
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos ''' + str(P1_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_cos_to_dscp_mapping(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=expected_dscp
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match cos value")
                self.failed("DSCP value does not match cos value", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying cos to dscp mapping Leaf1', goto=['cleanup'])

    @aetest.test
    def verify_queing_for_traffic_policy_queue_default(self,testscript):    
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_class_policy_maps_for_queing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_policy_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
           
                            
            time.sleep(10)
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC015_DSCP_ENCAP_DSCP_20_VLAN_POLICY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")    
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "1000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)   
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])     
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])       
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):

        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
            
                            
            time.sleep(10)
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC016_DSCP_ENCAP_TOS_VLAN_POLICY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_precedence' : P1_dict['ip_precedence'],
                                'enable_data_integrity' : P1_dict['enable_data_integrity'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_tos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])      
    
    @aetest.test
    def configure_span_session(self, testscript):
        """configure a monitor session on Leaf1 to capture and view packets"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])     
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Verify the monitor session is up on Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all tos-5
                                  match precedence 5
                                policy-map type qos tos-policy
                                  class tos-5
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) +  '''
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_tos_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=hex(cos_dscp_mapping[tos])
        dscp=int(str(expected_dscp),16)
        dscpcode=dscp_code_mapping[str(dscp)]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                m=re.findall('.*DSCP\s(0x[0-9a-z]+)*',output)
                if m:
                    if m[0]==str(expected_dscp) and m[1]==str(expected_dscp):
                        print("traffic has valid dscp. Test passed.")
                        log.info("traffic has valid dscp. Test passed.")
                        break
                else:
                    n=re.findall('.*DSCP:\s([A-Z]+[0-9]+|[A-Z]+)',output)
                    if n:
                        if n[0]==dscpcode and n[1]==dscpcode:
                            print("traffic has valid dscp. Test passed.")
                            log.info("traffic has valid dscp. Test passed.")
                            break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''
                                policy-map type qos tos-policy
                                  class tos-5
                                    set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                            
            time.sleep(10)
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC017_L2_COS_TO_COS_ENCAP_VLAN_POLICY(aetest.Testcase):
    """ L2_COS_TO_DSCP_ENCAP """

    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    #stream_id=''
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")       
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])     
    
    @aetest.test
    def CONFIGURE_SPAN_SESSION(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup']) 
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos ''' + str(P1_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set cos 2
                                    set qos-group 3
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_cos_to_dscp_mapping(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=0x10
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=expected_dscp
        dscpcode=dscp_code_mapping[str(dscp)]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match cos value")
                self.failed("DSCP value does not match cos value", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying cos to dscp mapping Leaf1', goto=['cleanup'])
            
        LEAF_1.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_1.execute('sh queuing tabular interface '+testscript.parameters['intf_LEAF_1_to_SPINE']+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_3']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_3")
            return 0
        else:
            log.info("traffic taking right queue-3")
            
    @aetest.test
    def stop_traffic(self):

        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
            log.info('pausing for 15 seconds to traffic to stop')
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos ''' + str(P1_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set cos 6
                                    set qos-group 1
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic_after_modify_class_map(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(15)
            log.info('pausing for 15 seconds to traffic to start')
        
    @aetest.test
    def verify_modified_cos_mapping(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""

        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp='0x30'
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=expected_dscp
        dscpcode=dscp_code_mapping[str(int(expected_dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match cos value")
                self.failed("DSCP value does not match cos value", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying cos to dscp mapping Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic(self,testscript):

        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_1')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            IX_TP1 = testscript.parameters['IX_TP1']

            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC018_DSCP_ENCAP_DSCP_REMARK_VLAN_POLICY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
            

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])  
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set dscp 22
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")

        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(22)
        dscpcode=dscp_code_mapping['22']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
             
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                            
            time.sleep(10)
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC019_DSCP_ENCAP_TOS_REMARK_VLAN_POLICY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_precedence' : P1_dict['ip_precedence'],
                                'enable_data_integrity' : P1_dict['enable_data_integrity'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_tos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """configure a monitor session on Leaf1 to capture and view packets"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Verify the monitor session is up on Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all tos-5
                                  match precedence 5
                                policy-map type qos tos-policy
                                  class tos-5
                                    set precedence 4
                                    set qos-group 3
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) +  '''
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_tos_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x20
        dscpcode=dscp_code_mapping['32']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
            
                            
            time.sleep(10)
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC020_DSCP_ENCAP_ING_EGR_L3VNI_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_L3_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_COS",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : '0000.000a.aaaa',
                                'srcmac_step': '00:00:00:00:00:00',
                                'dstmac_step': '00:00:00:00:00:00',
                                'srcmac_count': '1',
                                'dstmac_count': '1',
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': '0',
                                'vlanid_count': '1',
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'ip_src_addrs' : P1_dict['v4_addr'],
                                'ip_dst_addrs' : P1_dict['L3_dst_addr'],
                                'ip_src_step' : '0.0.0.0',
                                'ip_dst_step' : '0.0.0.0',
                          }

            UCAST_v4_TI = ixLib.configure_ixia_l3_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set dscp 22
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x16
        dscpcode=dscp_code_mapping['22']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-2122
                                  match dscp 21-22
                                policy-map type qos dscp-change
                                  class dscp-2122
                                    set dscp 32

                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l3_vlan_start']) + '''
                                  service-policy type qos output dscp-change
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_L3vni_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x20
        dscpcode=dscp_code_mapping['32']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
            
                
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l3_vlan_start']) + '''
                                  no service-policy type qos output dscp-change
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-change
                                no class-map type qos match-all dscp-2122
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")
            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)

            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])        

# *****************************************************************************************************************************#
class TC021_DSCP_ENCAP_ING_POLICE_EGR_L3VNI_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_L3_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_COS",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : '0000.000a.aaaa',
                                'srcmac_step': '00:00:00:00:00:00',
                                'dstmac_step': '00:00:00:00:00:00',
                                'srcmac_count': '1',
                                'dstmac_count': '1',
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': '0',
                                'vlanid_count': '1',
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'ip_src_addrs' : P1_dict['v4_addr'],
                                'ip_dst_addrs' : P1_dict['L3_dst_addr'],
                                'ip_src_step' : '0.0.0.0',
                                'ip_dst_step' : '0.0.0.0',
                          }

            UCAST_v4_TI = ixLib.configure_ixia_l3_traffic_item(UCAST_v4_dict)
                
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                                    set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x16
        dscpcode=dscp_code_mapping['22']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-22
                                  match dscp 22
                                class-map type qos match-all dscp-24
                                  match dscp 24
                                policy-map type qos dscp-change
                                  class dscp-22
                                    set dscp 32
                                  class dscp-24
                                    set dscp 34

                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l3_vlan_start']) + '''
                                  service-policy type qos output dscp-change
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_L3vni_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x20
        dscpcode=dscp_code_mapping['32']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def stop_traffic(self):

        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(10)

    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
        
    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
        time.sleep(10)
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)        
            
    @aetest.test
    def verify_cos_mapping_with_modified_tx_rate(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=0x22
        dscpcode=dscp_code_mapping['34']
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_egr_traffic_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        fail_flag = []

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                
                
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l3_vlan_start']) + '''
                                  no service-policy type qos output dscp-change
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-change
                                no class-map type qos match-all dscp-21
                                no class-map type qos match-all dscp-22
                             ''')
                
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")
            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)

            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])

        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])        

# *****************************************************************************************************************************#
class TC022_DSCP_ENCAP_PORT_FLAP(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")    
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
        time.sleep(3)    

    @aetest.test
    def NO_SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              no shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
    
        log.info("sleeping for 50 seconds to let the interface come up")    
        time.sleep(50)
    
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_2')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
            
                
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC023_DSCP_ENCAP_MODIFY_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI

        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20-21
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set dscp 22
                                    set qos-group 3
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(22)
        dscpcode=dscp_code_mapping[str(22)]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
            
                
            time.sleep(10)
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC024_ENCAP_COS_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'] 
                          }

            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    set cos 6
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='6'
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=expected_dscp
        dscpcode=dscp_code_mapping[str(int(str(expected_dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no class-map type qos match-all cos-3
                                no policy-map type qos cos-policy
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_without_cos(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=expected_dscp
        dscpcode=dscp_code_mapping[str(int(str(expected_dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC025_DSCP_ENCAP_DSCP_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=22
        #dscpcode=dscp_code_mapping[str(dscp)]
        dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,hex(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
        time.sleep(3)    

    @aetest.test
    def NO_SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              no shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
    
        log.info("sleeping for 50 seconds to let the interface come up")    
        time.sleep(50)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 24
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=24
        #dscpcode=dscp_code_mapping[str(dscp)]
        dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,hex(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_1')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC026_DSCP_ENCAP_TOS_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])            

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set precedence 5
                                  set qos-group 2
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='5'
        expected_dscp=(tos_dscp_mapping[tos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        ##dscpcode=dscp_code_mapping[str(dscp)]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
        time.sleep(3)    
    
    @aetest.test
    def NO_SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              no shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
    
        log.info("sleeping for 50 seconds to let the interface come up")    
        time.sleep(50)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set precedence 4
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='4'
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        ##dscpcode=dscp_code_mapping[str(dscp)]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_1')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC027_DSCP_ENCAP_TOS_POLICE_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x20)
        #dscpcode=dscp_code_mapping[str(dscp)]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
        time.sleep(3)   

    @aetest.test
    def NO_SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              no shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
    
        log.info("sleeping for 50 seconds to let the interface come up")    
        time.sleep(50)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-prec-transmit 5 violate set-prec-transmit 4
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x28)
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_1')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC028_DSCP_ENCAP_DSCP_POLICE_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_POLICE_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup']) 
    
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
        time.sleep(3)   

    @aetest.test
    def NO_SHUT_VPC_PO_ON_LEAF1(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
              no shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-1', goto=['cleanup'])
    
        log.info("sleeping for 50 seconds to let the interface come up")    
        time.sleep(50)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  no police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                                  police cir 10 mbps bc 200 ms conform set-dscp-transmit 24 violate set-dscp-transmit 22
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_flap(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x18)
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_1')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
           
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC029_ENCAP_COS_POLICE_MODIFY(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]

        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        ##dscpcode=dscp_code_mapping[str(dscp)]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    no set qos-group 3
                                    no police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 4 violate set-cos-transmit 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_with_modified_cos(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='4'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
           
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC030_VERIFY_ACLQOS_PROCESS_RESTART(aetest.Testcase):
    """verify_nve_process_restart"""
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.test
    def TRIGGER_verify_aclqos_process_restart(self, testscript):
        """ ACLQOS_PROCESS_KILL_VERIFICATION subsection: Verify killing process ACLQOS """

        LEAF_1 = testscript.parameters['LEAF-1']

        if infraTrig.verifyProcessRestart(LEAF_1,"aclqos"):
            log.info("Successfully restarted process aclqos")
        else:
            log.debug("Failed to restarted process aclqos")
            self.failed("Failed to restarted process aclqos", goto=['cleanup'])

        time.sleep(120)
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_after_aclqos_restart(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC031_VERIFY_DEVICE_ASCII_RELOAD(aetest.Testcase):
    """HA_VERIFICATION"""
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        #dscp=expected_dscp
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.test
    def TRIGGER_verify_device_ascii_reload(self, testscript):
        """ HA_VERIFICATION subsection: Device ASCII Reload """

        LEAF_1 = testscript.parameters['LEAF-1']

        LEAF_1.execute("copy r s")

        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        result= LEAF_1.reload(reload_command="reload ascii", timeout=600,prompt_recovery=False, dialog=dialog)
        #result = infraTrig.switchASCIIreload(LEAF_1)
        log.info("result= " + str(result))
        if result:
            log.info("ASCII Reload completed Successfully")
            log.info("Waiging for 240 sec for the topology to come UP")
            time.sleep(240)
        else:
            log.debug("ASCII Reload Failed")
            self.failed("ASCII Reload Failed", goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("Waiging for 240 sec for the topology to come UP")
        time.sleep(300)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):
        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_after_ascii_reload(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_after_ascii_reload(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC032_VERIFY_DEVICE_RELOAD(aetest.Testcase):
    """HA_VERIFICATION"""
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.test
    def TRIGGER_verify_device_reload(self, testscript):
        """ HA_VERIFICATION subsection: Device ASCII Reload """

        LEAF_1 = testscript.parameters['LEAF-1']

        #LEAF_1.configure("copy r s", timeout=600)

        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        LEAF_1.configure("copy r s", timeout=600)
        #result= LEAF_1.reload(reload_command="reload", timeout=600,prompt_recovery=False, dialog=dialog)
        #result = infraTrig.switchASCIIreload(LEAF_1)
        result = infraTrig.switchReload(LEAF_1)
        log.info("result= " + str(result))
        if result:
            log.info("ASCII Reload completed Successfully")
            log.info("Waiging for 240 sec for the topology to come UP")
            time.sleep(240)
        else:
            log.debug("ASCII Reload Failed")
            self.failed("ASCII Reload Failed", goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("Waiging for 240 sec for the topology to come UP")
        time.sleep(300)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_reload(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_after_ascii_reload(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_after_ascii_reload(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC033_VERIFY_SWITCH_MODE_CHANGE(aetest.Testcase):
    """SWITCHING_MODE_CHANGE_VERIFICATION"""
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.test
    def TRIGGER_switching_mode_change(self, testscript):
        """ switchif mode change """

        LEAF_1 = testscript.parameters['LEAF-1']

        #LEAF_1.configure("copy r s", timeout=600)
        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        LEAF_1.configure("switching-mode store-forward")
        output=LEAF_1.execute("sh switching-mode | i mode")
        m=re.search('.*mode: (Store and Forward)',output)
        if m:
            if m.group(1)=='Store and Forward':
                log.info("Switching mode changed to store and forward")
            else:
                log.debug("Switchin mode configuration failed")
                self.failed("Switching mode configuration failed", goto=['cleanup'])
        else:
            log.debug("Switchin mode configuration failed")
            self.failed("Switching mode configuration failed", goto=['cleanup'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_mode_change(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_after_switching_mode_change(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_after_switching_mode_change(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            LEAF_1.configure("no switching-mode store-forward")
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC034_ENCAP_COS_POLICING(aetest.Testcase):
    """ COS_ENCAP_POLICE_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_L2_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """
        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_L2_dict = {   'src_hndl'  : IX_TP1['port_handle'],
                                'dst_hndl'  : IX_TP2['port_handle'],
                                'circuit'   : 'raw',
                                'TI_name'   : "UCAST_L2",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 0,
                                'frame_size': '128',
                                'src_mac'   : P1_dict['mac'],
                                'dst_mac'   : P2_dict['mac'],
                                'srcmac_step': P1_dict['mac_step'],
                                'dstmac_step': P2_dict['mac_step'],
                                'srcmac_count': P1_dict['no_of_ints'],
                                'dstmac_count': P2_dict['no_of_ints'],
                                'vlan_id'    : P1_dict['vlan_id'],
                                'vlanid_step': P1_dict['vlan_id_step'],
                                'vlanid_count': P1_dict['no_of_ints'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                            
                          }
            UCAST_L2_TI = ixLib.configure_ixia_L2_UCAST_traffic_item(UCAST_L2_dict)
            print('UCAST_L2_TI:'+str(UCAST_L2_TI))
            log.info('UCAST_L2_TI:'+str(UCAST_L2_TI))
                
            if UCAST_L2_TI == 0:
                log.debug("Configuring UCast L2 TI failed")
                self.errored("Configuring UCast L2 TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_L2_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            
            LEAF_1.configure('''class-map type qos match-all cos-3
                                  match cos '''+ str(P2_dict['vlan_user_priority']) + '''
                                policy-map type qos cos-policy
                                  class cos-3
                                    set qos-group 3
                                    police cir 10 mbps bc 200 ms conform set-cos-transmit 2 violate set-cos-transmit 4
                            ''')
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  service-policy type qos input cos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='2'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(10)
            
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)        
            
    @aetest.test
    def verify_cos_mapping_with_modified_tx_rate(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos='4'
        expected_dscp=cos_dscp_mapping[cos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'eth.addr=="+P1_dict['mac']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
       
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_1.configure('''interface po ''' + str(testscript.parameters['LEAF_1_dict']['VPC_data']['VPC_ACC_po']) + '''
                                  no service-policy type qos input cos-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos cos-policy
                                no class-map type qos match-all cos-3
                             ''')
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC035_DSCP_ENCAP_VLAN_DSCP_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(15)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(15)
    
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                                    set qos-group 3
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_for_violate_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x18)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                            
            time.sleep(10)
                
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC036_DSCP_ENCAP_VLAN_TOS_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
                log.info('stream_id='+str(stream_id))
                log.info(type(stream_id))
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                            ''')
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(15)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='4'
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_0')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.test
    def stop_traffic(self):

        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
        time.sleep(15)

    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        try:
            LEAF_1.configure('''policy-map type qos dscp-policy
                                  class dscp-20
                                    police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 5
                                    set qos-group 3
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_for_violate_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='5'
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_1.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_1 = testscript.parameters['LEAF-1']
        traffic_verification  = verify_queing_for_traffic(LEAF_1, testscript.parameters['LEAF_1_dict'], 'qos_group_3')
        if traffic_verification['result']:
            self.passed(reason=traffic_verification['status_msgs'])
        else:
            self.failed(reason=traffic_verification['status_msgs'])
            
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']

        try:
            LEAF_1.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_1_dict']['VNI_data']['l2_vlan_start']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_1.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                            
            time.sleep(10)
                
            UCAST_L2_dict = {
                            'mode'        : 'remove',
                            'stream_id'   : str(stream_id),
                      }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC037_DECAP_TOS_POLICE_UNIFM(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 6
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='4'
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def stop_traffic(self):
    # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)    
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)
        time.sleep(10)
        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-prec-transmit 4 violate set-prec-transmit 6
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_modification(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos='6'
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+testscript.parameters['intf_LEAF_3_to_IXIA']+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_1']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_1")
            self.failed("traffic not egressing out of right queue-1", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-1")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        SPINE_1 = testscript.parameters['SPINE']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''no class-map type qos match-all dscp-20
                                no policy-map type qos dscp-policy
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC038_DECAP_DSCP_MODIFY_POLICE_UNIFM(aetest.Testcase):
    """ DSCP_DECAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")

    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]

        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])

    @aetest.test
    def stop_traffic(self):
    # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)    
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)
        time.sleep(10)
        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def modify_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  police cir 10 mbps bc 200 ms conform set-dscp-transmit 22 violate set-dscp-transmit 24
                                  set qos-group 1
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_after_modification(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x18)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+ str(testscript.parameters['intf_LEAF_3_to_IXIA']) +' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_1']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_1")
            self.failed("traffic not egressing out of right queue-1", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-1")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        SPINE_1 = testscript.parameters['SPINE']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''no class-map type qos match-all dscp-20
                                no policy-map type qos dscp-policy
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC039_DECAP_UNFM_INGR_NVE_EGR_INT(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
            
    @aetest.test
    def configure_class_policy_maps_for_egr_interface(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-22
                                  match dscp 22
                                policy-map type qos dscp-egr
                                  class dscp-22
                                  set dscp 38
                            ''')
            LEAF_3.configure('''interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                  service-policy type qos output dscp-egr
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        SPINE_1 = testscript.parameters['SPINE']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_1 = testscript.parameters['LEAF-1']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure('''interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                  no service-policy type qos output dscp-egr
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-egr
                                no class-map type qos match-all dscp-22
                                
                            ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC040_DECAP_UNFM_INGR_NVE_COS_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'egress_tracking':  'outer_vlan_priority',
                                'egress_tracking_encap': 'ethernet',
                                'bidirectional': '0',
                                'track_by' : 'trackingenabled0'
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_cos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(60)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   set cos 4
                            ''')
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_cos_marking(self,testscript): 

        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
        #pprint(traffic_stats)
        
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   set cos 4
                                   set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
     
    @aetest.test
    def start_traffic_after(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                
                
            time.sleep(10)
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC041_DECAP_UNFM_INGR_NVE_COS_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'egress_tracking':  'outer_vlan_priority',
                                'egress_tracking_encap': 'ethernet',
                                'bidirectional': '0',
                                'track_by' : 'trackingenabled0'
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_cos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(60)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   police cir 10 mbps conform set-cos-transmit 4 violate set-cos-transmit 5
                                   
                            ''')
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)

    @aetest.test
    def verify_cos_marking(self,testscript): 
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
        #pprint(traffic_stats)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def verify_cos_marking_for_violation(self,testscript): 
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
            
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   police cir 10 mbps conform set-cos-transmit 4 violate set-cos-transmit 5
                                   set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
     
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        SPINE_1 = testscript.parameters['SPINE']
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC042_DECAP_UNFM_ACLQOS_RESTART(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)

            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def TRIGGER_verify_aclqos_process_restart(self, testscript):
        """ ACLQOS_PROCESS_KILL_VERIFICATION subsection: Verify killing process ACLQOS """

        LEAF_3 = testscript.parameters['LEAF-3']

        if infraTrig.verifyProcessRestart(LEAF_3,"aclqos"):
            log.info("Successfully restarted process aclqos")
        else:
            log.debug("Failed to restarted process aclqos")
            self.failed("Failed to restarted process aclqos", goto=['cleanup'])

        time.sleep(120)
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_aclqos_restart(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_aclqos_restart(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            post_test_process_dict['exclude_log_check_pattern'] = '(no core)|ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            status = infraVerify.postTestVerification(post_test_process_dict)
            post_test_process_dict['exclude_log_check_pattern'] = 'ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC043_DECAP_UNFM_RELOAD(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def TRIGGER_verify_device_reload(self, testscript):
        """ HA_VERIFICATION subsection: Device ASCII Reload """

        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_1.configure("copy r s", timeout=600)
        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        LEAF_3.configure("copy r s", timeout=600)
        #result= LEAF_3.reload(reload_command="reload", timeout=600,prompt_recovery=False, dialog=dialog)
        #result = infraTrig.switchASCIIreload(LEAF_1)
        result = infraTrig.switchReload(LEAF_3)
        log.info("result= " + str(result))
        if result:
            log.info("Reload completed Successfully")
            log.info("Waiging for 240 sec for the topology to come UP")
            time.sleep(240)
        else:
            log.debug("Reload Failed")
            self.failed("Reload Failed", goto=['cleanup'])

        #time.sleep(120)
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 240 seconds for topology to come up")
        time.sleep(240)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_reload(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_reload(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC044_DECAP_UNFM_SWITCHMODE_CHG(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def TRIGGER_switching_mode_change(self, testscript):
        """ switchif mode change """

        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_1.configure("copy r s", timeout=600)

        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        LEAF_3.configure("switching-mode store-forward")
        output=LEAF_3.execute("sh switching-mode | i mode")
        m=re.search('.*mode: (Store and Forward)',output)
        if m:
            if m.group(1)=='Store and Forward':
                log.info("Switching mode changed to store and forward")
            else:
                log.debug("Switchin mode configuration failed")
                self.failed("Switching mode configuration failed", goto=['cleanup'])
        else:
            log.debug("Switchin mode configuration failed")
            self.failed("Switching mode configuration failed", goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 240 seconds for topology to come up")
        time.sleep(240)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_mode_change(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_switch_mode_change(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure("no switching-mode store-forward")
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC045_DECAP_UNFM_NVE_FLAP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def FLAP_NVE_ON_LEAF3(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_3 = testscript.parameters['LEAF-3']
        
        try:
            LEAF_3.configure('''interface nve 1
                                shutdown                
                             ''')
            time.sleep(5)
            LEAF_3.configure('''interface nve 1
                                no shutdown                
                             ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 60 seconds for topology to come up")
        time.sleep(60)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_NVE_flap(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_NVE_flap(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure("no switching-mode store-forward")
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC046_DECAP_UNFM_LOOPBACK_FLAP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
            
    @aetest.test
    def FLAP_LOOPBACK_ON_LEAF3(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_3 = testscript.parameters['LEAF-3']
        
        try:
            LEAF_3.configure('''interface loopback 1
                                shutdown                
                             ''')
            time.sleep(5)
            LEAF_3.configure('''interface loopback 1
                                no shutdown                
                             ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 60 seconds for topology to come up")
        time.sleep(60)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_LOOP_flap(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_loop_flap(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure("no switching-mode store-forward")
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc']) 
    
# *****************************************************************************************************************************#
class TC047_DECAP_UNFM_ASCII_RELOAD(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def TRIGGER_verify_device_ascii_reload(self, testscript):
        """ HA_VERIFICATION subsection: Device ASCII Reload """

        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.configure("copy r s", timeout=600)

        # Perform Device Reload
        dialog = Dialog([
            Statement(pattern=r'.*Do you wish to proceed anyway.*',
                      action='sendline(y)',
                      loop_continue=True,
                      continue_timer=True)
        ])
        LEAF_3.configure("copy r s", timeout=600)
        # result= LEAF_3.reload(reload_command="reload ascii", timeout=600,prompt_recovery=False, dialog=dialog, ESCAPE_CHAR_PROMPT_WAIT=600,ESCAPE_CHAR_CHATTY_TEAM_WAIT=600)
        #result = infraTrig.switchASCIIreload(LEAF_1)
        result = infraTrig.switchASCIIreload(LEAF_3)
        log.info("result= " + str(result))
        if result:
            log.info("Ascii Reload completed Successfully")
            log.info("Waiging for 240 sec for the topology to come UP")
            time.sleep(240)
        else:
            log.debug("ASCII Reload Failed")
            self.failed("ASCII Reload Failed", goto=['cleanup'])

        #time.sleep(120)
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 240 seconds for topology to come up")
        time.sleep(240)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_reload(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_ascii_reload(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)          

            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])  
    
# *****************************************************************************************************************************#
class TC048_DECAP_UNFM_INGR_NVE_TOS(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set precedence 6
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x30)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
            
    @aetest.test
    def configure_class_policy_maps_for_egr_interface(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-48
                                  match dscp 48
                                policy-map type qos dscp-egr
                                  class dscp-48
                                  set precedence 4
                            ''')
            LEAF_3.configure('''interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                  service-policy type qos output dscp-egr
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x20)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])            
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure('''interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                  no service-policy type qos output dscp-egr
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-egr
                                no class-map type qos match-all dscp-48
                            ''')
            SPINE_1.configure('''no class-map type qos match-all dscp-20
                                no policy-map type qos dscp-policy
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC049_DECAP_UNFM_RESTART_BGP(aetest.Testcase):
    """ DSCP_DECAP_BGP_RESTART """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
    
    @aetest.test
    def verify_restart_bgp(self, testscript):
        """ VXLAN_DISRUPTIVE_VERIFICATION subsection: Verify Restart BGP """

        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']

        # Restart BGP
        LEAF_1.configure('restart bgp '+str(forwardingSysDict['BGP_AS_num']))
        LEAF_2.configure('restart bgp '+str(forwardingSysDict['BGP_AS_num']))
        LEAF_3.configure('restart bgp '+str(forwardingSysDict['BGP_AS_num']))
        time.sleep(60)

        # Verify BGP session is established
        for LEAF in [LEAF_1,LEAF_2,LEAF_3]:
            output=LEAF.execute("sh bgp sessions | json-pretty")
            a=json.loads(output)
            if a['TABLE_vrf']['ROW_vrf']['TABLE_neighbor']['ROW_neighbor']['state']!="Established":
                log.info("BGP session not established on " + str(LEAF))
                self.failed("BGP session not established", goto=['cleanup'])
            else:
                log.info("BGP session established on " + str(LEAF))

    @aetest.test
    def VERIFY_TRAFFIC_after_BGP_restart(self, testscript):
        # Verify Traffic
        if ixLib.verify_traffic(2) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 60 seconds for topology to come up")
        time.sleep(60)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_restart_bgp(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_BGP_restart(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
    
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure("no switching-mode store-forward")
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
        
# *****************************************************************************************************************************#
class TC050_DECAP_UNFM_NVE_RESTART(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
                
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def TRIGGER_verify_nve_process_restart(self, testscript):
        """ ACLQOS_PROCESS_KILL_VERIFICATION subsection: Verify killing process ACLQOS """

        LEAF_3 = testscript.parameters['LEAF-3']

        if infraTrig.verifyProcessRestart(LEAF_3,"nve"):
            log.info("Successfully restarted process aclqos")
        else:
            log.debug("Failed to restarted process aclqos")
            self.failed("Failed to restarted process aclqos", goto=['cleanup'])

        time.sleep(120)
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_nve_restart(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after_nve_restart(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
                
            ##check for cores,cc,errors
            post_test_process_dict['exclude_log_check_pattern'] = '(no core)|ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            status = infraVerify.postTestVerification(post_test_process_dict)
            post_test_process_dict['exclude_log_check_pattern'] = 'ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC051_DECAP_UNFM_NVE_DELETE_ADD(aetest.Testcase):
    """ DSCP_DECAP_NVE_DELETE_ADD """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])
            
    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])

    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
            
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
            
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 22
                                  set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1 
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp 20
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
        
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        

        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")

    @aetest.test
    def unconfigure_NVE_LEAF_3(self, testscript):
        """ NVE Delete add: Configuring LEAF-3 """

        b='0.0.1.0'
        lst=[]
        lst2=[]
        lst3=[]
        lst4=[]
        c="."
        for i in testscript.parameters['LEAF_3_dict']['NVE_data']['l2_mcast_grp_ip'].split('.'):
            lst.append(i)
        for j in b.split('.'):
            lst2.append(j)
        for k in range(0,len(lst)):
            lst3.append(int(lst[k])+int(lst2[k]))
        #print(lst3)
        for i in lst3:
            lst4.append(str(i))
        #print(lst4)
        c=c.join(lst4)
        #print(c)

        try:
            testscript.parameters['LEAF-3'].configure('''no int nve 1''')
            time.sleep(3)    
            testscript.parameters['LEAF-3'].configure('''int nve 1
                                                      no shutdown
                                                      service-policy type qos input dscp-policy
                                                      host-reachability protocol bgp
                                                      source-interface loopback1
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l3_vni_start']) + ''' associate-vrf
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l3_vni_start']+1) + ''' associate-vrf
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']) + '''
                                                        suppress-arp
                                                        mcast-group ''' + str(testscript.parameters['LEAF_3_dict']['NVE_data']['l2_mcast_grp_ip']) + '''
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']+1) + '''
                                                        suppress-arp
                                                        mcast-group ''' + str(testscript.parameters['LEAF_3_dict']['NVE_data']['l2_mcast_grp_ip']) + '''
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']+2) + '''
                                                        suppress-arp
                                                        mcast-group ''' + c + '''
                                                      member vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']+3) + '''
                                                        suppress-arp
                                                        mcast-group ''' + c + '''
                
          ''')
            #evpnLib.configureEVPNLeaf(testscript.parameters['LEAF-3'], testscript.parameters['forwardingSysDict'], testscript.parameters['LEAF_3_dict'])
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring on LEAF-3', goto=['cleanup'])
    
    @aetest.test
    def verify_NVE_peering(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """
        log.info("waiting 60 seconds for topology to come up")
        time.sleep(60)
        nvePeerData = verifyEvpn.verifyEVPNNvePeers(testscript.parameters['leavesDict'])

        if nvePeerData['result'] is 1:
            log.info("PASS : Successfully verified NVE Peering\n\n")
            self.passed(reason=nvePeerData['log'])
        else:
            log.info("FAIL : Failed to verify NVE Peering\n\n")
            self.failed(reason=nvePeerData['log'])
    
    @aetest.test
    def verify_VNI(self, testscript):
        """ VERIFY_NETWORK subsection: Verify NVE Peering """

        nveVniData = verifyEvpn.verifyEVPNVNIData(testscript.parameters['forwardingSysDict'],testscript.parameters['leavesDict'])

        if nveVniData['result'] is 1:
            log.info("PASS : Successfully verified NVE VNI Data\n\n")
            self.passed(reason=nveVniData['log'])
        else:
            log.info("FAIL : Failed to verify NVE VNI Data\n\n")
            self.failed(reason=nveVniData['log'])
    
    @aetest.test
    def VERIFY_TRAFFIC(self):

        # Verify Traffic
        if ixLib.verify_traffic(2, 3) == 0:
            log.debug("Traffic Verification failed")
            self.failed("Traffic Verification failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")
            time.sleep(10)
        
    @aetest.test
    def start_traffic_after_unconfigure_nve(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")
            time.sleep(10)
            
    @aetest.test
    def verify_dscp_mapping_after_aclqos_restart(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic_after(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            LEAF_3.configure("no switching-mode store-forward")
            
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                                
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            post_test_process_dict['exclude_log_check_pattern'] = '(no core)|ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            status = infraVerify.postTestVerification(post_test_process_dict)
            post_test_process_dict['exclude_log_check_pattern'] = 'ERROR_VLANS_SUSPENDED|ERROR_VLANS_REMOVED|PEER_KEEP_ALIVE_RECV_FAIL|AUTHPRIV-2-SYSTEM_MSG|dcos_sshd|LICMGR-3-LOG_SMART_LIC_COMM_FAILED|POAP-2-POAP_FAILURE'
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs']) 
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC052_DECAP_PIPE_INGR_NVE_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """
        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp'])+ '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])    
            
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC053_DECAP_PIPE_DSCP_MCAST(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """            
            
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_MCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            # Creating TAGs for SRC IP Handles
            TAG_dict = {'subject_handle': IX_TP1['ipv4_handle'],
                        'topo_handle': IX_TP1['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            SRC_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if SRC_IP_TAG == 0:
                log.debug("Configuring TAGS for SRC IP failed")

            # Creating TAGs for DST IP Handles
            TAG_dict = {'subject_handle': IX_TP2['ipv4_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            DST_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if DST_IP_TAG == 0:
                log.debug("Configuring TAGS for DST IP failed")

            # Creating TAGs for IGMP Host Handles
            TAG_dict = {'subject_handle': IX_TP2['igmp_group_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            IGMP_Host_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if IGMP_Host_TAG == 0:
                log.debug("Configuring TAGS for IGMP Hosts failed")

            MCAST_dict = {'src_ipv4_topo_handle': IX_TP1['topo_hndl'],
                          'total_tags': 2,
                          'TI_name': "M_cast",
                          'rate_pps': "10000",
                          'frame_size': "70",
                          'ip_dscp'   : P1_dict['ip_dscp']
                          }

            MCAST_TI = ixLib.configure_v4_mcast_traffic_item_per_tag_QoSValidation(MCAST_dict)

            if MCAST_TI == 0:
                log.debug("Configuring MCast TI failed")
                self.errored("Configuring MCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = MCAST_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def verify_mcast_group_entry(self, testscript):
        """ TRM_MCAST_VERIFICATION subsection: Verify MCast Group Entry """

        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']
        LEAF_3_TGEN_data = testscript.parameters['LEAF_3_TGEN_dict']

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']
        mcast_grp_ip=ip.IPv4Interface(LEAF_3_TGEN_data['mcast_grp_ip']).ip

        # ----------------------------------------------------
        # Verify IGMP Snooping Groups on LEAF-3
        # ---------------------------------------------------
        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

                mcast_grp_output = LEAF_3.execute("sh ip igmp snoop groups vlan "+str(l2_vlan_id)+" | grep " + str(mcast_grp_ip))
                if str(l2_vlan_id) in mcast_grp_output and (str(mcast_grp_ip)) in mcast_grp_output:
                    log.info("IP IGMP Snooping Groups is created in RCV - FHR Leaf")
                else:
                    log.debug("IP IGMP Snooping Groups is not created in RCV - FHR Leaf")
                    self.failed("IP IGMP Snooping Groups verification Failed")

                l2_vlan_count_iter += 1
                l2_vlan_id += 1
                mcast_grp_ip += 256
            l3_vrf_count_iter += 1
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][5]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp'])+ '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][5]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)  

            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                            ''')
            
            MCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(MCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC054_DECAP_PIPE_MCAST_TOS(aetest.Testcase):
    """ DSCP_ENCAP_DEFAULT_QOS """            
            
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_MCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

            # Creating TAGs for SRC IP Handles
            TAG_dict = {'subject_handle': IX_TP1['ipv4_handle'],
                        'topo_handle': IX_TP1['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            SRC_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if SRC_IP_TAG == 0:
                log.debug("Configuring TAGS for SRC IP failed")

            # Creating TAGs for DST IP Handles
            TAG_dict = {'subject_handle': IX_TP2['ipv4_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            DST_IP_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if DST_IP_TAG == 0:
                log.debug("Configuring TAGS for DST IP failed")

            # Creating TAGs for IGMP Host Handles
            TAG_dict = {'subject_handle': IX_TP2['igmp_group_handle'],
                        'topo_handle': IX_TP2['topo_hndl'],
                        'TAG_count_per_item': 2
                        }

            IGMP_Host_TAG = ixLib.configure_tag_config_multiplier(TAG_dict)
            if IGMP_Host_TAG == 0:
                log.debug("Configuring TAGS for IGMP Hosts failed")

            MCAST_dict = {'src_ipv4_topo_handle': IX_TP1['topo_hndl'],
                          'total_tags': 2,
                          'TI_name': "M_cast",
                          'rate_pps': "10000",
                          'frame_size': "70",
                          'ip_precedence' : P1_dict['ip_precedence'],
                          }

            MCAST_TI = ixLib.configure_v4_mcast_traffic_item_per_tag_QoSValidation(MCAST_dict)

            if MCAST_TI == 0:
                log.debug("Configuring MCast TI failed")
                self.errored("Configuring MCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = MCAST_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def verify_mcast_group_entry(self, testscript):
        """ TRM_MCAST_VERIFICATION subsection: Verify MCast Group Entry """

        LEAF_3 = testscript.parameters['LEAF-3']
        forwardingSysDict = testscript.parameters['forwardingSysDict']
        LEAF_3_TGEN_data = testscript.parameters['LEAF_3_TGEN_dict']

        # ----------------------------------------------------
        # LEAF-3 Counter Variables
        # ----------------------------------------------------
        l3_vrf_count_iter = 0
        l2_vlan_count_iter = 0

        l2_vlan_id = testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']
        mcast_grp_ip=ip.IPv4Interface(LEAF_3_TGEN_data['mcast_grp_ip']).ip

        # ----------------------------------------------------
        # Verify IGMP Snooping Groups on LEAF-3
        # ---------------------------------------------------
        while l3_vrf_count_iter < forwardingSysDict['VRF_count']:
            while l2_vlan_count_iter < forwardingSysDict['VLAN_PER_VRF_count']:

                mcast_grp_output = LEAF_3.execute("sh ip igmp snoop groups vlan "+str(l2_vlan_id)+" | grep " + str(mcast_grp_ip))
                if str(l2_vlan_id) in mcast_grp_output and (str(mcast_grp_ip)) in mcast_grp_output:
                    log.info("IP IGMP Snooping Groups is created in RCV - FHR Leaf")
                else:
                    log.debug("IP IGMP Snooping Groups is not created in RCV - FHR Leaf")
                    self.failed("IP IGMP Snooping Groups verification Failed")

                l2_vlan_count_iter += 1
                l2_vlan_id += 1
                mcast_grp_ip += 256
            l3_vrf_count_iter += 1
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_1.configure('''
              monitor session 1  
              source interface port-channel ''' + str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-1', goto=['cleanup'])
    
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_1.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!='port-channel'+str(testscript.parameters['LEAF_1_dict']['SPINE_1_UPLINK_PO']['po_id']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']

        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=hex(cos_dscp_mapping[tos])
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(expected_dscp) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 48
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=cos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_traffic_default_queue(self,testscript):
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface ' + str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][5]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue")
        else:
            log.info("traffic taking right queue")
            
    @aetest.test
    def configure_policy_map_for_queueing(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_queing_for_traffic(self,testscript):
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface ' + str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][5]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue")
        else:
            log.info("traffic taking right queue")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                                 no class-map type qos match-all dscp-20
                            ''')
            
            MCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(MCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC055_DECAP_PIPE_INGR_NVE_ACL_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_3.configure('''
                             ip access-list dscp
                             permit ip any ''' + P2_dict['v4_addr'] + ''' 0.0.0.255 dscp ''' + str(P2_dict['ip_dscp'])
                             )
            LEAF_3.configure('''class-map type qos match-all acl-dscp
                                  match access-group name dscp
                                policy-map type qos acl-policy
                                  class acl-dscp
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input acl-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def verify_running_cfg_for_nve_qos_policy(self,testscript):
        """ Check running config"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        
        try:
            output = LEAF_3.execute('''show running ipqos | i nve n 2''')
            if 'service-policy type qos input acl-policy' in output:
                log.info('Running cfg has policy map config under nve')
            else:
                self.failed('running cfg does not have policy map under nve',goto=['cleanup'])
        except Exception as error:
            log.debug("Exception occured when checking running cfg has qos cli under nve " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp'])+ '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input acl-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos acl-policy
                                no class-map type qos match-all acl-dscp
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC056_DECAP_PIPE_UNFM_TOGGLE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "50000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_pipe_mode(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def unconfigure_pipe_mode(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x28)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])            
    
# *****************************************************************************************************************************#
class TC057_DECAP_PIPE_NVE_STATS(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")    
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "50000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_pipe_mode(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                             ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
    
    @aetest.test
    def check_policy_map_counters_for_nve(self,testscript):
        LEAF_3 = testscript.parameters['LEAF-3']
        fail_flag = []
        msgs = ''
        try:
            LEAF_3.execute('clear qos statistics')
            time.sleep(20)
            output=LEAF_3.execute('sh policy-map interface nve 1 input | json-pretty')
            
            a=json.loads(output)
            if a['TABLE_ifvlanstr']['ROW_ifvlanstr']['TABLE_pmap']['ROW_pmap']['pmap-key']=='dscp-policy':
                class_pkts = a['TABLE_ifvlanstr']['ROW_ifvlanstr']['TABLE_pmap']['ROW_pmap']['TABLE_cmap']['ROW_cmap']['TABLE_slot']['ROW_slot']
                if type(class_pkts) == list:
                    for row_slot in class_pkts:
                        if 'class-pkts' in row_slot.keys():
                            if row_slot['class-pkts'] != 0:
                                log.info('Module : '+str(row_slot['slot-key'])+' : policy map stats on nve interface are available')
                                msgs += '\nModule : '+str(row_slot['slot-key'])+' : policy map stats on nve interface are available'
                            else:
                                log.info('Module : '+str(row_slot['slot-key'])+' :traffic stats at nve for policymap not available')
                                msgs+='\nModule : '+str(row_slot['slot-key'])+' :traffic stats at nve for policymap not available'
                                fail_flag.append(0)
                    if 0 in fail_flag:
                        self.failed(reason=msgs)
                    else:
                        self.passed(reason=msgs)
                else:
                    if class_pkts['class-pkts'] != 0:
                        log.info('policy map stats on nve interface are available')
                    else:
                        log.info("traffic stats at nve for policymap not available")
                        self.failed("traffic stats at nve for policymap not available", goto=['cleanup'])
            else:
                    log.info("traffic stats at nve for policymap not available")
                    self.failed("traffic stats at nve for policymap not available", goto=['cleanup'])
        except Exception as error:
            log.debug("Unable to verify stats- Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying policymap stats on nve', goto=['cleanup'])
        
    @aetest.test
    def clear_vne_vni_stats(self,testscript):
        LEAF_3 = testscript.parameters['LEAF-3']
        try:
            LEAF_3.execute('''clear nve vni ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']) + ''' counters''')
            time.sleep(20)
            output=LEAF_3.execute('''sh nve vni '''+ str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']) + ''' counters | json-pretty''')
            
            a=json.loads(output)
            pkt1=a['tx_ucastpkts']
            time.sleep(20)
            output=LEAF_3.execute('''sh nve vni '''+ str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vni_start']) + ''' counters | json-pretty''')
            a=json.loads(output)
            pkt2=a['tx_ucastpkts']
            if int(pkt2)>int(pkt1):
                log.info('NVE vni stats incrementing as expected')
            else:
                log.info("NVE vni stats NOT incrementing as expected")
                self.failed("NVE vni stats NOT incrementing as expected", goto=['cleanup'])
        except Exception as error:
            log.debug("unable to verify nve vni counters"+ str(error))
            self.failed("unable to verify nve vni counters,Exception occured", goto=['cleanup'])
            
    @aetest.test
    def egress_policy_on_nve_negative_test(self,testscript):
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                    set qos-group 2
                             ''')
            output=LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  no service-policy type qos input dscp-policy
                                  service-policy type qos output dscp-policy
                             ''')
            if "ERROR: Cannot apply output qos policy to nve interface: nve1" in output:
                log.info('configuring output policy on nve interface throws error which is expected')
                output=LEAF_3.execute("sh run int nve 1 | i service-policy")
                if output=="":
                    log.info('output policy on nve interface not applied to running config.Expected!')
                else:
                    log.info("output policy on nve applied on nve interface or stale policy present.")
                    self.failed("output policy on nve applied on nve interface or stale policy present.", goto=['cleanup'])    
            else:
                LEAF_3.configure('''interface nve 1
                                       no service-policy type qos output dscp-policy
                                ''')
                log.info("No error when output policy applied on nve interface.")
                self.failed("No error when output policy applied on nve interface.", goto=['cleanup'])
        except Exception as error:
            log.debug("Exception when trying to configure output policy on nve interface"+ str(error))
            self.failed("Exception when trying to configure output policy on nve interface", goto=['cleanup'])
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC058_DECAP_PIPE_INGR_NVE_TOS(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")  
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure MCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_precedence' : P1_dict['ip_precedence'],
                                'enable_data_integrity' : P1_dict['enable_data_integrity'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_tos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all tos-5
                                  match precedence ''' + str(P1_dict['ip_precedence']) + '''
                                policy-map type qos tos-policy
                                  class tos-5
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all tos-5
                                  match precedence '''+ str(P1_dict['ip_precedence'])+ '''
                                policy-map type qos tos-policy
                                  class tos-5
                                  set dscp 48
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input tos-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all tos-5
                                  match precedence '''+ str(P1_dict['ip_precedence'])+ '''
                                policy-map type qos tos-policy
                                  class tos-5
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        tos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        tos=str(P1_dict['ip_precedence'])
        expected_dscp=tos_dscp_mapping[tos]
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(expected_dscp)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input tos-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos tos-policy
                                no class-map type qos match-all tos-5
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input tos-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos tos-policy
                              no class-map type qos match-all tos-5
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC059_DECAP_PIPE_INGR_NVE_EGR_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")  
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set qos-group 2
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(P1_dict['ip_dscp'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-40
                                  match dscp 40
                                policy-map type qos dscp-egress
                                  class dscp-20
                                  set dscp 22
                                  class dscp-40
                                  set dscp 42
                            ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                service-policy type qos output dscp-egress
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-40
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC060_DECAP_PIPE_INGR_NVE_REMARKING_EGR_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup")  
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
    
    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-21
                                  match dscp 22
                                policy-map type qos dscp-egress
                                  class dscp-21
                                   set dscp 26
                            ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                service-policy type qos output dscp-egress
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x1a)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC061_DECAP_PIPE_INGR_NVE_DSCPTOS(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set precedence 5
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 48
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x28)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp'])+ '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set precedence 5
                                  set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x28)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC062_DECAP_PIPE_INGR_NVE_POLICER_DSCP(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   police cir 10 mbps conform set-prec-transmit 4 violate set-prec-transmit 5
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 48
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x20)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
        
    @aetest.test
    def stop_traffic(self):
    # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)
        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")

    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
     
    @aetest.test
    def configure_class_policy_modify_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp'])+ '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   police cir 10 mbps conform set-prec-transmit 4 violate set-prec-transmit 5
                                   set qos-group 2
                            ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
            
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x28)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

# *****************************************************************************************************************************#
class TC063_DECAP_PIPE_INGR_NVE_REMARKING_EGR_DSCP_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-21
                                  match dscp 22
                                policy-map type qos dscp-egress
                                  class dscp-21
                                   police cir 10 mbps conform set-dscp-transmit 26 violate set-dscp-transmit 48
                            ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                service-policy type qos output dscp-egress
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x30)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC064_DECAP_PIPE_IPV6(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
            UCAST_v6_dict = {   'src_hndl'  : IX_TP1['ipv6_handle'],
                                'dst_hndl'  : IX_TP2['ipv6_handle'],
                                'circuit'   : 'ipv6',
                                'TI_name'   : "UCAST_V6",
                                'rate_pps'  : "100000",
                                'bi_dir'    : 1,
                                'ipv6_traffic_class'   : P1_dict['ipv6_traffic_class'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v6_TI = ixLib.configure_ixia_traffic_item_ipv6_cos(UCAST_v6_dict)
            if UCAST_v6_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v6_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'40':'AF11' ,'48':'AF12' ,'56':'AF13' ,'64':'CS2' ,'72':'AF21' ,'80':'AF22' ,'88':'AF23' ,'96':'CS3' ,'104':'AF31' ,'112':'AF32' ,'120':'AF33', '128':'CS4', '136': 'AF41', '144': 'AF42','152': 'AF43','160':'CS5','184':'EF','192':'CS6','224':'CS7'}
        dscp=hex(P1_dict['ipv6_traffic_class'])
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ipv6.src=="+P1_dict['v6_addr']+"' limit-captured-frames 1 detail | i 'Traffic'")
                
                m=re.search('.*[0-1]+.*=\sTraffic class:\s(0x[0-9a-z]+)', output)
                if m:
                    a=m.group(1).split('x')
                    b='0x'+a[1].lstrip('0')
                    if b==str(hex(P1_dict['ipv6_traffic_class'])):
                        log.info("traffic has valid dscp. Test passed.")
                    else:
                        log.debug("DSCP value does not match DSCP set in traffic")
                        self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    break
                else:
                    n=re.search('.*DSCP:\s([A-Z]+[0-9]+|[A-Z]+)',output)
                    #hexcode=dscp_code_mapping[str(P1_dict['ip_dscp'])]
                    if n:
                        log.info("match found")
                        if n.group(1)==dscpcode:
                            log.info("traffic has valid dscp. Test passed.")
                        else:
                            log.debug("DSCP value does not match DSCP set in traffic")
                            self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                        break
                            
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                             ''')
            
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_V6_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_V6_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC065_DECAP_PIPE_INGR_NVE_L2_VLAN_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)

            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-21
                                  match dscp 22
                                policy-map type qos dscp-egress
                                  class dscp-21
                                   police cir 10 mbps conform set-dscp-transmit 26 violate set-dscp-transmit 48
                            ''')
            LEAF_3.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']) + '''-''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']+1) + '''
                                service-policy type qos output dscp-egress
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_for_egr_int_conform(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x1a)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_conform(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
            
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x30)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']) + '''-''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']+1) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC066_DECAP_PIPE_INGR_NVE_POLICE_L2_VLAN_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority']
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   police cir 10 mbps conform set-dscp-transmit 22 violate set-dscp-transmit 24
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-21
                                  match dscp 22
                                class-map type qos match-all dscp-22
                                  match dscp 24
                                policy-map type qos dscp-egress
                                  class dscp-21
                                   police cir 10 mbps conform set-dscp-transmit 26 violate set-dscp-transmit 48
                                  class dscp-22
                                   police cir 10 mbps conform set-dscp-transmit 40 violate set-dscp-transmit 46
                                   
                            ''')
            LEAF_3.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']) + '''-''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']+1) + '''
                                service-policy type qos output dscp-egress
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
            
    @aetest.test
    def verify_dscp_mapping_for_egr_int_conform(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x1a)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_conform(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
            
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(20)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")        
    
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x2e)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''vlan configuration ''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']) + '''-''' + str(testscript.parameters['LEAF_3_dict']['VNI_data']['l2_vlan_start']+1) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                                no class-map type qos match-all dscp-22
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
    
# *****************************************************************************************************************************#
class TC067_DECAP_PIPE_INGR_NVE_COS_REMARKING(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "10000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'egress_tracking':  'outer_vlan_priority',
                                'egress_tracking_encap': 'ethernet',
                                'bidirectional': '0',
                                'track_by' : 'trackingenabled0'
                          }
            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_cos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(60)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   set cos 4
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)

    @aetest.test
    def verify_cos_marking(self,testscript): 
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
        #pprint(traffic_stats)
        
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   set cos 4
                                   set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
    
    @aetest.test
    def start_traffic_after(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        

        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
            
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            LEAF_3.configure('''int ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + '''
                                no service-policy type qos output dscp-egress
                             ''')
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-egress
                                no class-map type qos match-all dscp-21
                             ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])
            
# *****************************************************************************************************************************#
class TC068_DECAP_PIPE_INGR_NVE_COS_POLICE(aetest.Testcase):
    """ DSCP_ENCAP_DSCP_MODIFY """
    
    @aetest.setup
    def setup(self):
        log.info("Pass testcase setup") 
    
    @aetest.test
    def CONFIGURE_UCAST_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Configure UCAST Traffic Item """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            IX_TP1 = testscript.parameters['IX_TP1']
            IX_TP2 = testscript.parameters['IX_TP2']
            P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
            P2_dict = testscript.parameters['LEAF_3_TGEN_dict']

            UCAST_v4_dict = {   'src_hndl'  : IX_TP1['ipv4_handle'],
                                'dst_hndl'  : IX_TP2['ipv4_handle'],
                                'circuit'   : 'ipv4',
                                'TI_name'   : "UCAST_V4",
                                'rate_pps'  : "9000",
                                'bi_dir'    : 1,
                                'ip_dscp'   : P1_dict['ip_dscp'],
                                'vlan_user_priority': P1_dict['vlan_user_priority'],
                                'egress_tracking':  'outer_vlan_priority',
                                'egress_tracking_encap': 'ethernet',
                                'bidirectional': '0',
                                'track_by' : 'trackingenabled0'
                          }

            UCAST_v4_TI = ixLib.configure_ixia_traffic_item_cos(UCAST_v4_dict)
            if UCAST_v4_TI == 0:
                log.debug("Configuring UCast TI failed")
                self.errored("Configuring UCast TI failed", goto=['cleanup'])
            else:
                global stream_id
                stream_id = UCAST_v4_TI
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
    
    @aetest.test
    def APPLY_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(60)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def SHUT_VPC_PO_ON_LEAF2(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_1 = testscript.parameters['LEAF-1']
        LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_2.configure('''
                
              interface port-channel ''' + str(testscript.parameters['LEAF_2_dict']['VPC_data']['VPC_ACC_po']) + '''
              shutdown                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while shutting vpc leg on LEAF-2', goto=['cleanup'])
    
    @aetest.test
    def configure_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf3"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            LEAF_3.configure('''
              monitor session 1  
              source interface ''' + str(testscript.parameters['intf_LEAF_3_to_IXIA']) + ''' tx
              destination interface sup-eth0
              no shut                
          ''')
        except Exception as error:
            log.debug("Unable to configure - Encountered Exception " + str(error))
            self.errored('Exception occurred while configuring span session on LEAF-3', goto=['cleanup'])
           
    @aetest.test
    def verify_span_session(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
        
        LEAF_3 = testscript.parameters['LEAF-3']
        #LEAF_2 = testscript.parameters['LEAF-2']
        
        try:
            output=LEAF_3.execute("sh mon sess 1 | json-pretty")
            
            span_dict=json.loads(output)
            if span_dict['TABLE_session']['ROW_session']['state']!='up':
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            elif span_dict['TABLE_session']['ROW_session']['TABLE_sources_tx']['ROW_sources_tx']['sources_tx']!=str(testscript.parameters['intf_LEAF_3_to_IXIA']):
                log.debug("span session verify failed")
                self.errored("span session verify failed", goto=['cleanup'])
            else:
                log.info("span session verify successful")
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying span session on Leaf1', goto=['cleanup'])
    
    @aetest.test
    def configure_class_policy_maps(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   police cir 10 mbps conform set-cos-transmit 4 violate set-cos-transmit 5
                                   
                            ''')
            LEAF_3.configure('''interface nve 1
                                  qos-mode pipe
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])

    @aetest.test
    def configure_calss_policy_maps_on_spine(self,testscript):
        """Configure qos policies on the spine to modify outer header qos"""
        SPINE_1 = testscript.parameters['SPINE']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            SPINE_1.configure('''class-map type qos match-all dscp-20
                                  match dscp ''' + str(P1_dict['ip_dscp']) + '''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                  set dscp 40
                            ''')
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  service-policy type qos input dscp-policy
                             ''')
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])
    
    @aetest.test
    def start_traffic(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)

    @aetest.test
    def verify_dscp_mapping_in_ipv4(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])
    
    @aetest.test
    def verify_queing_for_ingress_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_0']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_0")
            self.failed("traffic not egressing out of right queue-0", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-0")
        
    @aetest.test
    def stop_traffic(self):
        # Stop Traffic from ixia
        log.info("--- Stopping Traffic ---- \n")
        log.info("Stopping Traffic")
        traffic_run_status = ixLib.stop_traffic()
        
        if traffic_run_status is not 1:
           log.info("Failed: To Stop traffic")
           return 0
        else:
            log.info("\nTraffic Stopped successfully\n")
            time.sleep(10)
    
    @aetest.test
    def verify_cos_marking(self,testscript): 
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']    
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
        #pprint(traffic_stats)
    
    ####Edit traffic item configured
    @aetest.test
    def edit_ixia_traffic_item(self,testscript):
        
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        print(stream_id)
        log.info(stream_id)

        UCAST_L2_dict = {
                            'mode'        : 'modify',
                            'stream_id'   : str(stream_id),
                            'rate_pps'    : '100000',
                      }
        if (ixLib.edit_traffic_item(UCAST_L2_dict))==0:
            log.debug("Traffic Remove failed")
            self.failed("Traffic Remove failed", goto=['cleanup'])
        else:
            log.info("Traffic Verification Passed")

    @aetest.test
    def APPLY_EDITED_TRAFFIC(self):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Apply IXIA Traffic
        if ixLib.apply_traffic() == 1:
            log.info("Applying IXIA TI Passed")
        else:
            self.errored("Applying IXIA TI failed", goto=['cleanup'])

    @aetest.test
    def VERIFY_IXIA_EDITED_TRAFFIC(self, testscript):
        """ IXIA_CONFIGURATION subsection: Verify IXIA Traffic """

        # Do not perform configurations if skip_tgen_config flag is set
        if not testscript.parameters['script_flags']['skip_tgen_config']:

            time.sleep(60)

            if ixLib.verify_traffic(2) == 0:
                log.debug("Traffic Verification failed")
                self.failed("Traffic Verification failed", goto=['cleanup'])
            else:
                log.info("Traffic Verification Passed")
        else:
            self.passed(reason="Skipped TGEN Configurations as per request")
            
    @aetest.test
    def verify_cos_marking_for_violation(self,testscript): 
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        ixnetwork_tcl_server = testscript.parameters['ixia_tcl_server']
        
        try:
            ErrorHandler('', {})
        except (NameError,):
            def ErrorHandler(cmd, retval):
                global ixiatcl
                err = ixiatcl.tcl_error_info()
                log = retval['log']
                additional_info = '> command: %s\n> tcl errorInfo: %s\n> log: %s' % (cmd, err, log)
                raise IxiaError(IxiaError.COMMAND_FAIL, additional_info)
            
        result = ixiangpf.traffic_stats(
        mode = 'user_defined_stats',
        uds_type = 'l23_traffic_flow',
        uds_action = 'get_available_traffic_item_filters',
        )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        ti_filters_list = result['filters']
        print(ti_filters_list)
         
        result = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_available_tracking_filters',
            )
        if result['status'] != '1':
            ErrorHandler('traffic_stats', result)
         
        tracking_filters_list = result['filters']
        print(tracking_filters_list)
         
        traffic_stats = ixiangpf.traffic_stats(
            mode = 'user_defined_stats',
            uds_type = 'l23_traffic_flow',
            uds_action = 'get_stats',
            uds_traffic_item_filter = ti_filters_list,
            uds_tracking_filter = tracking_filters_list,
            uds_tracking_filter_count = len(tracking_filters_list),
            uds_l23tf_egress_latency_bin_display = 'show_egress_rows',
            uds_l23tf_filter_type = 'enumeration',
            uds_l23tf_enumeration_sorting_type = 'ascending',
            uds_l23tf_aggregated_across_ports = 0,
            )
        if traffic_stats['status'] != '1':
            ErrorHandler('traffic_stats', traffic_stats)
        
        if traffic_stats['2']['Egress Tracking']!='4':
            log.info("traffic not egressing with cos 4")
            self.failed("traffic not egressing with cos 4", goto=['cleanup'])
        else:
            log.info("traffic has valid cos. Test passed.")
            
    @aetest.test
    def configure_class_policy_map_on_egress_int(self,testscript):
        """COnfigure qos policies"""
        LEAF_3 = testscript.parameters['LEAF-3']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        try:
            LEAF_3.configure('''
                                policy-map type qos dscp-policy
                                  class dscp-20
                                   set dscp 22
                                   police cir 10 mbps conform set-cos-transmit 4 violate set-cos-transmit 5
                                   set qos-group 2
                            ''')
            
        except Exception as error:
            log.debug("Unable to configure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while configuring qos on LEAF1', goto=['cleanup'])        
     
    @aetest.test
    def start_traffic_after_editing_TI(self):
        log.info("--- Populating the statistics --- \n")
        log.info("---- Running Traffic --- \n")
        log.info("Starting Traffic")

        traffic_run_status  = ixLib.start_traffic()

        if traffic_run_status is not 1:
           log.info("Failed: To start traffic")
           return 0
        else:
            log.info("\nTraffic started successfully\n")

        time.sleep(10)
        
    @aetest.test
    def verify_dscp_mapping_for_egr_interface(self, testscript):
        """Shut down the vpc leg on Leaf2 to force all traffic to Leaf1"""
         
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_2 = testscript.parameters['LEAF-2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        cos_dscp_mapping={'0':0, '1':0x8, '2':0x10, '3':0x1a, '4':0x20, '5':0x28, '6':0x30, '7':0x56}
        cos=P1_dict['vlan_user_priority']
        expected_dscp=hex(cos_dscp_mapping[cos])
        dscp_code_mapping={'10':'AF11' ,'12':'AF12' ,'14':'AF13' ,'16':'CS2' ,'18':'AF21' ,'20':'AF22' ,'22':'AF23' ,'24':'CS3' ,'26':'AF31' ,'28':'AF32' ,'30':'AF33', '32':'CS4', '34': 'AF41', '36': 'AF42','38': 'AF43','40':'CS5','46':'EF','48':'CS6','56':'CS7'}
        dscp=hex(0x16)
        dscpcode=dscp_code_mapping[str(int(dscp,16))]
        #dscpcode=dscp_code_mapping[str(int(hex(dscp),16))]
        
        try:
            i=0
            while (i<10):
                output=LEAF_3.execute("ethanalyzer local interface inband mirror display-filter 'ip.src=="+P1_dict['v4_addr']+"' limit-captured-frames 1 detail | i DSCP")
                
                if verify_dscp(output,str(dscp),dscpcode):
                    break
                i=i+1        
            else:
                log.debug("DSCP value does not match DSCP set in traffic")
                self.failed("DSCP value does not match DSCP value set in traffic", goto=['cleanup'])
                    
        except Exception as error:
            log.debug("Unable to verify - Encountered Exception " + str(error))
            self.errored('Exception occurred while verifying dscp marking Leaf1', goto=['cleanup'])  
    
    @aetest.test
    def verify_queing_for_modified_qos_traffic(self,testscript):
        time.sleep(10)
        LEAF_3 = testscript.parameters['LEAF-3']
        LEAF_3.execute('clear qos statistics')
        time.sleep(20)
        output=LEAF_3.execute('sh queuing tabular interface '+str(testscript.parameters['intf_LEAF_3_to_IXIA'])+' | json-pretty')
        
        a=json.loads(output)
        pkts=a['TABLE_module']['ROW_module']['TABLE_queuing_interface']['ROW_queuing_interface']['TABLE_queuing_counter']['ROW_queuing_counter'][0]['qos_group_2']
        if pkts == '0':
            log.info("traffic not egressing out of qos_group_2")
            self.failed("traffic not egressing out of right queue-2", goto=['cleanup'])
        else:
            log.info("traffic taking right queue-2")
     
    @aetest.cleanup
    def cleanup(self,testscript):
        """Unconfigure qos policies"""
        LEAF_1 = testscript.parameters['LEAF-1']
        IX_TP1 = testscript.parameters['IX_TP1']
        IX_TP2 = testscript.parameters['IX_TP2']
        P1_dict = testscript.parameters['LEAF_2_TGEN_dict']
        P2_dict = testscript.parameters['LEAF_3_TGEN_dict']
        LEAF_2 = testscript.parameters['LEAF-2']
        LEAF_3 = testscript.parameters['LEAF-3']
        SPINE_1 = testscript.parameters['SPINE']
        
        try:
            # Stop Traffic from ixia
            log.info("--- Stopping Traffic ---- \n")
            log.info("Stopping Traffic")
            traffic_run_status = ixLib.stop_traffic()
            
            if traffic_run_status is not 1:
               log.info("Failed: To Stop traffic")
               return 0
            else:
                log.info("\nTraffic Stopped successfully\n")
                time.sleep(10)
                
            LEAF_3.configure('''interface nve 1
                                  no qos-mode pipe
                                  no service-policy type qos input dscp-policy
                             ''')
            
            LEAF_3.configure('''no policy-map type qos dscp-policy
                                no class-map type qos match-all dscp-20
                             ''')
            
            SPINE_1.configure('''interface port-channel ''' + str(testscript.parameters['SPINE_1_dict']['LEAF_1_UPLINK_PO']['po_id']) + '''
                                  no service-policy type qos input dscp-policy
                             ''')
            SPINE_1.configure('''no policy-map type qos dscp-policy
                              no class-map type qos match-all dscp-20
                                
                            ''')
            
            UCAST_L2_dict = {
                                'mode'        : 'remove',
                                'stream_id'   : str(stream_id),
                          }
            if (ixLib.delete_traffic_item(UCAST_L2_dict))==0:
                log.debug("Traffic Remove failed")

            else:
                log.info("Traffic Remove Passed")
                time.sleep(10)
                
            ##check for cores,cc,errors
            status = infraVerify.postTestVerification(post_test_process_dict)
            if status['status'] == 0:
                self.failed(reason=status['logs'])
            else:
                self.passed(reason=status['logs'])
                
        except Exception as error:
            log.debug("Unable to unconfigure class map or policy map-Encountered exception " + str(error))
            self.errored('Exception occurred while unconfiguring qos on LEAF1', goto=['next_tc'])

#########################################################################
#####                       COMMON CLEANUP SECTION                    ###
#########################################################################
##
### Remove the BASE CONFIGURATION that was applied earlier in the 
### common cleanup section, clean the left over
#
#class common_cleanup(aetest.CommonCleanup):
#    """ Common Cleanup for Sample Test """
#
#    @aetest.subsection
#    def restore_terminal_width(self, BL1):
#        """ Common Cleanup subsection """
#        log.info(banner("script common cleanup starts here"))
#
#    @aetest.subsection
#    def restore_terminal_width(self, BL2):
#        """ Common Cleanup subsection """
#        log.info(banner("script common cleanup starts here"))
#
#    @aetest.subsection
#    def restore_terminal_width(self, CORE):
#        """ Common Cleanup subsection """
#        log.info(banner("script common cleanup starts here"))
#
#    @aetest.subsection
#    def restore_terminal_width(self, SPINE):
#        """ Common Cleanup subsection """
#        log.info(banner("script common cleanup starts here"))


if __name__ == '__main__':  # pragma: no cover
    aetest.main()
